<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<?enunciate-assumed-base-uri ./?>
<wadl:application xmlns:wadl="http://wadl.dev.java.net/2009/02" xmlns:xs="http://www.w3.org/2001/XMLSchema">

  <wadl:doc xmlns:enunciate="http://enunciate.webcohesion.com/" enunciate:generatedBy="Enunciate-2.0"/>
  
  <wadl:grammars>
  </wadl:grammars>

  <wadl:resources base="./">

    <wadl:resource path="">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Responses a state of the current status.]]></wadl:doc>
        <wadl:response>
          <wadl:doc><![CDATA[Response as JSON with for example the current date and time.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/account">
      <wadl:method name="POST">
        <wadl:doc><![CDATA[Creates a new account. For this an unique email address and a
password are mandatory. By the creation of an organisation this
email address is connected with it. Optionally the first and last
name can also be set.
In the response the password isn't returned because of security
reasons.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="email" style="query">
            <wadl:doc><![CDATA[A required valid email address.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="firstName" style="query">
            <wadl:doc><![CDATA[Optionally the first name of the Account's owner can be set.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="lastName" style="query">
            <wadl:doc><![CDATA[Optionally the last name of the Account's owner can be set.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="password" style="query">
            <wadl:doc><![CDATA[Required query parameter to connect it with the given
email address.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[A Response of Account in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/account">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Returns an account corresponding to the given email address but only
if the combination with password is correct. By the creation of an
organisation this email address is connected with it.
So the method requires valid credentials otherwise a warning with the
hint for wrong credentials is returned.
In the response the password isn't returned because of security
reasons.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="password" style="header">
            <wadl:doc><![CDATA[Required header parameter associated with the email address.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="email" style="query">
            <wadl:doc><![CDATA[A required valid unique email address.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[A Response of Account in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/account">
      <wadl:method name="PUT">
        <wadl:doc><![CDATA[Updates the first and last name of an existing account. For this the
specific email address and associated password are mandatory.
Otherwise a warning with the hint for wrong credentials is returned.
In the response the password isn't returned because of security
reasons.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="password" style="header">
            <wadl:doc><![CDATA[Required header parameter to connect it with the given
email address.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="email" style="query">
            <wadl:doc><![CDATA[A required valid email address.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="firstName" style="query">
            <wadl:doc><![CDATA[Optionally the first name of the Account's owner can be set.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="lastName" style="query">
            <wadl:doc><![CDATA[Optionally the last name of the Account's owner can be set.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[A Response of Account in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/donation">
      <wadl:method name="POST">
        <wadl:doc><![CDATA[Creates a new call for donations and generates the DonationCall-id. The organisation's API key is
mandatory otherwise a warning with the hint for a non valid API key is returned.
By the creation the name and description are passed who should be assigned to this call for donation.
The goal of the call for donations also has be specified. This goal repesents the amount of coins that
should be reached.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this call for donations belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="description" style="query">
            <wadl:doc><![CDATA[The longer description of the call for donation. This can contain its purpose.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="goalAmount" style="query">
            <wadl:doc><![CDATA[The amount of coins that should be reached to fulfil this donation.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="name" style="query">
            <wadl:doc><![CDATA[The short name of the call for donation.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of DonationCall in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/goal">
      <wadl:method name="POST">
        <wadl:doc><![CDATA[Creates a new goal and so the method generates the goal-id.
The organisation's API key is mandatory otherwise a warning with the hint for a  non valid API key is
returned.
By the creation the name and the id of the associated rule are needed. It can also be defined if
the goal is repeatable or if it can also be completed by a group.
Optionally the goal can be passed the ids of roles which are allowed to complete the goal. So if a player has at
least one of these roles she/he can complete the goal and earn its rewards. It is checked, if the ids of the
players are positive numbers otherwise a message for the invalid number is returned.
Optionally the goal can be passed the id of rewards which can be earned. These ids are also checked if
they are positive numbers.
If the API key is not valid an analogous message is returned.

Note:  If a goal is associated with a points rule and is also repeatable the goal will be added once only to the
player's or respectively group's list of already finished goals. The rewards of such a goal are also awarded
only once. So a points rule can be fulfilled once only although the associated goal is repeatable.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this goal belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="groupGoal" style="query">
            <wadl:doc><![CDATA[Optionally a goal can also be done by a group. Possible values are "1" or "0", "true" or
"false". The default value is "false".]]></wadl:doc>
          </wadl:param>
          <wadl:param name="name" style="query">
            <wadl:doc><![CDATA[The name of the goal. This parameter is required.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="repeatable" style="query">
            <wadl:doc><![CDATA[Optionally a goal can be set as repeatable by "1" or "0", "true" or
"false". The default value is "true".]]></wadl:doc>
          </wadl:param>
          <wadl:param name="rewardIds" style="query">
            <wadl:doc><![CDATA[All rewards that are awarded to the player who completes the goal. These ids are
separated by commas.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="roleIds" style="query">
            <wadl:doc><![CDATA[Optionally a list of role-ids can be passed which are separated by commas. These ids indicate
who is allowed to fulfil the goal. This parameter is required.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="ruleId" style="query">
            <wadl:doc><![CDATA[The rule which define when a goal is completed. This parameter is required.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[A Response of Goal in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/organisation">
      <wadl:method name="POST">
        <wadl:doc><![CDATA[Creates a new organisation. The email address and password of one Account are used
to connect it with this organisation. So the email address and password are mandatory for
authentication otherwise a warning with the hint for wrong credentials is returned.
All further Accounts which should be associated to this organisation are added with the
method addManager.
In the response the account's password isn't returned because of security reasons.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="password" style="header">
            <wadl:doc><![CDATA[Required header parameter associated with the email address.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="email" style="query">
            <wadl:doc><![CDATA[The required valid email address.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="name" style="query">
            <wadl:doc><![CDATA[The name of the developer or the manager of the account.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[A Response of Organisation in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/player">
      <wadl:method name="POST">
        <wadl:doc><![CDATA[Creates a new player and so the method generates the player-id. The organisation's API key
is mandatory otherwise a warning with the hint for a non valid API key is returned.
The player can choose a password for her/his account. By the creation some initial
roles can be set which can also be changed at a later point of time. By default every
created player is active until she/he is deactivated. It is checked, if the id of the
roles are positive numbers otherwise a message for the invalid number is returned.
In the response the player's password and avatar isn't returned because of security
reasons respectively overhead.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this player should belong to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="avatar" style="query">
            <wadl:doc><![CDATA[The url of the avatar. The image's size can be up to 3 MB.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="nickname" style="query">
            <wadl:doc><![CDATA[The query parameter of the player's nickname. This field must not be null.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="password" style="query">
            <wadl:doc><![CDATA[The query parameter for the player's password. This field must not be null.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="reference" style="query">
            <wadl:doc><![CDATA[Optionally the player's reference as string map to a customers user
identifier.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="roleIds" style="query">
            <wadl:doc><![CDATA[Optionally a list of role ids can be passed that a player has. These ids are
separated by commas.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[A Response of Player in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/playerGroup">
      <wadl:method name="POST">
        <wadl:doc><![CDATA[Creates a new group of players and so the method generates the PlayerGroup-id.
The organisation's API key is mandatory otherwise a warning with the hint for a
non valid API key is returned.
By the creation the player-ids of the players are passed who should be assigned
to this group. A PlayerGroup can has a name and optional a logo which are query
parameters. It is checked, if the ids of the players are positive numbers otherwise
a message for the invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this group of players belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="logoPath" style="query">
            <wadl:doc><![CDATA[Optionally a group logo as a HTTP reference can be passed.
The image's size can be up to 3 MB.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="name" style="query">
            <wadl:doc><![CDATA[The name of the group. This parameter is required.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="playerIds" style="query">
            <wadl:doc><![CDATA[A list of player-ids can be passed that a group has. These ids are
separated by commas. This parameter is required.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of PlayerGroup in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/playerLevel">
      <wadl:method name="POST">
        <wadl:doc><![CDATA[Creates a new player level and generates the PlayerLevel-id. The organisation's
API key is mandatory otherwise a warning with the hint for a non valid API key
is returned.
By the creation the name and index of the player have to be passed. It is checked,
if the index of the level is a positive number otherwise a message for the
invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this player level belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="levelIndex" style="query">
            <wadl:doc><![CDATA[The index of the level. This parameter is required.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="levelName" style="query">
            <wadl:doc><![CDATA[The name of the player level. This parameter is required.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of PlayerLevel in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/reward">
      <wadl:method name="POST">
        <wadl:doc><![CDATA[Creates a new reward and so the method generates the reward-id. The organisation's API
key is mandatory otherwise a warning with the hint for a non valid API key is returned.
It has to be defined which type of reward should be created, its name, description and
respectively it is a permanent or a volatile reward an URL for the icon or the amount
of coins or points.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="amount" style="query">
            <wadl:doc><![CDATA[If the type is a volatile reward like points or coins this parameter is used
to represent their amount.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this reward belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="description" style="query">
            <wadl:doc><![CDATA[Optionally the description of the reward as String.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="icon" style="query">
            <wadl:doc><![CDATA[If the type is a permanent reward like a badge or achievement this parameter
represents the URL of the associated image.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="name" style="query">
            <wadl:doc><![CDATA[A string that represents the name of the reward.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="type" style="query">
            <wadl:doc><![CDATA[The required type of the reward. A list of available reward types
can be received by {@link RewardApi#getRewardTypes}. The value of
field can be "Achievement", "Badge", "Coins", "Points" and "ReceiveLevel".]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Reward in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/role">
      <wadl:method name="POST">
        <wadl:doc><![CDATA[Creates a new role for the organisation to which the API key belongs to. Because
of this API key the created role is specific to this organisation.
If the API key is not valid an analogous message is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this role belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="roleName" style="query">
            <wadl:doc><![CDATA[The required name of the new role. This field must not be null.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Role in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/task">
      <wadl:method name="POST">
        <wadl:doc><![CDATA[Creates a new task and so the method generates the task-id. The organisation's API key
is mandatory otherwise a warning with the hint for a non valid API key is returned.
By the creation values for its name, a short description what have to done and the roles
who are allowed to complete the task.
It is checked, if the id of the roles are positive numbers otherwise a message for the
invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this task belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="description" style="query">
            <wadl:doc><![CDATA[Optional a short description can be set. This can be for example explain what
a player has to do to complete the task.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="name" style="query">
            <wadl:doc><![CDATA[The name of the task. This parameter is required.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="roleIds" style="query">
            <wadl:doc><![CDATA[Optionally a list of role ids separated by commas which are allowed to fulfil the
task.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="tradeable" style="query">
            <wadl:doc><![CDATA[This field specifies whether the task is tradeable or not. The default value is
set to not tradeable (false).]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Task in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/donation/*">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Returns the call for donation which are associated with the organisation. If the API key is not
valid an analogous message is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this call for donations belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of List with all DonationCalls of one organisaiton in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/donation/{id}">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Returns the call for donation which is associated with the passed id. If the API key is not
valid an analogous message is returned. It is also checked, if the id is a positive number
otherwise a message for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this call for donations belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of DonationCall in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/donation/{id}">
      <wadl:method name="DELETE">
        <wadl:doc><![CDATA[Removes the call for donations with the assigned id from data base. If the goal of call for donations isn't
reached, first all donors get their donations back and then in a second step the call for donation itself is
removed from the database. Else if the goal is already reached, the call for donation is deleted.
It is checked, if the passed id is a positive number otherwise a message for an invalid number is returned.
If the API key is not valid an analogous message is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this call for donations belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of DonationCall in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/goal/*">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Returns all goals which are associated with the given API key and so are belonging to the organisation.
The players of one organisaiton can try to complete one these goals.
If the API key is not valid an analogous message is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this goal belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[A Response as List of Goals in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/goal/{id}">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Gets the {@link GoalRule} object which is associated with the goal. It is identified by the passed id and
the API key. If the API key is not valid an analogous message is returned. It is also checked, if the
id is a positive number otherwise a message for an invalid number is returned..]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this goal belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Goal in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/goal/{id}">
      <wadl:method name="DELETE">
        <wadl:doc><![CDATA[Removes a specific goal from the data base which is identified by the given id and the
API key. If the API key is not valid an analogous message is returned. It is also checked,
if the id is a positive number otherwise a message for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this goal belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Goal in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/marketPlace/highestOffers">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Gets all offers of a marketplace ordered by prize, highest prize first.
If the API key is not valid an analogous message is returned. It is also checked, if the player id is
a positive number otherwise a message for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which the player belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="count" style="query">
            <wadl:doc><![CDATA[Optionally the count of offers that should be returned can be passed. The default value is 10.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="marketPlaceId" style="query">
            <wadl:doc><![CDATA[The marketplace whose offers are filtered.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response as List of Offers in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/marketPlace/market">
      <wadl:method name="POST">
        <wadl:doc><![CDATA[Creates a new market place for an organisation which is identified by the API key. So the method generates the
marketplace-id. But this is only possible if no marketplace exists yet.
The organisation's API key is mandatory otherwise a warning with the hint for a non valid API key is
returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this marketplace belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of MarketPlace in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/marketPlace/offer">
      <wadl:method name="POST">
        <wadl:doc><![CDATA[Creates a new group of offer and so the method generates the offer-id. The organisation's API key is
mandatory otherwise a warning with the hint for a non valid API key is returned.
By the creation the name, the prize which represents the initial bid and id of the task the offer
is associated should be passed.
Additionally the id of the player who creates the offer and the id of the marketplace should be passed.
Optionally it can be defined when the offer ends and until the task should be done.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this offer belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="deadLine" style="query">
            <wadl:doc><![CDATA[The point of time until the offer is valid. The format of the values is
yyyy-MM-dd HH:mm.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="endDate" style="query">
            <wadl:doc><![CDATA[The date and time how long the offer is available on the market. The format of the values is
yyyy-MM-dd HH:mm.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="marketId" style="query">
            <wadl:doc><![CDATA[The id of the marketplace where the offer should be available.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="name" style="query">
            <wadl:doc><![CDATA[The name of the offer. This parameter is required.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="playerId" style="query">
            <wadl:doc><![CDATA[The id of the player who created the offer. This parameter is required.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="prize" style="query">
            <wadl:doc><![CDATA[The initial bid of the offer. This is the prize a player can earn.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="taskId" style="query">
            <wadl:doc><![CDATA[The id of the task the offer is associated with. This parameter is required.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Offer in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/marketPlace/recentOffers">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Gets all offers of the marketplace ordered by date, recent first.
If the API key is not valid an analogous message is returned. It is also checked, if the player id is
a positive number otherwise a message for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which the player belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="count" style="query">
            <wadl:doc><![CDATA[Optionally the count of offers that should be returned can be passed. The default value is 10.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="marketPlaceId" style="query">
            <wadl:doc><![CDATA[The marketplace whose offers are filtered.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response as List of Offers in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/organisation/*">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Returns all organisations which are associated with the combination of the two
query parameters. Otherwise an exception is sent that the given credentials are wrong.
In the response the account's password isn't returned because of security reasons.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="password" style="header">
            <wadl:doc><![CDATA[Required header parameter to connect it with the given email address.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="email" style="query">
            <wadl:doc><![CDATA[A required valid email address.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[A Response as List of Organisations in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/organisation/addManager">
      <wadl:method name="POST">
        <wadl:doc><![CDATA[Adds a new developer to the organisation's list of manager. The email address and
password are mandatory for authentication otherwise a warning with the hint for
wrong credentials is returned. If the manager who should be added is already in the
list, a message is given with the hint that she/he is already added.
In the response the account's password isn't returned because of security reasons.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The API key of the organisation to which the manager belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="firstName" style="query">
            <wadl:doc><![CDATA[Optionally the first name of the Account's owner can be set.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="lastName" style="query">
            <wadl:doc><![CDATA[Optionally the last name of the Account's owner can be set.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="manager" style="query">
            <wadl:doc><![CDATA[The required valid email address for the new manager.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="managerPW" style="query">
            <wadl:doc><![CDATA[The required new password of the new maanger.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[A Response of Organisation in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/organisation/{id}">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Returns a specific organisation which id is equal to the transfered path parameter.
Additionally the email address and the associated password are mandatory and have to be
correct otherwise an exception is returned that the given credentials are wrong.
In the response the account's password isn't returned because of security reasons.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="password" style="header">
            <wadl:doc><![CDATA[Required header parameter to connect it with the given
email address.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="email" style="query">
            <wadl:doc><![CDATA[The valid email address.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[A response of Organisation in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/player/*">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[This method collects all players associated with the given API key and so all players who
belong to the associated organisation. If the API key is not valid an analogous message
is returned.
In the response the players' password and avatar isn't returned because of security
reasons respectively overhead.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[A Response as List of Players in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/player/reference">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Returns the player that matched to a specific reference field in a specific organisation.
If the reference field dosen't match to a player an API Error is returned with the
message that such a player dosen't exist
If the API key is not valid an analogous message is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which the player belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="reference" style="query">
            <wadl:doc><![CDATA[The reference to which the player should be returned.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of the player as JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/player/{id}">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[This method gets one specific player who is identified by the given id and the API key.
If the API key is not valid an analogous message is returned. It is also checked, if the
id is a positive number otherwise a message for an invalid number is returned.
In the response the player's password and avatar isn't returned because of security
reasons respectively overhead.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this player belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Player in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/player/{id}">
      <wadl:method name="DELETE">
        <wadl:doc><![CDATA[Removes a specific player from the data base who is identified by the given id and the
API key. If the API key is not valid an analogous message is returned. It is also checked,
if the id is a positive number otherwise a message for an invalid number is returned.
In the response the player's password and avatar isn't returned because of security
reasons respectively overhead.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this role belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response as List of Players in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/playerGroup/*">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Returns all group of players associated with the passed API key. If the API key is not
valid an analogous message is returned. It is also checked, if the player id is a
positive number otherwise a message for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this group of players belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of PlayerGroup in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/playerGroup/{id}">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Returns the group of players associated with the passed id. If the API key is not
valid an analogous message is returned. It is also checked, if the player id is a
positive number otherwise a message for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this group of players belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of PlayerGroup in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/playerGroup/{id}">
      <wadl:method name="DELETE">
        <wadl:doc><![CDATA[Removes the group with the assigned id from data base. It is checked, if the passed id is a
positive number otherwise a message for an invalid number is returned. If the API key is not
valid an analogous message is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this group of players belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of PlayerGroup in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/playerLevel/*">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Returns all player level which are associated with the passed API key.
If the API key is not valid an analogous message is returned. It is also
checked, if the id is a positive number otherwise a message for an invalid
number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which the player levels belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of all PlayerLevels in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/playerLevel/{id}">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Returns the player level associated with the passed id. If the API key is not
valid an analogous message is returned. It is also checked, if the id is a
positive number otherwise a message for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this player level belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of PlayerLevel in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/playerLevel/{id}">
      <wadl:method name="DELETE">
        <wadl:doc><![CDATA[Removes the layer level with the assigned id from data base. It is checked, if the passed id is a
positive number otherwise a message for an invalid number is returned. If the API key is not
valid an analogous message is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this player level belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of PlayerLevel in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/present/imageMessage">
      <wadl:method name="POST">
        <wadl:doc><![CDATA[Creates a new image message as a present in a gamificated application, so the method
generates the Present-id. The organisation's API key is mandatory otherwise a warning
with the hint for a non valid API key is returned.
By the creation the player-id of the sender and a list of the receiver ids are needed to
be passed. These id have to be separated by commas. Additionally the image path of the
image has to be passed. The format of the image has to be .jpg or .png.
It is checked, if the ids of the players are positive numbers otherwise a message for the
invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this image message belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="imagePath" style="query">
            <wadl:doc><![CDATA[The path of the image. This field must not be null and the format of the image
has to be .jpg or .png.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="playerId" style="query">
            <wadl:doc><![CDATA[The player who sends the image message as a present to other players. This
field must not be null.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="receiverIds" style="query">
            <wadl:doc><![CDATA[The player ids of the present's receivers. This field must not be null.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="text" style="query">
            <wadl:doc><![CDATA[A short text comment that belong to the image.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of ImageMessage in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/present/textMessage">
      <wadl:method name="POST">
        <wadl:doc><![CDATA[Creates a new text message as a present in a gamificated application, so the method
generates the Present-id. The organisation's API key is mandatory otherwise a warning
with the hint for a non valid API key is returned.
By the creation the player-id of the sender and a list of the receiver ids are needed to
be passed. Additionally the content of the text message has to be passed.
It is checked, if the ids of the players are positive numbers otherwise a message for the
invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this text message belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="content" style="query">
            <wadl:doc><![CDATA[The content of the text message.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="playerId" style="query">
            <wadl:doc><![CDATA[The player who sends the text message as a present to other players. This
field must not be null.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="receiverIds" style="query">
            <wadl:doc><![CDATA[The player ids of the present's receivers. This field must not be null.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of TextMessage in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/present/{id}">
      <wadl:method name="DELETE">
        <wadl:doc><![CDATA[Removes the specific present with the assigned id from data base. It is checked, if the passed
id is a positive number otherwise a message for an invalid number is returned. If the API key
is not valid an analogous message is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this present belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Present in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/reward/*">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Returns a list of all rewards associated with the passed API key and so all rewards
which belong to a specific organisation. If the API key is not valid an analogous
message is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this reward belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response as List of Rewards in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/reward/achievement">
      <wadl:method name="POST">
        <wadl:doc><![CDATA[Creates a new reward of type achievement so the method generates its reward-id. The
organisation's API key is mandatory otherwise a warning with the hint for a non valid
API key is returned. Optionally the URL for an icon can be passed and a description for
the achievement.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this reward belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="description" style="query">
            <wadl:doc><![CDATA[Optionally a short text can be set to describe the achievement.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="name" style="query">
            <wadl:doc><![CDATA[The required name of the achievement.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="url" style="query">
            <wadl:doc><![CDATA[Optionally the URL of an image can be set that is associated with the
achievement.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Achievement in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/reward/badge">
      <wadl:method name="POST">
        <wadl:doc><![CDATA[Creates a new reward of type badge so the method generates its reward-id. The
organisation's API key is mandatory otherwise a warning with the hint for a non valid
API key is returned. Optionally the URL for an icon can be passed and a description for
the badge.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this reward belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="description" style="query">
            <wadl:doc><![CDATA[Optionally a short text can be set to describe the badge.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="name" style="query">
            <wadl:doc><![CDATA[The required name of the badge.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="url" style="query">
            <wadl:doc><![CDATA[Optionally the URL of an image can be set that is associated with the badge.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Badge in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/reward/coins">
      <wadl:method name="POST">
        <wadl:doc><![CDATA[Creates a new reward of type coins so the method generates its reward-id. The
organisation's API key is mandatory otherwise a warning with the hint for a non valid
API key is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="amount" style="query">
            <wadl:doc><![CDATA[The required amount of coins greater then zero that can be earned.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this reward belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="description" style="query">
            <wadl:doc><![CDATA[Optionally a short text can be set to describe the reward.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="name" style="query">
            <wadl:doc><![CDATA[The required name of the coins reward.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Coins in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/reward/level">
      <wadl:method name="POST">
        <wadl:doc><![CDATA[Creates a new reward of type level so the method generates its reward-id. A level can
be a number or a status like novice or expert in the area of specific tasks. The
organisation's API key is mandatory otherwise a warning with the hint for a non valid
API key is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="amount" style="query">
            <wadl:doc><![CDATA[The required level index greater then zero.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this reward belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="description" style="query">
            <wadl:doc><![CDATA[Optionally a short text can be set to describe the level.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="name" style="query">
            <wadl:doc><![CDATA[The required name of the level can be set.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of ReceiveLevel in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/reward/points">
      <wadl:method name="POST">
        <wadl:doc><![CDATA[Creates a new reward of type points so the method generates its reward-id. The
organisation's API key is mandatory otherwise a warning with the hint for a non valid
API key is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="amount" style="query">
            <wadl:doc><![CDATA[The required amount of points greater then zero that can be earned.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this reward belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="description" style="query">
            <wadl:doc><![CDATA[Optionally a short text can be set to describe the reward.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="name" style="query">
            <wadl:doc><![CDATA[The required name of the points reward.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Reward in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/reward/types">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Returns a list of all available reward types associated with an API key that can
can created. If the API key is not valid an analogous message is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this reward belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response a String with all types of a Reward in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/reward/{id}">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[This method returns one specific player who is identified by the passed id and the
API key. If the API key is not valid an analogous message is returned. It is also
checked, if the id is a positive number otherwise a message for an invalid number
is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this reward belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Reward in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/reward/{id}">
      <wadl:method name="DELETE">
        <wadl:doc><![CDATA[Removes a specific reward from the data base which is identified by the passed id and
the API key. But only if it is not associated to a goal. Then first the goal has to deleted.
If the API key is not valid an analogous message is returned. It is also checked, if
the id is a positive number otherwise a message for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this reward belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Reward with 200 OK and JSON as response type.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/role/*">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Gets all roles of a specific organisation that have been created. If the API key is not
valid an analogous message is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this role belongs to. This field must not be null.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response as List of Roles in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/role/{id}">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Gets a specific role of an organisation so the id of the organisation and its API key are needed.
If the API key is not valid an analogous message is returned. It is also checked, if the id is a positive
number otherwise a message for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this role belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Role in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/role/{id}">
      <wadl:method name="DELETE">
        <wadl:doc><![CDATA[Deletes a specific role of an organisation so the id of the organisation and its API key are needed.
If the API key is not valid an analogous message is returned. It is also checked, if the id is a positive
number otherwise a message for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this role belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Role in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/rule/*">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[This method collects all available rules associated with the given API key and so all goal rules which
belong to the associated organisation. If the API key is not valid an analogous message
is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this rule belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response as List of GoalRules in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/rule/point">
      <wadl:method name="POST">
        <wadl:doc><![CDATA[Creates a new points rule. By the creation the amount of points which has to be reached to fulfil the
goal and also its name are needed. A description can also be made.
If a goal is associated with a points rule and is also repeatable the goal will be added once only to the
player's or respectively group's list of already finished goals. The rewards of such a goal are also awarded
only once. So a points rule can be fulfilled once only although the associated goal is repeatable.
If the API key is not valid an analogous message is returned. It is also checked, if the id is a positive
number otherwise a message for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this rule belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="description" style="query">
            <wadl:doc><![CDATA[Optionally the description of the rule can be passed. This can help the player to understand
which tasks she/he to fulfil.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="name" style="query">
            <wadl:doc><![CDATA[The name of the task rule. This parameter is required.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="points" style="query">
            <wadl:doc><![CDATA[The amount of points which should be reached.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of GetPointsRule in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/rule/task">
      <wadl:method name="POST">
        <wadl:doc><![CDATA[Creates a new task rule. By the creation the type of rule (DoAllTasksRule or DoAnyTaskRule) has to be defined, the rule's name,
description and the ids which should be associated with this rule.
If the API key is not valid an analogous message is returned. It is also checked, if the id is a positive
number otherwise a message for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this rule belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="description" style="query">
            <wadl:doc><![CDATA[Optionally the description of the rule can be passed. This can help the player to understand
which tasks she/he to fulfil.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="name" style="query">
            <wadl:doc><![CDATA[The name of the task rule. This parameter is required.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="tasks" style="query">
            <wadl:doc><![CDATA[The list of task ids that are have to be respective can be fulfilled to complete the goal.
These ids are separated by commas.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="type" style="query">
            <wadl:doc><![CDATA[The type of the task rule, this can be "DoAllTasksRule" or "DoAnyTaskRule".
This field must not be null.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of DoAllTasksRule or DoAnyTaskRule in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/rule/{id}">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[This method gets one specific goal rule which is identified by the given id and the API key.
If the API key is not valid an analogous message is returned. It is also checked, if the
id is a positive number otherwise a message for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this rule belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of GoalRule in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/rule/{id}">
      <wadl:method name="DELETE">
        <wadl:doc><![CDATA[Removes a specific goal rule from the data base which is identified by the given id and the
API key. But only if the goal rule is not associated to a goal. Then first the goal has to deleted.
If the API key is not valid an analogous message is returned. It is also checked, if the id
is a positive number otherwise a message for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this rule belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of GoalRule in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/task/*">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Returns a list of all tasks associated with the passed API key. If the key is not
valid an analogous message is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this task belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Task in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/task/notDone">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Gets all tasks that are not done for at least one time.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to the specific organisation,
to which these task belong to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of the requested tasks in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/task/specificTasks">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[This method returns only the requested tasks. This can be used, when more than one task is needed but not
all tasks.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which these tasks belong to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="taskIds" style="query">
            <wadl:doc><![CDATA[The ids of the requestes tasks. These are passed as a comma separated list.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of specific tasks in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/task/tradeableNotDone">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Gets all tradeable tasks that are not done for at least one time.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to the specific organisation,
to which these task belong to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of the requested tasks in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/task/{id}">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Returns the task associated with the passed id and API key. If the API key is not
valid an analogous message is returned. It is also checked, if the player id is a
positive number otherwise a message for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this task belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Task in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/task/{id}">
      <wadl:method name="DELETE">
        <wadl:doc><![CDATA[Removes the task with the assigned id and associated API key from data base. But only if
the task is not associated to a goal rule or is an offer on the marketplace. Then first these
elements have to deleted.

Consider that if a task is deleted all finished tasks that contains this task are also deleted!
So these finished tasks are also removed of the player's list who has completed it.
It is checked, if the passed id is a positive number otherwise a message for an invalid number
is returned. If the API key is not valid an analogous message is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this task belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Task in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/donation/{id}/attributes">
      <wadl:method name="PUT">
        <wadl:doc><![CDATA[With this method the fields of one specific call for donations can be changed.
For this the associated id, the API key of the specific organisation, the
name of the field and the new field's value are needed.
To modify the name or the description of a call for donation, the new value
can be passed.
If the API key is not valid an analogous message is returned. It is
also checked, if the id is a positive number otherwise a message for
an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this call for donations belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="attribute" style="query">
            <wadl:doc><![CDATA[The name of the attribute which should be modified. This
parameter is required. The following names of attributes can
be used to change the associated field:
"name" and "description"]]></wadl:doc>
          </wadl:param>
          <wadl:param name="value" style="query">
            <wadl:doc><![CDATA[The new value of the attribute. This parameter is required.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of DonationCall in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/donation/{id}/donations">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Gets a list of all donations which were made for a specific call for donations.
If the API key is not valid an analogous message is returned. It is also checked, if the offer id is a
positive number otherwise a message for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which the call for donations belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response as List of Donations in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/donation/{id}/donors">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Returns a list of all donors that have donated to a specific call for donoation. If the API key is
not valid an analogous message is returned. It is also checked, if the id is a positive number
otherwise a message for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this call for donations belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Returns a list of all donors of a specific call for donations in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/donation/{id}/progress">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Returns the progress of an call for donations: the current amount and the amount that should be
reached. If the API key is not valid an analogous message is returned. It is also checked, if the
id is a positive number otherwise a message for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this call for donations belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Returns the current amount and the amount that should be reached in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/goal/{id}/attributes">
      <wadl:method name="PUT">
        <wadl:doc><![CDATA[With this method the fields of one specific goal can be changed. For this the goal id, the API key of
the specific organisation, the name of the field and the new field's value are needed.
To modify the name of the goal the new string has to be transfered with the attribute field.
A list with role-ids separated by commas can be passed to define new roles which a player has to be allowed
to complete the goal. By passing an id of another rule a new goal rule is associated with the goal.
To modify if a goal is repeatable or can be completed as a group the values "1" or "0" or alternatively
"true" and "false" can be passed.
It is also checked, if all ids are a positive number otherwise a message for an invalid number is returned.
If the API key is not valid an analogous message is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this role belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="attribute" style="query">
            <wadl:doc><![CDATA[The attribute which should be modified. This parameter is required.
The following names of attributes can be used to change the associated field:
"goalName", "isRepeateable", "isGroupGoal", "rewardId" and "roles".]]></wadl:doc>
          </wadl:param>
          <wadl:param name="value" style="query">
            <wadl:doc><![CDATA[The new value of the attribute.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Goal in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/marketPlace/markets/*">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Gets all marketplaces of an organisation with all current offers.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this goal belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Return of all MarketPlaces as JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/marketPlace/offer/{offerId}">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[With this method one specific offer can be requested. If the API key is not valid
an analogous message is returned. It is also checked, if the id is a positive number otherwise a message
for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which the offer belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Offer in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/marketPlace/offers/*">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Gets all offers of an organisation (independent of the marketplace). If the API key is not valid
an analogous message is returned. It is also checked, if the id is a positive number otherwise a message
for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which the offers belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[A Response as List of Offers in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/marketPlace/offers/role">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Gets all offers which are amongst others for a specific role (depending of the marketplace). If the API key is not valid
an analogous message is returned. It is also checked, if the id is a positive number otherwise a message
for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which the offers belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="count" style="query">
            <wadl:doc><![CDATA[Optionally the count of offers that should be returned can be passed. If no value is passed
all offers of the marketplace are returned.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="marketPlaceId" style="query">
            <wadl:doc><![CDATA[The marketplace whose offers should be considered.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="roleId" style="query">
            <wadl:doc><![CDATA[The roles id for which the offers are searched.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[A Response as List of Offers in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/marketPlace/{id}/attributes">
      <wadl:method name="PUT">
        <wadl:doc><![CDATA[With this method the fields of an Offer can be changed. For this the id of the offer, the API key of
the specific organisation, the name of the field and the new value are needed.

To modify the name the new String has to be passed with the attribute field. A new date and time as
LocalDateTime for the deadline or enddate can also be passed. The format of these values is
yyyy-MM-dd HH:mm. A new list of players can be passed when their ids are separated by commas.
If the API key is not valid an analogous message is returned. It is also checked, if
the ids are a positive number otherwise a message for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which the offer belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="attribute" style="query">
            <wadl:doc><![CDATA[The name of the attribute which should be modified. This parameter is required.
The following names of attributes can be used to change the associated field:
"name", "deadline" and "enddate".]]></wadl:doc>
          </wadl:param>
          <wadl:param name="value" style="query">
            <wadl:doc><![CDATA[The new value of the attribute. This parameter is required.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Offer in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/marketPlace/{id}/bids">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Gets a list of all bids which was made for a specific offer.
If the API key is not valid an analogous message is returned. It is also checked, if the offer id is a
positive number otherwise a message for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which the offer belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response as List of Bids in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/marketPlace/{id}/market">
      <wadl:method name="DELETE">
        <wadl:doc><![CDATA[Removes the marketplace with the assigned id from data base. It is checked, if the passed id is a
positive number otherwise a message for an invalid number is returned. If the API key is not
valid an analogous message is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this goal belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of MarketPlace in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/marketPlace/{id}/offer">
      <wadl:method name="DELETE">
        <wadl:doc><![CDATA[Removes the offer with the assigned id from the marketPlace and with it all associated bids.
Every player who has mad a bid to this offer gets her/his amount of coins back.
It is checked, if the passed id is a positive number otherwise a message for an invalid number
is returned. If the API key is not
valid an analogous message is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which the offer belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Offer in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/marketPlace/{playerId}/getOfferRole">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Gets the allowed offers for a specific player. The player is identified by her/his passed id and API key.
The offers are filtered by the roles a player has so only offers are in the returned list which are
associated with at least one role a player has.
If the API key is not valid an analogous message is returned. It is also checked, if the ids are a
positive number otherwise a message for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this player belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="count" style="query">
            <wadl:doc><![CDATA[Optionally the count of offers that should be returned can be passed.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="marketPlaceId" style="query">
            <wadl:doc><![CDATA[The marketplace whose offers are filtered.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[A Response as List of Offers in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/marketPlace/{playerId}/getOffers">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Gets all offers a specific player has created (independent of the marketplace). If the API key is not valid
an analogous message is returned. It is also checked, if the id is a positive number otherwise a message
for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which the player belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[A Response as List of Offers in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/marketPlace/{playerId}/highestOffersRoleFiltered">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Gets all available offers for a player ordered by prize, highest prize first. This can be used if a player wants to see
all offers she/he can complete and get the highest prize.
If the API key is not valid an analogous message is returned. It is also checked, if the player id is
a positive number otherwise a message for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which the player belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="count" style="query">
            <wadl:doc><![CDATA[Optionally the count of offers that should be returned can be passed. The default value is 10.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="marketPlaceId" style="query">
            <wadl:doc><![CDATA[The marketplace whose offers are filtered.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response as List of Offers in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/marketPlace/{playerId}/recentOffersRoleFiltered">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Gets all available offers for a player ordered by date, recent first. This can be used if a player wants to see
all recent offers she/he can complete.
If the API key is not valid an analogous message is returned. It is also checked, if the player id is
a positive number otherwise a message for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which the player belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="count" style="query">
            <wadl:doc><![CDATA[Optionally the count of offers that should be returned can be passed. The default value is 10.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="marketPlaceId" style="query">
            <wadl:doc><![CDATA[The marketplace whose offers are filtered.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response as List of Offers in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/organisation/{id}/generateapikey">
      <wadl:method name="PUT">
        <wadl:doc><![CDATA[Generates an API key for the given organisation which matches the id, email address and the
associated password. Otherwise an exception is returned that the given credentials are wrong.
If the API key field is already set the method resets it and replaced it with the new generated
API key.
In the response the account's password isn't returned because of security reasons.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="password" style="header">
            <wadl:doc><![CDATA[Required header parameter to connect it with the given email address.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="email" style="query">
            <wadl:doc><![CDATA[The valid email address.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[A Response of Organisation in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/player/{id}/achievements">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Returns a list of all awarded achievements associated with the player of the passed
id. If the API key is not valid an analogous message is returned. It is also checked,
if the player id is a positive number otherwise a message for an invalid number is
returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this player belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response as List of Achievements in JSON]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/player/{id}/activate">
      <wadl:method name="PUT">
        <wadl:doc><![CDATA[Activates a player with the associated id and API key so this player is allowed to complete
tasks.
If the API key is not valid an analogous message is returned. It is also checked, if the id
is a positive number otherwise a message for an invalid number is returned.
In the response the player's password and avatar isn't returned because of security
reasons respectively overhead.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this player belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Player in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/player/{id}/attributes">
      <wadl:method name="PUT">
        <wadl:doc><![CDATA[With this method the fields of one specific player can be changed. For
this the player id, the API key of the specific organisation, the
name of the field and the new field's value are needed.
To modify the password, the reference and the nickname the new string has
to be transfered with the attribute field. For a new avatar the path of
new image is needed in the attribute parameter. The format of the image
has to be .jpg or .png. A new list of roles and contacts can be transfered
when their ids are separated by commas.
If the API key is not valid an analogous message is returned. It is
also checked, if the id is a positive number otherwise a message for
an invalid number is returned.
In the response the player's password and avatar isn't returned because of security
reasons respectively overhead.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this player belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="attribute" style="query">
            <wadl:doc><![CDATA[The name of the attribute which should be modified. This
parameter is required. The following names of attributes can
be used to change the associated field:
"password", "reference", "nickname", "playerRoles", "contact"
and "avatar".]]></wadl:doc>
          </wadl:param>
          <wadl:param name="value" style="query">
            <wadl:doc><![CDATA[The new value of the attribute. This parameter is required.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Player in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/player/{id}/avatar">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Returns the avatar which is associated with a player. To identify the player her/his id and
the API key is needed to which the player belongs to.
The byte array of the avatar image is Base64-encoded to ensure that the data is transmitted
correctly as String.
If the API key is not valid an analogous message is returned. It is also checked, if the id
is a positive number otherwise a message for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this player belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Object with an byte[] in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/player/{id}/badges">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Returns a list of all awarded badges associated with the player of the passed id.
If the API key is not valid an analogous message is returned. It is also checked,
if the player id is a positive number otherwise a message for an invalid number is
returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this player belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response as List of Badges in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/player/{id}/coins">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Returns the current amount of coins associated with the player of the passed id. If
the API key is not valid an analogous message is returned. It is also checked, if
the player id is a positive number otherwise a message for an invalid number is
returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this player belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of int in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/player/{id}/contacts">
      <wadl:method name="PUT">
        <wadl:doc><![CDATA[Adds one or more contacts to the current player's contact list. A contact represents another
player in the gamification application. All ids are checked, if they are positive numbers
otherwise a message for an invalid number is returned. If the API key is not valid an analogous
message is returned.
In the response the player's password and avatar isn't returned because of security
reasons respectively overhead.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this player belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="contactIds" style="query">
            <wadl:doc><![CDATA[The list of player ids which should be added to the contact list. These ids are
separated by commas.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Player in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/player/{id}/contacts">
      <wadl:method name="DELETE">
        <wadl:doc><![CDATA[Removes one or more contacts from the currents player's contact list. A contact represents another
player in the gamification application. All ids are checked, if they are positive numbers
otherwise a message for an invalid number is returned. If the API key is not valid an analogous
message is returned.
In the response the player's password and avatar isn't returned because of security
reasons respectively overhead.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this player belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="contactIds" style="query">
            <wadl:doc><![CDATA[The list of player ids which should be added to the contact list. These ids are
separated by commas and must not be null.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Player in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/player/{id}/contacts">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Gets a list of all contacts a player has.
In the response the players' password and avatar isn't returned because of security
reasons respectively overhead.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this player belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of all player contacts in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/player/{id}/deactivate">
      <wadl:method name="PUT">
        <wadl:doc><![CDATA[Deactivates a player with the associated id and API key. So this player cannot complete a task
until she/he is set active again.
If the API key is not valid an analogous message is returned. It is also checked, if the id
is a positive number otherwise a message for an invalid number is returned.
In the response the player's password and avatar isn't returned because of security
reasons respectively overhead.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this player belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Player in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/player/{id}/goals">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Returns a list of all already finished goals of a specific player.
If the API key is not valid an analogous message is returned. It is also checked, if the
player id is a positive number otherwise a message for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this player belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response as List of FinishedGoals in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/player/{id}/groups">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Gets a list of all groups in which a player is a member.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this player belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of all groups of a player in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/player/{id}/points">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Returns the current amount of points associated with the player of the passed id. If
the API key is not valid an analogous message is returned. It is also checked, if
the player id is a positive number otherwise a message for an invalid number is
returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this player belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of int in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/player/{id}/reference">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Returns the field of the reference attribute of the player.
This can be used, when the player's id is known and the player should be
matched with a user of the application.
If the API key is not valid an analogous message is returned. It is also checked,
if the player id is a positive number otherwise a message for an invalid number
is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this player belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of String in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/player/{id}/rewards">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Returns a list of all already awarded rewards associated with the player of the given id.
If the API key is not valid an analogous message is returned. It is also checked, if the
player id is a positive number otherwise a message for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this player belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response as List of PermanentRewards in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/player/{id}/roles">
      <wadl:method name="PUT">
        <wadl:doc><![CDATA[Adds one or more roles to the current player's list of roles. All ids are checked, if they are
positive numbers otherwise a message for an invalid number is returned. If the API key is not
valid an analogous message is returned.
In the response the player's password and avatar isn't returned because of security
reasons respectively overhead.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this player belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="roleIds" style="query">
            <wadl:doc><![CDATA[The list of role ids which should be added to the contact list. These ids are
separated by commas.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Player in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/player/{id}/tasks">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Returns a list of all already finished tasks associated with the player of the passed
id. If the API key is not valid an analogous message is returned. It is also checked,
if the player id is a positive number otherwise a message for an invalid number is
returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this player belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response as List of FinishedTasks in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/playerGroup/{id}/achievements">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Returns a list of all awarded achievements associated with the group of players of the
passed id. If the API key is not valid an analogous message is returned. It is also
checked, if the player id is a positive number otherwise a message for an invalid number
is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this group belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response as List of Achievements in JSON]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/playerGroup/{id}/addPlayers">
      <wadl:method name="PUT">
        <wadl:doc><![CDATA[Adds one or more players to a group of players. All ids are checked, if they are positive numbers
otherwise a message for an invalid number is returned. If the API key is not valid an analogous
message is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this group of players belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="playerIds" style="query">
            <wadl:doc><![CDATA[The list of player ids which should be added to the contact list. These ids are
separated by commas.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of PlayerGroup in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/playerGroup/{id}/attributes">
      <wadl:method name="PUT">
        <wadl:doc><![CDATA[With this method the fields of a PlayerGroup can be changed. For this the id of the
group, the API key of the specific organisation, the name of the field and the new
value are needed.
To modify the name the new String has to be passed with the attribute field. For a
new logo the path of new image is needed in the attribute parameter. The format of
the image has to be .jpg or .png. A new list of players can be passed when their ids
are separated by commas.
If the API key is not valid an analogous message is returned. It is also checked, if
the ids are a positive number otherwise a message for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this role belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="attribute" style="query">
            <wadl:doc><![CDATA[The name of the attribute which should be modified. This parameter is
required. The following names of attributes can be used to change the
associated field:
"name", "playerIds" and "logo".]]></wadl:doc>
          </wadl:param>
          <wadl:param name="value" style="query">
            <wadl:doc><![CDATA[The new value of the attribute. This parameter is required.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of PlayerGroup in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/playerGroup/{id}/avatar">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Returns the avatar which is associated with a group of players. To identify the group its id and
the API key is needed to which the group belongs to.
The byte array of the avatar image is Base64-encoded to ensure that the data is transmitted
correctly as String.
If the API key is not valid an analogous message is returned. It is also checked, if the id
is a positive number otherwise a message for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this group of players belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Object with an byte[] in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/playerGroup/{id}/badges">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Returns a list of all awarded badges associated with the group of players of the passed
id. If the API key is not valid an analogous message is returned. It is also checked,
if the group id is a positive number otherwise a message for an invalid number is
returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this group belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response as List of Badges in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/playerGroup/{id}/coins">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Returns the current amount of coins associated with the group of players of the passed id. If
the API key is not valid an analogous message is returned. It is also checked, if
the group id is a positive number otherwise a message for an invalid number is
returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this group of players belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of int in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/playerGroup/{id}/goals">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Returns a list of all already finished goals of a specific group of players.
If the API key is not valid an analogous message is returned. It is also checked, if the
group id is a positive number otherwise a message for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this group belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response as List of FinishedGoals in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/playerGroup/{id}/points">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Returns the current amount of points associated with the group of players of the passed id. If
the API key is not valid an analogous message is returned. It is also checked, if
the group id is a positive number otherwise a message for an invalid number is
returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this group of players belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of int in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/playerGroup/{id}/removePlayers">
      <wadl:method name="PUT">
        <wadl:doc><![CDATA[Removes one or more players from a group of players. All ids are checked, if they are positive numbers
otherwise a message for an invalid number is returned. If the API key is not valid an analogous
message is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this group of players belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="playerIds" style="query">
            <wadl:doc><![CDATA[The list of player ids which should be removed from the contact list. These ids are
separated by commas.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of PlayerGroup in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/playerGroup/{id}/rewards">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Returns a list of all already awarded rewards associated with the group of players of the
given id.
If the API key is not valid an analogous message is returned. It is also checked, if the
group id is a positive number otherwise a message for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this group of players belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response as List of PermanentRewards in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/playerLevel/{id}/attributes">
      <wadl:method name="PUT">
        <wadl:doc><![CDATA[With this method the fields of a PlayerLevel can be changed. For this the id of the player level,
the API key of the specific organisation, the name of the field and the new value are needed.
To modify the name or the index of the level the new value has to be passed with the value field.
If the API key is not valid an analogous message is returned. It is also checked, if
the ids are a positive number otherwise a message for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which the player level belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="attribute" style="query">
            <wadl:doc><![CDATA[The name of the attribute which should be modified. This parameter is required.
The following names of attributes can be used to change the
associated field:
"levelName" and "levelIndex".]]></wadl:doc>
          </wadl:param>
          <wadl:param name="value" style="query">
            <wadl:doc><![CDATA[The new value of the attribute. This parameter is required.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of PlayerLevel in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/present/{playerId}/archive">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[This method returns all already archived messages of a specific player's presents.
If the API key is not valid an analogous message is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which the messages belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response as List of PresentArchiveds in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/present/{playerId}/boardMessages">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[This method returns all already accepted messages of a specific player's current presents.
If the API key is not valid an analogous message is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which the messages belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response as List of Presents in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/present/{playerId}/imageMessages">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[This method returns all image messages of a specific player's current presents.
If the API key is not valid an analogous message is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which the image messages belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response as List of ImageMessages in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/present/{playerId}/inbox">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[This method returns all presents of a player's inbox associated with the given API key and so
all presents who belong to the associated organisation. If the API key is not valid an analogous
message is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this present belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response as List of Presents in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/present/{playerId}/textMessages">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[This method returns all text messages of a specific player's current presents.
If the API key is not valid an analogous message is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which the text messages belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response as List of TextMessages in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/present/{presentId}/send">
      <wadl:method name="POST">
        <wadl:doc><![CDATA[With this method one present is sent to all specified receivers. So the present is stored
in each inbox of the receivers.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this present belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Present in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/reward/achievement/{id}">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[This method returns the icon of an specific achievement for example to show it the
player who has just earned it. If the API key is not valid an analogous message is
returned. It is also checked, if the id is a positive number otherwise a message for
an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this reward belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Object in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/reward/badge/{id}">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[This method returns the icon of an specific badge for example to show it the player
who has just earned it. If the API key is not valid an analogous message is returned.
It is also checked, if the id is a positive number otherwise a message for an invalid
number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this reward belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Reward in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/reward/{id}/Coins">
      <wadl:method name="PUT">
        <wadl:doc><![CDATA[With this method the fields of one specific coin reward can be changed. For this the
reward id, the API key of the specific organisation, the name of the field and the
new field's value are needed.
To modify the amount of coins the new amount has to be transfered with the attribute
field.
If the API key is not valid an analogous message is returned. It is also checked, if
the id is a positive number otherwise a message for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this reward belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="attribute" style="query">
            <wadl:doc><![CDATA[The name of the attribute which should be modified. This parameter is required.
The following names of attributes can be used to change the associated field:
"amount".]]></wadl:doc>
          </wadl:param>
          <wadl:param name="value" style="query">
            <wadl:doc><![CDATA[The new value of the attribute. This parameter is required.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Reward in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/reward/{id}/Points">
      <wadl:method name="PUT">
        <wadl:doc><![CDATA[With this method the fields of one specific point reward can be changed. For this the
reward id, the API key of the specific organisation, the name of the field and the
new field's value are needed.
To modify the amount of points the new amount has to be transfered with the attribute
field.
If the API key is not valid an analogous message is returned. It is also checked, if
the id is a positive number otherwise a message for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this reward belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="attribute" style="query">
            <wadl:doc><![CDATA[The name of the attribute which should be modified. This parameter is required.
The following names of attributes can be used to change the associated field:
"amount".]]></wadl:doc>
          </wadl:param>
          <wadl:param name="value" style="query">
            <wadl:doc><![CDATA[The new value of the attribute. This parameter is required.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Reward in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/reward/{id}/ReceiveLevel">
      <wadl:method name="PUT">
        <wadl:doc><![CDATA[With this method the fields of one specific level reward can be changed. For this the
reward id, the API key of the specific organisation, the name of the field and the
new field's value are needed.
To modify the name and amount of the level the new name respectively amount has to be
transfered with the attribute field.
If the API key is not valid an analogous message is returned. It is also checked, if
the id is a positive number otherwise a message for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this reward belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="attribute" style="query">
            <wadl:doc><![CDATA[The name of the attribute which should be modified. This parameter is required.
The following names of attributes can be used to change the associated field:
"amount" and "name".]]></wadl:doc>
          </wadl:param>
          <wadl:param name="value" style="query">
            <wadl:doc><![CDATA[The new value of the attribute. This parameter is required.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Reward in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/reward/{id}/changeAchievement">
      <wadl:method name="PUT">
        <wadl:doc><![CDATA[With this method the fields of one specific achievement can be changed. For this the
reward id, the API key of the specific organisation, the name of the field and the
new field's value are needed.
To modify the name and description the new string has to be transfered with the attribute
field. For a new icon the path of the new image is needed in the attribute parameter.
The format of the image has to be .jpg or .png.
If the API key is not valid an analogous message is returned. It is also checked, if
the id is a positive number otherwise a message for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this reward belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="attribute" style="query">
            <wadl:doc><![CDATA[The name of the attribute which should be modified. This parameter is required.
The following names of attributes can be used to change the associated field:
"name", "description" and "icon".]]></wadl:doc>
          </wadl:param>
          <wadl:param name="value" style="query">
            <wadl:doc><![CDATA[The new value of the attribute. This parameter is required.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Reward in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/reward/{id}/changeBadge">
      <wadl:method name="PUT">
        <wadl:doc><![CDATA[With this method the fields of one specific badge can be changed. For this the
reward id, the API key of the specific organisation, the name of the field and the
new field's value are needed.
To modify the name and description the new string has to be transfered with the attribute
field. For a new icon the path of the new image is needed in the attribute parameter.
The format of the image has to be .jpg or .png.
If the API key is not valid an analogous message is returned. It is also checked, if
the id is a positive number otherwise a message for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this reward belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="attribute" style="query">
            <wadl:doc><![CDATA[The name of the attribute which should be modified. This parameter is required.
The following names of attributes can be used to change the associated field:
"name", "description" and "icon".]]></wadl:doc>
          </wadl:param>
          <wadl:param name="value" style="query">
            <wadl:doc><![CDATA[The new value of the attribute. This parameter is required.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Reward in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/role/{id}/attributes">
      <wadl:method name="PUT">
        <wadl:doc><![CDATA[With this method the name field of one role can be changed. For this the id of the role, the API key of the
specific organisation, the name of the field and the new value are needed.
If the API key is not valid an analogous message is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this role belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="attribute" style="query">
            <wadl:doc><![CDATA[The name of the attribute which should be changed.  This parameter is required.
The following names of attributes can be used to change the associated field:
"name".]]></wadl:doc>
          </wadl:param>
          <wadl:param name="value" style="query">
            <wadl:doc><![CDATA[The new value of the attribute. This parameter is required.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Role in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/rule/{id}/attributes">
      <wadl:method name="PUT">
        <wadl:doc><![CDATA[With this method the fields of one specific goal rule can be changed. For this the
goal rule id, the API key of the specific organisation, the name of the field and
the new field's value are needed.
To modify the name or description of the goal rule the new string has to be passed
with the attribute field. If the
If the API key is not valid an analogous message is returned. It is also checked,
if the id is a positive number otherwise a message for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this goal rule belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="attribute" style="query">
            <wadl:doc><![CDATA[The name of the attribute which should be modified. This parameter is required.
The following names of attributes can be used to change the associated field:
"description" and "name". The tasks that have to be completed or the amount of
points that have to be reached, can't be changed later.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="value" style="query">
            <wadl:doc><![CDATA[The new value of the attribute. This parameter is required.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of GoalRule in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/task/tradeable/*">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Returns a list of all tasks which are tradeable and associated with the passed API key. If the key is not
valid an analogous message is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which these tasks belong to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of all tradeable tasks in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/task/{id}/attributes">
      <wadl:method name="PUT">
        <wadl:doc><![CDATA[With this method the fields of a Task can be changed. For this the id of the
task, the API key of the specific organisation, the name of the field and the new
value are needed.
To modify the name or the description the new String has to be passed with the
attribute field. A new list of roles can be passed when their ids are separated by
commas. Also the task can be set tradeable or not by passing the value true or false.
If the API key is not valid an analogous message is returned. It is also checked, if
the ids are a positive number otherwise a message for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this task belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="attribute" style="query">
            <wadl:doc><![CDATA[The name of the attribute which should be modified. This parameter is required.
The following names of attributes can be used to change the associated field:
"taskName", "description", "tradeable" and "roles".]]></wadl:doc>
          </wadl:param>
          <wadl:param name="value" style="query">
            <wadl:doc><![CDATA[The new value of the attribute. This parameter is required.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Task in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/donation/{id}/donate/{playerId}">
      <wadl:method name="POST">
        <wadl:doc><![CDATA[With this method a player donates a specific amount of coins if she/he has enough coins and the given
amount hasn't been already reached.
These coins are subtracted from the player's current account and will be added to the DonationCall's
current amount. If the API key is not valid an analogous message is returned.
It is also checked, if the id is a positive number otherwise a message for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="amount" style="query">
            <wadl:doc><![CDATA[The amount of coins which the player donates.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this call for donations belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[A Response of DonationCall in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/marketPlace/offers/{taskId}/*">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[This method returns a list with all ids of offers that contain a specific task. This is irrespective
of the marketplace.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which the offer belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[A list of all offers' ids that contain the task with the passed id as a list.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/marketPlace/{playerId}/bid/{offerId}">
      <wadl:method name="POST">
        <wadl:doc><![CDATA[With this method a player makes a bid to an offer. So a new bid is created and therefore an id is
generated. The id of the player is needed to indicate who has made the bid and id of the offer to identify
for which she/he has bidden. The prize of the bid is needed to add it to the current amount of coins so
the offer's prize is raised.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which the player belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="prize" style="query">
            <wadl:doc><![CDATA[The amount of the bid. This is added to the current prize. This parameter is required.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Bid in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/present/{id}/deleteArchived/{playerId}">
      <wadl:method name="DELETE">
        <wadl:doc><![CDATA[Removes the specific present with the assigned id from data base and the from the board's list of archived
presents. It is checked, if the passed id is a positive number otherwise a message for an invalid number
is returned. If the API key is not valid an analogous message is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this present belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Present in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/present/{id}/deleteCurrent/{playerId}">
      <wadl:method name="DELETE">
        <wadl:doc><![CDATA[Removes the specific present with the assigned id from data base. It is checked, if the passed
id is a positive number otherwise a message for an invalid number is returned. If the API key
is not valid an analogous message is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this present belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Present in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/present/{presentId}/accept/{playerId}">
      <wadl:method name="POST">
        <wadl:doc><![CDATA[With this method a player accepts a present. So the present will be moved from her/his inbox
to the list of the player's current presents.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this present belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Present in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/present/{presentId}/archive/{playerId}">
      <wadl:method name="POST">
        <wadl:doc><![CDATA[With this method on present is archived. So the present is moved from the player's list of
current presents to an list of archived presents on the board.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this present belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Present in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/present/{presentId}/deny/{playerId}">
      <wadl:method name="POST">
        <wadl:doc><![CDATA[With this method a player denies a present. So the present will be deleted from her/his
inbox of the board.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this present belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Present in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/task/{id}/complete/{playerId}">
      <wadl:method name="POST">
        <wadl:doc><![CDATA[This method completes a task with the assigned id and associated API key. The player-id
represents the player who has completed the task. The task is added to the list of
finished tasks of this player. Thereby the task becomes a finished task object and the
time and date is also stored when the task was officially be done.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which this task belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="finishedDate" style="query">
            <wadl:doc><![CDATA[Optionally the local tate time can be passed when the task was finished. If the
value is null, the finshedDate is set to the time and date when the query was
sent.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[Response of Task in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/marketPlace/offers/market/{marketPlaceId}/*">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[Gets all offers of an organisation (depending of the marketplace). If the API key is not valid
an analogous message is returned. It is also checked, if the id is a positive number otherwise a message
for an invalid number is returned.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which the offers belongs to.]]></wadl:doc>
          </wadl:param>
          <wadl:param name="count" style="query">
            <wadl:doc><![CDATA[Optionally the count of offers that should be returned can be passed. If no value is passed
all offers of the marketplace are returned.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[A Response as List of Offers in JSON.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>

    <wadl:resource path="/marketPlace/offers/{taskId}/market/*">
      <wadl:method name="GET">
        <wadl:doc><![CDATA[This method returns a list with all offers which contain a specific task and the id of the
offer's marketplace.]]></wadl:doc>
        <wadl:request>
          <wadl:param name="apiKey" style="query">
            <wadl:doc><![CDATA[The valid query parameter API key affiliated to one specific organisation,
to which the offer belongs to.]]></wadl:doc>
          </wadl:param>
        </wadl:request>
        <wadl:response>
          <wadl:doc><![CDATA[A list of all offers and their marketplaces which contain the task with the
passed id as a list.]]></wadl:doc>
          <wadl:representation mediaType="application/json"/>
        </wadl:response>
      </wadl:method>
    </wadl:resource>
  </wadl:resources>
</wadl:application>