#
# 
#
# Generated by <a href="http://enunciate.webcohesion.com">Enunciate</a>.
#
require 'json'

# adding necessary json serialization methods to standard classes.
class Object
  def to_jaxb_json_hash
    return self
  end
  def self.from_json o
    return o
  end
end

class String
  def self.from_json o
    return o
  end
end

class Boolean
  def self.from_json o
    return o
  end
end

class Numeric
  def self.from_json o
    return o
  end
end

class Time
  #json time is represented as number of milliseconds since epoch
  def to_jaxb_json_hash
    return (to_i * 1000) + (usec / 1000)
  end
  def self.from_json o
    if o.nil?
      return nil
    else
      return Time.at(o / 1000, (o % 1000) * 1000)
    end
  end
end

class Array
  def to_jaxb_json_hash
    a = Array.new
    each { | _item | a.push _item.to_jaxb_json_hash }
    return a
  end
end

class Hash
  def to_jaxb_json_hash
    h = Hash.new
    each { | _key, _value | h[_key.to_jaxb_json_hash] = _value.to_jaxb_json_hash }
    return h
  end
end


module Info

module Interactivesystems

module Gamificationengine

module Entities

  # (no documentation provided)
  class Role 

    # int of the id
    attr_accessor :id
    # the name of the role as String.
    attr_accessor :name

    # the json hash for this Role
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      return _h
    end

    # the json (string form) for this Role
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Role with a json hash
    def init_jaxb_json_hash(_o)
      @id = Fixnum.from_json(_o['id']) unless _o['id'].nil?
      @name = String.from_json(_o['name']) unless _o['name'].nil?
    end

    # constructs a Role from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Java

module Net

  # (no documentation provided)
  class URL 

    # (no documentation provided)
    attr_accessor :authority
    # (no documentation provided)
    attr_accessor :userInfo
    # (no documentation provided)
    attr_accessor :ref
    # (no documentation provided)
    attr_accessor :file
    # (no documentation provided)
    attr_accessor :defaultPort
    # (no documentation provided)
    attr_accessor :protocol
    # (no documentation provided)
    attr_accessor :path
    # (no documentation provided)
    attr_accessor :port
    # (no documentation provided)
    attr_accessor :host
    # (no documentation provided)
    attr_accessor :content
    # (no documentation provided)
    attr_accessor :query

    # the json hash for this URL
    def to_jaxb_json_hash
      _h = {}
      _h['authority'] = authority.to_jaxb_json_hash unless authority.nil?
      _h['userInfo'] = userInfo.to_jaxb_json_hash unless userInfo.nil?
      _h['ref'] = ref.to_jaxb_json_hash unless ref.nil?
      _h['file'] = file.to_jaxb_json_hash unless file.nil?
      _h['defaultPort'] = defaultPort.to_jaxb_json_hash unless defaultPort.nil?
      _h['protocol'] = protocol.to_jaxb_json_hash unless protocol.nil?
      _h['path'] = path.to_jaxb_json_hash unless path.nil?
      _h['port'] = port.to_jaxb_json_hash unless port.nil?
      _h['host'] = host.to_jaxb_json_hash unless host.nil?
      _h['content'] = content.to_jaxb_json_hash unless content.nil?
      _h['query'] = query.to_jaxb_json_hash unless query.nil?
      return _h
    end

    # the json (string form) for this URL
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this URL with a json hash
    def init_jaxb_json_hash(_o)
      @authority = String.from_json(_o['authority']) unless _o['authority'].nil?
      @userInfo = String.from_json(_o['userInfo']) unless _o['userInfo'].nil?
      @ref = String.from_json(_o['ref']) unless _o['ref'].nil?
      @file = String.from_json(_o['file']) unless _o['file'].nil?
      @defaultPort = Fixnum.from_json(_o['defaultPort']) unless _o['defaultPort'].nil?
      @protocol = String.from_json(_o['protocol']) unless _o['protocol'].nil?
      @path = String.from_json(_o['path']) unless _o['path'].nil?
      @port = Fixnum.from_json(_o['port']) unless _o['port'].nil?
      @host = String.from_json(_o['host']) unless _o['host'].nil?
      @content = Object.from_json(_o['content']) unless _o['content'].nil?
      @query = String.from_json(_o['query']) unless _o['query'].nil?
    end

    # constructs a URL from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

module Info

module Interactivesystems

module Gamificationengine

module Api

  # (no documentation provided)
  class State 

    # (no documentation provided)
    attr_accessor :date
    # (no documentation provided)
    attr_accessor :version
    # (no documentation provided)
    attr_accessor :helpUri
    # (no documentation provided)
    attr_accessor :support
    # (no documentation provided)
    attr_accessor :authors

    # the json hash for this State
    def to_jaxb_json_hash
      _h = {}
      _h['date'] = date.to_jaxb_json_hash unless date.nil?
      _h['version'] = version.to_jaxb_json_hash unless version.nil?
      _h['helpUri'] = helpUri.to_jaxb_json_hash unless helpUri.nil?
      _h['support'] = support.to_jaxb_json_hash unless support.nil?
      if !authors.nil?
        _ha = Array.new
        authors.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['authors'] = _ha
      end
      return _h
    end

    # the json (string form) for this State
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this State with a json hash
    def init_jaxb_json_hash(_o)
      @date = String.from_json(_o['date']) unless _o['date'].nil?
      @version = String.from_json(_o['version']) unless _o['version'].nil?
      @helpUri = String.from_json(_o['helpUri']) unless _o['helpUri'].nil?
      @support = Hash.from_json(_o['support']) unless _o['support'].nil?
      if !_o['authors'].nil?
        @authors = Array.new
        _oa = _o['authors']
        _oa.each { | _item | @authors.push String.from_json(_item) }
      end
    end

    # constructs a State from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Info

module Interactivesystems

module Gamificationengine

module Entities

module MarketPlace

  # (no documentation provided)
  class Offer 

    # The offer&#39;s id as int.
    attr_accessor :id
    # The date and time when an offer was created as LocalDateTime.
    attr_accessor :offerDate
    # LocalDateTime
    # The exact date and time, when the offer ends.
    attr_accessor :endDate
    # LocalDateTime
    # The exact date and time, when the offer should be finished at least.
    attr_accessor :deadLine
    # int
    # The offer&#39;s current prize as int.
    attr_accessor :prize
    # Task
    # The task which was associated with the offer.
    attr_accessor :task
    # The offer&#39;s name as String.
    attr_accessor :name
    # Player
    # The player object of the player who has created the offer.
    attr_accessor :player

    # the json hash for this Offer
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['offerDate'] = offerDate.to_jaxb_json_hash unless offerDate.nil?
      _h['endDate'] = endDate.to_jaxb_json_hash unless endDate.nil?
      _h['deadLine'] = deadLine.to_jaxb_json_hash unless deadLine.nil?
      _h['prize'] = prize.to_jaxb_json_hash unless prize.nil?
      _h['task'] = task.to_jaxb_json_hash unless task.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['player'] = player.to_jaxb_json_hash unless player.nil?
      return _h
    end

    # the json (string form) for this Offer
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Offer with a json hash
    def init_jaxb_json_hash(_o)
      @id = Fixnum.from_json(_o['id']) unless _o['id'].nil?
      @offerDate = Java::Time::LocalDateTime.from_json(_o['offerDate']) unless _o['offerDate'].nil?
      @endDate = Java::Time::LocalDateTime.from_json(_o['endDate']) unless _o['endDate'].nil?
      @deadLine = Java::Time::LocalDateTime.from_json(_o['deadLine']) unless _o['deadLine'].nil?
      @prize = Fixnum.from_json(_o['prize']) unless _o['prize'].nil?
      @task = Info::Interactivesystems::Gamificationengine::Entities::Task::Task.from_json(_o['task']) unless _o['task'].nil?
      @name = String.from_json(_o['name']) unless _o['name'].nil?
      @player = Info::Interactivesystems::Gamificationengine::Entities::Player.from_json(_o['player']) unless _o['player'].nil?
    end

    # constructs a Offer from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Info

module Interactivesystems

module Gamificationengine

module Entities

module Task

  # (no documentation provided)
  class FinishedTask 

    # The int value of finished task&#39;s id.
    attr_accessor :id
    # The localDateTime when the task was finished.
    attr_accessor :finishedDate
    # The task object of the finished task.
    attr_accessor :task

    # the json hash for this FinishedTask
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['finishedDate'] = finishedDate.to_jaxb_json_hash unless finishedDate.nil?
      _h['task'] = task.to_jaxb_json_hash unless task.nil?
      return _h
    end

    # the json (string form) for this FinishedTask
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this FinishedTask with a json hash
    def init_jaxb_json_hash(_o)
      @id = Fixnum.from_json(_o['id']) unless _o['id'].nil?
      @finishedDate = Java::Time::LocalDateTime.from_json(_o['finishedDate']) unless _o['finishedDate'].nil?
      @task = Info::Interactivesystems::Gamificationengine::Entities::Task::Task.from_json(_o['task']) unless _o['task'].nil?
    end

    # constructs a FinishedTask from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Info

module Interactivesystems

module Gamificationengine

module Entities

module DonationCall

  # (no documentation provided)
  class Donation 

    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :amount
    # (no documentation provided)
    attr_accessor :creationDate
    # (no documentation provided)
    attr_accessor :player

    # the json hash for this Donation
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['amount'] = amount.to_jaxb_json_hash unless amount.nil?
      _h['creationDate'] = creationDate.to_jaxb_json_hash unless creationDate.nil?
      _h['player'] = player.to_jaxb_json_hash unless player.nil?
      return _h
    end

    # the json (string form) for this Donation
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Donation with a json hash
    def init_jaxb_json_hash(_o)
      @id = Fixnum.from_json(_o['id']) unless _o['id'].nil?
      @amount = Fixnum.from_json(_o['amount']) unless _o['amount'].nil?
      @creationDate = Java::Time::LocalDateTime.from_json(_o['creationDate']) unless _o['creationDate'].nil?
      @player = Info::Interactivesystems::Gamificationengine::Entities::Player.from_json(_o['player']) unless _o['player'].nil?
    end

    # constructs a Donation from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Info

module Interactivesystems

module Gamificationengine

module Entities

module Present

  # (no documentation provided)
  class PresentAccepted 

    # The id of the accepted present.
    attr_accessor :id
    # The date and time a present was accepted.
    attr_accessor :date
    # The present that was accepted.
    attr_accessor :present
    # The status of the present. If it was accepted by the player the field is ACCEPT
    # otherwise DENIED.
    attr_accessor :status

    # the json hash for this PresentAccepted
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['date'] = date.to_jaxb_json_hash unless date.nil?
      _h['present'] = present.to_jaxb_json_hash unless present.nil?
      _h['status'] = status.to_jaxb_json_hash unless status.nil?
      return _h
    end

    # the json (string form) for this PresentAccepted
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this PresentAccepted with a json hash
    def init_jaxb_json_hash(_o)
      @id = Fixnum.from_json(_o['id']) unless _o['id'].nil?
      @date = Java::Time::LocalDateTime.from_json(_o['date']) unless _o['date'].nil?
      @present = Info::Interactivesystems::Gamificationengine::Entities::Present::Present.from_json(_o['present']) unless _o['present'].nil?
      @status = String.from_json(_o['status']) unless _o['status'].nil?
    end

    # constructs a PresentAccepted from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Info

module Interactivesystems

module Gamificationengine

module Entities

module Rewards

  # (no documentation provided)
  class Reward 

    # The reward&#39;s id as int.
    attr_accessor :id
    # The value for how long the reward exist.
    attr_accessor :timeToLive
    # the achievement&#39;s description
    attr_accessor :description
    # The achievement&#39;s name as String.
    attr_accessor :name

    # the json hash for this Reward
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['timeToLive'] = timeToLive.to_jaxb_json_hash unless timeToLive.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      return _h
    end

    # the json (string form) for this Reward
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Reward with a json hash
    def init_jaxb_json_hash(_o)
      @id = Fixnum.from_json(_o['id']) unless _o['id'].nil?
      @timeToLive = Fixnum.from_json(_o['timeToLive']) unless _o['timeToLive'].nil?
      @description = String.from_json(_o['description']) unless _o['description'].nil?
      @name = String.from_json(_o['name']) unless _o['name'].nil?
    end

    # constructs a Reward from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Info

module Interactivesystems

module Gamificationengine

module Entities

module Goal

  # (no documentation provided)
  class Goal 

    # The goal&#39;s id as int.
    attr_accessor :id
    # The name of the goal as String.
    attr_accessor :name
    # The goal rule of this goal.
    attr_accessor :rule
    # The value if the goal is repeatable (true) or not (false).
    attr_accessor :repeatable
    # The value if the goal is also a group goal (true) or not (false).
    attr_accessor :playerGroupGoal
    # All rewards a player can earn by fulfilling the goal as a List.
    attr_accessor :rewards
    # All roles who are allowed to complete the goal as list.
    attr_accessor :canCompletedBy

    # the json hash for this Goal
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['rule'] = rule.to_jaxb_json_hash unless rule.nil?
      _h['repeatable'] = repeatable.to_jaxb_json_hash unless repeatable.nil?
      _h['playerGroupGoal'] = playerGroupGoal.to_jaxb_json_hash unless playerGroupGoal.nil?
      if !rewards.nil?
        _ha = Array.new
        rewards.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['rewards'] = _ha
      end
      if !canCompletedBy.nil?
        _ha = Array.new
        canCompletedBy.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['canCompletedBy'] = _ha
      end
      return _h
    end

    # the json (string form) for this Goal
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Goal with a json hash
    def init_jaxb_json_hash(_o)
      @id = Fixnum.from_json(_o['id']) unless _o['id'].nil?
      @name = String.from_json(_o['name']) unless _o['name'].nil?
      @rule = Info::Interactivesystems::Gamificationengine::Entities::Goal::GoalRule.from_json(_o['rule']) unless _o['rule'].nil?
      @repeatable = Boolean.from_json(_o['repeatable']) unless _o['repeatable'].nil?
      @playerGroupGoal = Boolean.from_json(_o['playerGroupGoal']) unless _o['playerGroupGoal'].nil?
      if !_o['rewards'].nil?
        @rewards = Array.new
        _oa = _o['rewards']
        _oa.each { | _item | @rewards.push Info::Interactivesystems::Gamificationengine::Entities::Rewards::Reward.from_json(_item) }
      end
      if !_o['canCompletedBy'].nil?
        @canCompletedBy = Array.new
        _oa = _o['canCompletedBy']
        _oa.each { | _item | @canCompletedBy.push Info::Interactivesystems::Gamificationengine::Entities::Role.from_json(_item) }
      end
    end

    # constructs a Goal from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Info

module Interactivesystems

module Gamificationengine

module Entities

module Present

  # (no documentation provided)
  class Present 

    # The id of the present as int.
    attr_accessor :id
    # The sender of a present.
    attr_accessor :sender
    # The list of all players who should receive the present.
    attr_accessor :receiver

    # the json hash for this Present
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['sender'] = sender.to_jaxb_json_hash unless sender.nil?
      if !receiver.nil?
        _ha = Array.new
        receiver.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['receiver'] = _ha
      end
      return _h
    end

    # the json (string form) for this Present
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Present with a json hash
    def init_jaxb_json_hash(_o)
      @id = Fixnum.from_json(_o['id']) unless _o['id'].nil?
      @sender = Info::Interactivesystems::Gamificationengine::Entities::Player.from_json(_o['sender']) unless _o['sender'].nil?
      if !_o['receiver'].nil?
        @receiver = Array.new
        _oa = _o['receiver']
        _oa.each { | _item | @receiver.push Info::Interactivesystems::Gamificationengine::Entities::Player.from_json(_item) }
      end
    end

    # constructs a Present from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Info

module Interactivesystems

module Gamificationengine

module Entities

module Task

  # (no documentation provided)
  class Task 

    # int value of the id
    attr_accessor :id
    # The name of the task as String.
    attr_accessor :taskName
    # The task&#39;s description as String.
    attr_accessor :description
    # List of roles which are allowed to complete the task.
    attr_accessor :allowedFor
    # The value it the task is tradeable as boolean.
    attr_accessor :tradeable

    # the json hash for this Task
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['taskName'] = taskName.to_jaxb_json_hash unless taskName.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      if !allowedFor.nil?
        _ha = Array.new
        allowedFor.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['allowedFor'] = _ha
      end
      _h['tradeable'] = tradeable.to_jaxb_json_hash unless tradeable.nil?
      return _h
    end

    # the json (string form) for this Task
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Task with a json hash
    def init_jaxb_json_hash(_o)
      @id = Fixnum.from_json(_o['id']) unless _o['id'].nil?
      @taskName = String.from_json(_o['taskName']) unless _o['taskName'].nil?
      @description = String.from_json(_o['description']) unless _o['description'].nil?
      if !_o['allowedFor'].nil?
        @allowedFor = Array.new
        _oa = _o['allowedFor']
        _oa.each { | _item | @allowedFor.push Info::Interactivesystems::Gamificationengine::Entities::Role.from_json(_item) }
      end
      @tradeable = Boolean.from_json(_o['tradeable']) unless _o['tradeable'].nil?
    end

    # constructs a Task from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Info

module Interactivesystems

module Gamificationengine

module Entities

  # (no documentation provided)
  class Player 

    # The nickname of the player as a String.
    attr_accessor :nickname
    # player&#39;s real name as String.
    attr_accessor :reference
    # The amount of obtained coins as int.
    attr_accessor :coins
    # The amount of obtained points as int.
    attr_accessor :points
    # Level index returned as int.
    attr_accessor :levelIndex
    # The name of the player&#39;s current level as String.
    attr_accessor :levelLabel
    # The player&#39;s id as int.
    attr_accessor :id
    # List of all finished Tasks a player has completed.
    attr_accessor :finishedTasks
    # List of all completed Goals.
    attr_accessor :finishedGoals
    # List of all roles a player has.
    attr_accessor :belongsToRoles
    # List of all obtained permanent rewards.
    attr_accessor :rewards
    # A List of all obtained Badges as List.
    attr_accessor :onlyBadges
    # A List of all obtained Achievements as List.
    attr_accessor :onlyAchievement
    # True if the player is active and false if not.
    attr_accessor :active

    # the json hash for this Player
    def to_jaxb_json_hash
      _h = {}
      _h['nickname'] = nickname.to_jaxb_json_hash unless nickname.nil?
      _h['reference'] = reference.to_jaxb_json_hash unless reference.nil?
      _h['coins'] = coins.to_jaxb_json_hash unless coins.nil?
      _h['points'] = points.to_jaxb_json_hash unless points.nil?
      _h['levelIndex'] = levelIndex.to_jaxb_json_hash unless levelIndex.nil?
      _h['levelLabel'] = levelLabel.to_jaxb_json_hash unless levelLabel.nil?
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      if !finishedTasks.nil?
        _ha = Array.new
        finishedTasks.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['finishedTasks'] = _ha
      end
      if !finishedGoals.nil?
        _ha = Array.new
        finishedGoals.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['finishedGoals'] = _ha
      end
      if !belongsToRoles.nil?
        _ha = Array.new
        belongsToRoles.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['belongsToRoles'] = _ha
      end
      if !rewards.nil?
        _ha = Array.new
        rewards.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['rewards'] = _ha
      end
      if !onlyBadges.nil?
        _ha = Array.new
        onlyBadges.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['onlyBadges'] = _ha
      end
      if !onlyAchievement.nil?
        _ha = Array.new
        onlyAchievement.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['onlyAchievement'] = _ha
      end
      _h['active'] = active.to_jaxb_json_hash unless active.nil?
      return _h
    end

    # the json (string form) for this Player
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Player with a json hash
    def init_jaxb_json_hash(_o)
      @nickname = String.from_json(_o['nickname']) unless _o['nickname'].nil?
      @reference = String.from_json(_o['reference']) unless _o['reference'].nil?
      @coins = Fixnum.from_json(_o['coins']) unless _o['coins'].nil?
      @points = Fixnum.from_json(_o['points']) unless _o['points'].nil?
      @levelIndex = Fixnum.from_json(_o['levelIndex']) unless _o['levelIndex'].nil?
      @levelLabel = String.from_json(_o['levelLabel']) unless _o['levelLabel'].nil?
      @id = Fixnum.from_json(_o['id']) unless _o['id'].nil?
      if !_o['finishedTasks'].nil?
        @finishedTasks = Array.new
        _oa = _o['finishedTasks']
        _oa.each { | _item | @finishedTasks.push Info::Interactivesystems::Gamificationengine::Entities::Task::FinishedTask.from_json(_item) }
      end
      if !_o['finishedGoals'].nil?
        @finishedGoals = Array.new
        _oa = _o['finishedGoals']
        _oa.each { | _item | @finishedGoals.push Info::Interactivesystems::Gamificationengine::Entities::Goal::FinishedGoal.from_json(_item) }
      end
      if !_o['belongsToRoles'].nil?
        @belongsToRoles = Array.new
        _oa = _o['belongsToRoles']
        _oa.each { | _item | @belongsToRoles.push Info::Interactivesystems::Gamificationengine::Entities::Role.from_json(_item) }
      end
      if !_o['rewards'].nil?
        @rewards = Array.new
        _oa = _o['rewards']
        _oa.each { | _item | @rewards.push Info::Interactivesystems::Gamificationengine::Entities::Rewards::PermanentReward.from_json(_item) }
      end
      if !_o['onlyBadges'].nil?
        @onlyBadges = Array.new
        _oa = _o['onlyBadges']
        _oa.each { | _item | @onlyBadges.push Info::Interactivesystems::Gamificationengine::Entities::Rewards::Badge.from_json(_item) }
      end
      if !_o['onlyAchievement'].nil?
        @onlyAchievement = Array.new
        _oa = _o['onlyAchievement']
        _oa.each { | _item | @onlyAchievement.push Info::Interactivesystems::Gamificationengine::Entities::Rewards::Achievement.from_json(_item) }
      end
      @active = Boolean.from_json(_o['active']) unless _o['active'].nil?
    end

    # constructs a Player from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Info

module Interactivesystems

module Gamificationengine

module Entities

module Present

  # (no documentation provided)
  class PresentArchived 

    # The id of the archived present.
    attr_accessor :id
    # The date and time when the present was archived.
    attr_accessor :date
    # The archived present as present object.
    attr_accessor :acceptedPresent

    # the json hash for this PresentArchived
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['date'] = date.to_jaxb_json_hash unless date.nil?
      _h['acceptedPresent'] = acceptedPresent.to_jaxb_json_hash unless acceptedPresent.nil?
      return _h
    end

    # the json (string form) for this PresentArchived
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this PresentArchived with a json hash
    def init_jaxb_json_hash(_o)
      @id = Fixnum.from_json(_o['id']) unless _o['id'].nil?
      @date = Java::Time::LocalDateTime.from_json(_o['date']) unless _o['date'].nil?
      @acceptedPresent = Info::Interactivesystems::Gamificationengine::Entities::Present::PresentAccepted.from_json(_o['acceptedPresent']) unless _o['acceptedPresent'].nil?
    end

    # constructs a PresentArchived from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Info

module Interactivesystems

module Gamificationengine

module Entities

module Goal

  # (no documentation provided)
  class GoalRule 

    # The goal rule&#39;s id as int.
    attr_accessor :id
    # The name of the goal rule as String.
    attr_accessor :name
    # The description of the goal rule as String.
    attr_accessor :description

    # the json hash for this GoalRule
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      return _h
    end

    # the json (string form) for this GoalRule
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this GoalRule with a json hash
    def init_jaxb_json_hash(_o)
      @id = Fixnum.from_json(_o['id']) unless _o['id'].nil?
      @name = String.from_json(_o['name']) unless _o['name'].nil?
      @description = String.from_json(_o['description']) unless _o['description'].nil?
    end

    # constructs a GoalRule from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Info

module Interactivesystems

module Gamificationengine

module Entities

  # (no documentation provided)
  class Account 

    # String representing the email address.
    attr_accessor :email
    # String representing the first Name.
    attr_accessor :firstName
    # String representing the last name.
    attr_accessor :lastName

    # the json hash for this Account
    def to_jaxb_json_hash
      _h = {}
      _h['email'] = email.to_jaxb_json_hash unless email.nil?
      _h['firstName'] = firstName.to_jaxb_json_hash unless firstName.nil?
      _h['lastName'] = lastName.to_jaxb_json_hash unless lastName.nil?
      return _h
    end

    # the json (string form) for this Account
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Account with a json hash
    def init_jaxb_json_hash(_o)
      @email = String.from_json(_o['email']) unless _o['email'].nil?
      @firstName = String.from_json(_o['firstName']) unless _o['firstName'].nil?
      @lastName = String.from_json(_o['lastName']) unless _o['lastName'].nil?
    end

    # constructs a Account from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Info

module Interactivesystems

module Gamificationengine

module Entities

  # (no documentation provided)
  class PlayerLevel 

    # The player level&#39;s id as int.
    attr_accessor :id
    # The index of the level as an int.
    attr_accessor :levelIndex
    # The name of the level as String.
    attr_accessor :levelName

    # the json hash for this PlayerLevel
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['levelIndex'] = levelIndex.to_jaxb_json_hash unless levelIndex.nil?
      _h['levelName'] = levelName.to_jaxb_json_hash unless levelName.nil?
      return _h
    end

    # the json (string form) for this PlayerLevel
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this PlayerLevel with a json hash
    def init_jaxb_json_hash(_o)
      @id = Fixnum.from_json(_o['id']) unless _o['id'].nil?
      @levelIndex = Fixnum.from_json(_o['levelIndex']) unless _o['levelIndex'].nil?
      @levelName = String.from_json(_o['levelName']) unless _o['levelName'].nil?
    end

    # constructs a PlayerLevel from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Info

module Interactivesystems

module Gamificationengine

module Entities

  # (no documentation provided)
  class PlayerGroup 

    # a name of the group as String.
    attr_accessor :name
    # a list of all players.
    attr_accessor :players
    # The list of already finished goals.
    attr_accessor :finishedGoals
    # Current amount of points this group owns as int.
    attr_accessor :points
    # The group&#39;s id as int.
    attr_accessor :id
    # The amount of obtained coins as int.
    attr_accessor :coins
    # List of all obtained permanent rewards.
    attr_accessor :rewards
    # A List of all obtained Badges as List.
    attr_accessor :onlyBadges
    # A List of all obtained Achievements as List.
    attr_accessor :onlyAchievement
    # Level index returned as int.
    attr_accessor :levelIndex
    # The name of the player&#39;s current level as String.
    attr_accessor :levelLabel

    # the json hash for this PlayerGroup
    def to_jaxb_json_hash
      _h = {}
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      if !players.nil?
        _ha = Array.new
        players.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['players'] = _ha
      end
      if !finishedGoals.nil?
        _ha = Array.new
        finishedGoals.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['finishedGoals'] = _ha
      end
      _h['points'] = points.to_jaxb_json_hash unless points.nil?
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['coins'] = coins.to_jaxb_json_hash unless coins.nil?
      if !rewards.nil?
        _ha = Array.new
        rewards.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['rewards'] = _ha
      end
      if !onlyBadges.nil?
        _ha = Array.new
        onlyBadges.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['onlyBadges'] = _ha
      end
      if !onlyAchievement.nil?
        _ha = Array.new
        onlyAchievement.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['onlyAchievement'] = _ha
      end
      _h['levelIndex'] = levelIndex.to_jaxb_json_hash unless levelIndex.nil?
      _h['levelLabel'] = levelLabel.to_jaxb_json_hash unless levelLabel.nil?
      return _h
    end

    # the json (string form) for this PlayerGroup
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this PlayerGroup with a json hash
    def init_jaxb_json_hash(_o)
      @name = String.from_json(_o['name']) unless _o['name'].nil?
      if !_o['players'].nil?
        @players = Array.new
        _oa = _o['players']
        _oa.each { | _item | @players.push Info::Interactivesystems::Gamificationengine::Entities::Player.from_json(_item) }
      end
      if !_o['finishedGoals'].nil?
        @finishedGoals = Array.new
        _oa = _o['finishedGoals']
        _oa.each { | _item | @finishedGoals.push Info::Interactivesystems::Gamificationengine::Entities::Goal::FinishedGoal.from_json(_item) }
      end
      @points = Fixnum.from_json(_o['points']) unless _o['points'].nil?
      @id = Fixnum.from_json(_o['id']) unless _o['id'].nil?
      @coins = Fixnum.from_json(_o['coins']) unless _o['coins'].nil?
      if !_o['rewards'].nil?
        @rewards = Array.new
        _oa = _o['rewards']
        _oa.each { | _item | @rewards.push Info::Interactivesystems::Gamificationengine::Entities::Rewards::PermanentReward.from_json(_item) }
      end
      if !_o['onlyBadges'].nil?
        @onlyBadges = Array.new
        _oa = _o['onlyBadges']
        _oa.each { | _item | @onlyBadges.push Info::Interactivesystems::Gamificationengine::Entities::Rewards::Badge.from_json(_item) }
      end
      if !_o['onlyAchievement'].nil?
        @onlyAchievement = Array.new
        _oa = _o['onlyAchievement']
        _oa.each { | _item | @onlyAchievement.push Info::Interactivesystems::Gamificationengine::Entities::Rewards::Achievement.from_json(_item) }
      end
      @levelIndex = Fixnum.from_json(_o['levelIndex']) unless _o['levelIndex'].nil?
      @levelLabel = String.from_json(_o['levelLabel']) unless _o['levelLabel'].nil?
    end

    # constructs a PlayerGroup from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Info

module Interactivesystems

module Gamificationengine

module Entities

module MarketPlace

  # (no documentation provided)
  class MarketPlace 

    # The markeptlace&#39;s id as int.
    attr_accessor :id
    # A list of all existing offers a player can bid for.
    attr_accessor :offers

    # the json hash for this MarketPlace
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      if !offers.nil?
        _ha = Array.new
        offers.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['offers'] = _ha
      end
      return _h
    end

    # the json (string form) for this MarketPlace
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this MarketPlace with a json hash
    def init_jaxb_json_hash(_o)
      @id = Fixnum.from_json(_o['id']) unless _o['id'].nil?
      if !_o['offers'].nil?
        @offers = Array.new
        _oa = _o['offers']
        _oa.each { | _item | @offers.push Info::Interactivesystems::Gamificationengine::Entities::MarketPlace::Offer.from_json(_item) }
      end
    end

    # constructs a MarketPlace from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Info

module Interactivesystems

module Gamificationengine

module Entities

  # (no documentation provided)
  class Organisation 

    # organisation&#39;s id as int
    attr_accessor :id
    # Collection of all organisation&#39;s manager accounts
    attr_accessor :managers
    # name of the organisation as String.
    attr_accessor :name
    # the apiKey as a String
    attr_accessor :apiKey

    # the json hash for this Organisation
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      if !managers.nil?
        _ha = Array.new
        managers.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['managers'] = _ha
      end
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['apiKey'] = apiKey.to_jaxb_json_hash unless apiKey.nil?
      return _h
    end

    # the json (string form) for this Organisation
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Organisation with a json hash
    def init_jaxb_json_hash(_o)
      @id = Fixnum.from_json(_o['id']) unless _o['id'].nil?
      if !_o['managers'].nil?
        @managers = Array.new
        _oa = _o['managers']
        _oa.each { | _item | @managers.push Info::Interactivesystems::Gamificationengine::Entities::Account.from_json(_item) }
      end
      @name = String.from_json(_o['name']) unless _o['name'].nil?
      @apiKey = String.from_json(_o['apiKey']) unless _o['apiKey'].nil?
    end

    # constructs a Organisation from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Info

module Interactivesystems

module Gamificationengine

module Entities

module MarketPlace

  # (no documentation provided)
  class Bid 

    # The id of a bid as int.
    attr_accessor :id
    # The coins of the concrete bid.
    attr_accessor :prize
    # creationDate
    # The date and time, when the bid was created as LocalDateTime.
    attr_accessor :creationDate
    # The player who has made the bid.
    attr_accessor :player
    # offer
    # The offer the player had bid for.
    attr_accessor :offer

    # the json hash for this Bid
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['prize'] = prize.to_jaxb_json_hash unless prize.nil?
      _h['creationDate'] = creationDate.to_jaxb_json_hash unless creationDate.nil?
      _h['player'] = player.to_jaxb_json_hash unless player.nil?
      _h['offer'] = offer.to_jaxb_json_hash unless offer.nil?
      return _h
    end

    # the json (string form) for this Bid
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Bid with a json hash
    def init_jaxb_json_hash(_o)
      @id = Fixnum.from_json(_o['id']) unless _o['id'].nil?
      @prize = Fixnum.from_json(_o['prize']) unless _o['prize'].nil?
      @creationDate = Java::Time::LocalDateTime.from_json(_o['creationDate']) unless _o['creationDate'].nil?
      @player = Info::Interactivesystems::Gamificationengine::Entities::Player.from_json(_o['player']) unless _o['player'].nil?
      @offer = Info::Interactivesystems::Gamificationengine::Entities::MarketPlace::Offer.from_json(_o['offer']) unless _o['offer'].nil?
    end

    # constructs a Bid from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Info

module Interactivesystems

module Gamificationengine

module Entities

module DonationCall

  # (no documentation provided)
  class DonationCall 

    # int of the id.
    attr_accessor :id
    # tThe name of the DonationCall as String.
    attr_accessor :name
    # The description of DonationCall as String.
    attr_accessor :description
    # The value of the goal as int.
    attr_accessor :goalAmount
    # The value of the current amount of coins as int.
    attr_accessor :currentAmount
    # List of player who donated to this call for donations.
    attr_accessor :donors
    # boolean
    # If the predetermined amount of coins is reached (true) or not (false).
    attr_accessor :goalReached

    # the json hash for this DonationCall
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['goalAmount'] = goalAmount.to_jaxb_json_hash unless goalAmount.nil?
      _h['currentAmount'] = currentAmount.to_jaxb_json_hash unless currentAmount.nil?
      if !donors.nil?
        _ha = Array.new
        donors.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['donors'] = _ha
      end
      _h['goalReached'] = goalReached.to_jaxb_json_hash unless goalReached.nil?
      return _h
    end

    # the json (string form) for this DonationCall
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this DonationCall with a json hash
    def init_jaxb_json_hash(_o)
      @id = Fixnum.from_json(_o['id']) unless _o['id'].nil?
      @name = String.from_json(_o['name']) unless _o['name'].nil?
      @description = String.from_json(_o['description']) unless _o['description'].nil?
      @goalAmount = Fixnum.from_json(_o['goalAmount']) unless _o['goalAmount'].nil?
      @currentAmount = Fixnum.from_json(_o['currentAmount']) unless _o['currentAmount'].nil?
      if !_o['donors'].nil?
        @donors = Array.new
        _oa = _o['donors']
        _oa.each { | _item | @donors.push Info::Interactivesystems::Gamificationengine::Entities::Player.from_json(_item) }
      end
      @goalReached = Boolean.from_json(_o['goalReached']) unless _o['goalReached'].nil?
    end

    # constructs a DonationCall from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Java

module Time

  # (no documentation provided)
  class LocalDateTime 

    # (no documentation provided)
    attr_accessor :dayOfYear
    # (no documentation provided)
    attr_accessor :nano
    # (no documentation provided)
    attr_accessor :monthValue
    # (no documentation provided)
    attr_accessor :second
    # (no documentation provided)
    attr_accessor :dayOfWeek
    # (no documentation provided)
    attr_accessor :year
    # (no documentation provided)
    attr_accessor :month
    # (no documentation provided)
    attr_accessor :dayOfMonth
    # (no documentation provided)
    attr_accessor :hour
    # (no documentation provided)
    attr_accessor :minute

    # the json hash for this LocalDateTime
    def to_jaxb_json_hash
      _h = {}
      _h['dayOfYear'] = dayOfYear.to_jaxb_json_hash unless dayOfYear.nil?
      _h['nano'] = nano.to_jaxb_json_hash unless nano.nil?
      _h['monthValue'] = monthValue.to_jaxb_json_hash unless monthValue.nil?
      _h['second'] = second.to_jaxb_json_hash unless second.nil?
      _h['dayOfWeek'] = dayOfWeek.to_jaxb_json_hash unless dayOfWeek.nil?
      _h['year'] = year.to_jaxb_json_hash unless year.nil?
      _h['month'] = month.to_jaxb_json_hash unless month.nil?
      _h['dayOfMonth'] = dayOfMonth.to_jaxb_json_hash unless dayOfMonth.nil?
      _h['hour'] = hour.to_jaxb_json_hash unless hour.nil?
      _h['minute'] = minute.to_jaxb_json_hash unless minute.nil?
      return _h
    end

    # the json (string form) for this LocalDateTime
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this LocalDateTime with a json hash
    def init_jaxb_json_hash(_o)
      @dayOfYear = Fixnum.from_json(_o['dayOfYear']) unless _o['dayOfYear'].nil?
      @nano = Fixnum.from_json(_o['nano']) unless _o['nano'].nil?
      @monthValue = Fixnum.from_json(_o['monthValue']) unless _o['monthValue'].nil?
      @second = Fixnum.from_json(_o['second']) unless _o['second'].nil?
      @dayOfWeek = String.from_json(_o['dayOfWeek']) unless _o['dayOfWeek'].nil?
      @year = Fixnum.from_json(_o['year']) unless _o['year'].nil?
      @month = String.from_json(_o['month']) unless _o['month'].nil?
      @dayOfMonth = Fixnum.from_json(_o['dayOfMonth']) unless _o['dayOfMonth'].nil?
      @hour = Fixnum.from_json(_o['hour']) unless _o['hour'].nil?
      @minute = Fixnum.from_json(_o['minute']) unless _o['minute'].nil?
    end

    # constructs a LocalDateTime from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

module Info

module Interactivesystems

module Gamificationengine

module Entities

module Goal

  # (no documentation provided)
  class FinishedGoal 

    # The goal&#39;s id as int.
    attr_accessor :id
    # The date and time when a goal was finished as local date time.
    attr_accessor :finishedDate
    # The finished goal as object.
    attr_accessor :goal

    # the json hash for this FinishedGoal
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['finishedDate'] = finishedDate.to_jaxb_json_hash unless finishedDate.nil?
      _h['goal'] = goal.to_jaxb_json_hash unless goal.nil?
      return _h
    end

    # the json (string form) for this FinishedGoal
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this FinishedGoal with a json hash
    def init_jaxb_json_hash(_o)
      @id = Fixnum.from_json(_o['id']) unless _o['id'].nil?
      @finishedDate = Java::Time::LocalDateTime.from_json(_o['finishedDate']) unless _o['finishedDate'].nil?
      @goal = Info::Interactivesystems::Gamificationengine::Entities::Goal::Goal.from_json(_o['goal']) unless _o['goal'].nil?
    end

    # constructs a FinishedGoal from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Info

module Interactivesystems

module Gamificationengine

module Entities

module Present

  # (no documentation provided)
  class ImageMessage < Info::Interactivesystems::Gamificationengine::Entities::Present::Present 

    # The byte[] of the sent image.
    attr_accessor :imageIcon
    # String of the message&#39;s short message.
    attr_accessor :message

    # the json hash for this ImageMessage
    def to_jaxb_json_hash
      _h = super
      if !imageIcon.nil?
        _ha = Array.new
        imageIcon.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['imageIcon'] = _ha
      end
      _h['message'] = message.to_jaxb_json_hash unless message.nil?
      return _h
    end

    #initializes this ImageMessage with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      if !_o['imageIcon'].nil?
        @imageIcon = Array.new
        _oa = _o['imageIcon']
        _oa.each { | _item | @imageIcon.push Fixnum.from_json(_item) }
      end
      @message = String.from_json(_o['message']) unless _o['message'].nil?
    end

    # constructs a ImageMessage from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Info

module Interactivesystems

module Gamificationengine

module Entities

module Rewards

  # (no documentation provided)
  class PermanentReward < Info::Interactivesystems::Gamificationengine::Entities::Rewards::Reward 


    # the json hash for this PermanentReward
    def to_jaxb_json_hash
      _h = super
      return _h
    end

    #initializes this PermanentReward with a json hash
    def init_jaxb_json_hash(_o)
      super _o
    end

    # constructs a PermanentReward from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Java

module Time

  # (no documentation provided)
  class Month

    # 
    JANUARY = "JANUARY"

    # 
    FEBRUARY = "FEBRUARY"

    # 
    MARCH = "MARCH"

    # 
    APRIL = "APRIL"

    # 
    MAY = "MAY"

    # 
    JUNE = "JUNE"

    # 
    JULY = "JULY"

    # 
    AUGUST = "AUGUST"

    # 
    SEPTEMBER = "SEPTEMBER"

    # 
    OCTOBER = "OCTOBER"

    # 
    NOVEMBER = "NOVEMBER"

    # 
    DECEMBER = "DECEMBER"
  end

end

end

module Info

module Interactivesystems

module Gamificationengine

module Entities

module Goal

  # (no documentation provided)
  class TaskRule < Info::Interactivesystems::Gamificationengine::Entities::Goal::GoalRule 

    # A list of tasks which are needed in goal rule&#39;s deifnition.
    attr_accessor :tasks

    # the json hash for this TaskRule
    def to_jaxb_json_hash
      _h = super
      if !tasks.nil?
        _ha = Array.new
        tasks.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['tasks'] = _ha
      end
      return _h
    end

    #initializes this TaskRule with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      if !_o['tasks'].nil?
        @tasks = Array.new
        _oa = _o['tasks']
        _oa.each { | _item | @tasks.push Info::Interactivesystems::Gamificationengine::Entities::Task::Task.from_json(_item) }
      end
    end

    # constructs a TaskRule from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Java

module Time

  # (no documentation provided)
  class DayOfWeek

    # 
    MONDAY = "MONDAY"

    # 
    TUESDAY = "TUESDAY"

    # 
    WEDNESDAY = "WEDNESDAY"

    # 
    THURSDAY = "THURSDAY"

    # 
    FRIDAY = "FRIDAY"

    # 
    SATURDAY = "SATURDAY"

    # 
    SUNDAY = "SUNDAY"
  end

end

end

module Info

module Interactivesystems

module Gamificationengine

module Entities

module Rewards

  # (no documentation provided)
  class VolatileReward < Info::Interactivesystems::Gamificationengine::Entities::Rewards::Reward 


    # the json hash for this VolatileReward
    def to_jaxb_json_hash
      _h = super
      return _h
    end

    #initializes this VolatileReward with a json hash
    def init_jaxb_json_hash(_o)
      super _o
    end

    # constructs a VolatileReward from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Info

module Interactivesystems

module Gamificationengine

module Entities

module Present

  # (no documentation provided)
  class TextMessage < Info::Interactivesystems::Gamificationengine::Entities::Present::Present 

    # String of the message&#39;s content.
    attr_accessor :content

    # the json hash for this TextMessage
    def to_jaxb_json_hash
      _h = super
      _h['content'] = content.to_jaxb_json_hash unless content.nil?
      return _h
    end

    #initializes this TextMessage with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @content = String.from_json(_o['content']) unless _o['content'].nil?
    end

    # constructs a TextMessage from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Info

module Interactivesystems

module Gamificationengine

module Entities

module Present

  # (no documentation provided)
  class Status

    # 
    ACCEPT = "ACCEPT"

    # 
    DENIED = "DENIED"
  end

end

end

end

end

end

module Info

module Interactivesystems

module Gamificationengine

module Entities

module Goal

  # (no documentation provided)
  class GetPointsRule < Info::Interactivesystems::Gamificationengine::Entities::Goal::GoalRule 

    # The amount of needed points as int.
    attr_accessor :points

    # the json hash for this GetPointsRule
    def to_jaxb_json_hash
      _h = super
      _h['points'] = points.to_jaxb_json_hash unless points.nil?
      return _h
    end

    #initializes this GetPointsRule with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @points = Fixnum.from_json(_o['points']) unless _o['points'].nil?
    end

    # constructs a GetPointsRule from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Info

module Interactivesystems

module Gamificationengine

module Entities

module Rewards

  # (no documentation provided)
  class Points < Info::Interactivesystems::Gamificationengine::Entities::Rewards::VolatileReward 

    # The concrete amount as int.
    attr_accessor :amount

    # the json hash for this Points
    def to_jaxb_json_hash
      _h = super
      _h['amount'] = amount.to_jaxb_json_hash unless amount.nil?
      return _h
    end

    #initializes this Points with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @amount = Fixnum.from_json(_o['amount']) unless _o['amount'].nil?
    end

    # constructs a Points from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Info

module Interactivesystems

module Gamificationengine

module Entities

module Rewards

  # (no documentation provided)
  class Badge < Info::Interactivesystems::Gamificationengine::Entities::Rewards::PermanentReward 

    # The URL of the associated icon.
    attr_accessor :iconURL

    # the json hash for this Badge
    def to_jaxb_json_hash
      _h = super
      _h['iconURL'] = iconURL.to_jaxb_json_hash unless iconURL.nil?
      return _h
    end

    #initializes this Badge with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @iconURL = Java::Net::URL.from_json(_o['iconURL']) unless _o['iconURL'].nil?
    end

    # constructs a Badge from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Info

module Interactivesystems

module Gamificationengine

module Entities

module Rewards

  # (no documentation provided)
  class ReceiveLevel < Info::Interactivesystems::Gamificationengine::Entities::Rewards::VolatileReward 

    # the level&#39;s index as an int.
    attr_accessor :levelIndex
    # The value of the level&#39;s label as String.
    attr_accessor :levelLabel

    # the json hash for this ReceiveLevel
    def to_jaxb_json_hash
      _h = super
      _h['levelIndex'] = levelIndex.to_jaxb_json_hash unless levelIndex.nil?
      _h['levelLabel'] = levelLabel.to_jaxb_json_hash unless levelLabel.nil?
      return _h
    end

    #initializes this ReceiveLevel with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @levelIndex = Fixnum.from_json(_o['levelIndex']) unless _o['levelIndex'].nil?
      @levelLabel = String.from_json(_o['levelLabel']) unless _o['levelLabel'].nil?
    end

    # constructs a ReceiveLevel from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Info

module Interactivesystems

module Gamificationengine

module Entities

module Rewards

  # (no documentation provided)
  class Coins < Info::Interactivesystems::Gamificationengine::Entities::Rewards::VolatileReward 

    # The current amount as int.
    attr_accessor :amount

    # the json hash for this Coins
    def to_jaxb_json_hash
      _h = super
      _h['amount'] = amount.to_jaxb_json_hash unless amount.nil?
      return _h
    end

    #initializes this Coins with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @amount = Fixnum.from_json(_o['amount']) unless _o['amount'].nil?
    end

    # constructs a Coins from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Info

module Interactivesystems

module Gamificationengine

module Entities

module Rewards

  # (no documentation provided)
  class Achievement < Info::Interactivesystems::Gamificationengine::Entities::Rewards::PermanentReward 

    # The URL of the icon.
    attr_accessor :iconURL

    # the json hash for this Achievement
    def to_jaxb_json_hash
      _h = super
      _h['iconURL'] = iconURL.to_jaxb_json_hash unless iconURL.nil?
      return _h
    end

    #initializes this Achievement with a json hash
    def init_jaxb_json_hash(_o)
      super _o
      @iconURL = Java::Net::URL.from_json(_o['iconURL']) unless _o['iconURL'].nil?
    end

    # constructs a Achievement from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end
