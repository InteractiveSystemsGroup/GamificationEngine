{
  "swagger": "2.0",
  "info" : {
    "description" : "In\n\t\tthis API all methods and if applicable their default values are\n\t\tdescribed which the gamification engine\n\t\tKinben provides.\n\t\tVisit the \n\t\t\t\t <a href=\"https://github.com/InteractiveSystemsGroup/GamificationEngine-Kinben/wiki\">Kinben wiki<\/a>\n\t\t\t\t \n\t\tfor more information or examples.\n\n\t\tFor the gamification engine exists also a \n\t\t\t\t <a href=\"http://interactivesystemsgroup.github.io/GamificationEngine-Kinben/Javadoc/\">Javadoc documentation<\/a>\n\t\t\t\t .",
    "version" : "1.0.0-SNAPSHOT",
    "title" : "Kinben API"
  },
  "tags" : [
    {
      "name" : "AccountApi",
      "description" : "An Account has to be created for at least one manager or developer. It\r\nis identified by a unique email address. The password ensures the\r\nidentity. Optionally an account may have information about the user in form\r\nof her/his first name and last name.\r\nIt is possible to change the password, the first name or last name\r\nat a later point of time. In addition to creating an account another\r\npossible request is to get the created account but only with the\r\ncorrect credentials.\r\nIn the response of all requests the hashed password isn't returned because\r\nof security reasons."
    }
    ,
    {
      "name" : "Api",
      "description" : "With the API some application information can be queried like the current date and time."
    }
    ,
    {
      "name" : "DonationApi",
      "description" : "A donation stands for a real world purpose. This could be for example a real donation for a\r\ncharitable purpose or an event for the organisation’s employees like the arrangement for the\r\ncompany party or purchasing a new coffee machine. When a donation is created, players can pool\r\ncoins for a certain amount and the connected purpose if she/he has enough coins. If the required\r\namount is reached, the goal is reached and the purpose can be implemented by the responsible\r\nmanager."
    }
    ,
    {
      "name" : "GoalApi",
      "description" : "A Goal comprises one or more tasks and has to be completed if the player wants to earn the connected awards.\r\nTo create a goal some already created components are needed. So the condition when a goal is completed is\r\ndefined in the goal rule and the connected tasks. Who can complete a goal is defined by the role of a player\r\nand whether it can be done by a group. It is also possible to define whether a goal is repeatable so that the\r\nplayer can complete the tasks and obtains its coins and points as rewards again. All goals that are\r\nassociated with the organisation can be requested or like the elements before only one specific goal, if the\r\ncorrespondent id is used. The name, the associated rewards and also the rule for completion can be changed\r\nas well as the indication if the goal is repeatable or a goal that can be reached by a group. It is also\r\npossible to change the roles so different people can complete the goal."
    }
    ,
    {
      "name" : "MarketPlaceApi",
      "description" : "The marketplace gives players the opportunity to offer tasks that have to be completed by their colleagues\r\nso that they are able to fulfil those tasks and obtain the respective reward. Upon creation of a task, an\r\ninitial bid in terms of coins is set, which will be obtained as additional reward. Via Bids this initial bid\r\ncan be raised. To be able to create offers, a marketplace for the organisation is needed. If none exists yet,\r\nit first has to be created.\r\n\r\nIf an offer is created an initial bid in terms of coins is set which is obtained by the person who completes\r\nit. The initial bid can be raised by other colleagues in order to increase the incentive of fulfilling the\r\ntask. When a player has completed a Task that belongs to an offer, she/he will obtain all bids as a reward.\r\nThe particular task is then also added to the player’s list of the finished tasks. All offers a player has\r\nput on the marketplace can be requested. The name of an offer can be changed at a later point of time as\r\nwell as the optional date when an offer ends or the deadline when the associated task of an offer should be\r\ndone at the latest.\r\n\r\nAt the marketplace not all offers may are visible for each player because the offers can be filtered by the\r\nroles a player has. It can also additionally filtered by the date an offer was created or the prize which\r\ncan be earned. By making a bid, the reward of coins for completing a task is raised. The bidden amount of\r\ncoins will be subtracted from the bidder’s current account and will be added to the offer’s current prize.\r\nEach player can make several bids on condition that her/his coins are enough otherwise the bid cannot be\r\nmade. It is also possible to get all bids that was made for an offer."
    }
    ,
    {
      "name" : "OrganisationApi",
      "description" : "An Organisation represents for example a specific company or an association which\r\nrepresents a group of people belonging together and which are participating in the\r\ngamification process.\r\nAn Organisation possessed an generated API key which is needed for all further interactions\r\nbecause all database entries are associated with this unique key and so with the respective\r\norganisation. The API key is uniquely in the whole application. It\r\nmay be changed, for this reason it has no primary key.\r\nWhen an Organisation is created it has to be connected with an account. Each organisation\r\nmay be managed by many people, but at least by one who is added to the list of the manager\r\nof the respective organisation and so also the Account.\r\nIn the response of all requests the account's password isn't returned because of security\r\nreasons."
    }
    ,
    {
      "name" : "PlayerApi",
      "description" : "A player represents a user in the gamification application, eg. an employee of an organisation or a customer.\r\nBy the creation, each player is assigned a nickname and certain roles. Each player has a list for his earned\r\nrewards, already finished Goals and finished Tasks. The initial value of possible points, coins and index of\r\na level is set to \"0\". These can be raised by fulfilling tasks in the gamification application. Furthermore\r\na player can have an avatar, by specifying the path of an image previously uploaded to a server.\r\nA player can be set active or can be deactivated so that she/he cannot complete tasks. In addition to create\r\nand to delete a player it is possible to get one particular player of one specific organisation by her/his\r\nassociated id or all players of the organisation. The avatar of one player can also be requested. To display\r\nthe status of a player ancillary the already finished goals and finished tasks it can be requested all earned\r\npermanent rewards. If only one status element is needed, the current points, coins, badges or achievements\r\ncan be gotten instead.\r\nEach player can also have a list of contacts which represent other players in the same organisation, so players\r\ncan send them little presents.\r\nAt a later point of time it is possible to change the password, nickname, avatar and the roles or contacts a\r\nplayer has.\r\nIn the responses the player's password and avatar isn't returned because of security reasons respectively overload.\r\nTo get the avatar of a player a specific get request can be sent (\"/player/{id}/avatar\")."
    }
    ,
    {
      "name" : "PlayerGroupApi",
      "description" : "Players can be assigned to a group by its creation or at a later point in time.\r\nFor example depending on the respective organization, a group can be a\r\ndepartment, a work group or several employees with the same occupation. It is\r\npossible to create special tasks which can be done only as a group.\r\nWhen a member of a group completed such a task the group obtains its rewards.\r\nSo a group can also have a list of already earned rewards and finished Goals.\r\nLike a player, a group can be assigned an image as a logo. This can either be\r\ndone when creating the group or later through a PUT query. Later players can\r\nalso be added to a group or the group’s name can be changed."
    }
    ,
    {
      "name" : "PlayerLevelApi",
      "description" : "API for player level related services."
    }
    ,
    {
      "name" : "PresentApi",
      "description" : "Players in a gamification application can send presents to each other, whereby\r\none or more players can be a recipient. These presents can be a small image or a short text\r\nmessage which contains for example a little praise. A Board serves a player to send and\r\nto store presents in terms of a short text message or an image. The difference\r\nbetween these two messages is as the name suggests, that the text message contains a\r\nshort text and the image message an image. To archive the presents they can be moved to\r\nan additional list. It is possible to get for one player all her/his text messages or all\r\nmessages with a small image that were created. Furthermore all new presents of player\r\ncan be requested as well as the accepted and archived presents. All denies presents were\r\nremoved from the in-box."
    }
    ,
    {
      "name" : "RewardApi",
      "description" : "A Reward will be awarded in dependent of the goal for a group or one person after\r\na person fulfilled a task. A reward can be a permanent reward like a badge or achievement\r\nwhich can be obtained only once or a volatile reward such as coins, points or a\r\nparticular level which can be earned several times and so can be changed by getting for\r\nexample more coins or decrease the coins by giving a bid for an offer in the marketplace.\r\nAncillary all possible types for creating a reward, all already created rewards for one\r\nparticular organisation or with the associated id only one specific reward can be\r\nrequested.\r\nFor all rewards the name and description can be changed after they have been created.\r\nDependent on the reward has an image or an amount of points respectively coins these\r\nattributes also can be changed."
    }
    ,
    {
      "name" : "RoleApi",
      "description" : "A role describes which members of an organisation is allowed to do or see\r\nparticular elements of the engine such as to fulfil a particular task and get\r\nits rewards. Each Player can have many different roles such as one for his\r\noccupation or the department in which she/he works. But the roles can also be a\r\npart of an invented role system that isn’t oriented towards the work context. All\r\nroles are specific to the respective created organisation.\r\nAncillary creating and deleting, either all roles of a specific organisation or with\r\na given id the associated role can be gotten.\r\nThe name of one role can also be changed at a later point of time."
    }
    ,
    {
      "name" : "RuleApi",
      "description" : "With a Goalrule can be defined which tasks and if all or only one task have to be fulfilled to reach a goal.\r\nWhen a goal rule is fulfilled the goal is added to the player’s list of finished goals. If the goal can also\r\nbe done by a group it is also added to its list of finished goals. There are two types of rules that can be\r\ndefined: a TaskRule or a PointsRule.\r\nAll created rules which are created in the context of one specific organisation can be requested with the\r\nappendant API key. With the given id also a particular rule can be requested, also for example to change some\r\nattributes like the name, the description or, if it is a PointsRule, the amount of points which has to be\r\nreached."
    }
    ,
    {
      "name" : "TaskApi",
      "description" : "A Task is the basic module and represents for example a specific activity. For a creation\r\nof a task, the roles are needed which indicate who is allowed to fulfil this task. To\r\ncomplete the task only one of these roles is needed. One or more tasks can be assigned to\r\na goal, so depending on the rule of the goal some additional tasks may also have to be\r\ncompleted to fulfill the goal so the player can earn the associated rewards. If the task\r\nis tradeable it can be offered in the marketplace, so that another player can do it and\r\ngets the reward of it.\r\n\r\nWhen a player has completed a task, it will be added to the player’s list of finished\r\ntasks. At the same time the date and time is also stored when this request was sent and the\r\ntask was officially be done. If the task is the last one to fulfill a goal, the goal is also\r\nadded to the player’s list of finished goals and the player will obtain all its associated\r\nrewards.\r\nIt is possible to query all tasks which are associated with a particular organisation or with\r\nthe help of the associated id one specific task. When a task was created it is possible to\r\nchange the task’s name, description and roles of players who are allowed to fulfil this task.\r\nFurthermore a task can be set tradeable or not at a later point of time."
    }
  ],
  "definitions" : {
    "json_account" : {
      "type" : "object",
      "title" : "Account",
          "properties" : {
            "email" : {
"description" : "Gets the email address of an Account.\r\nThis email address is unique.",
"type" : "string"
            },
            "firstName" : {
"description" : "Gets the first name of the Account user.",
"type" : "string"
            },
            "lastName" : {
"description" : "Gets the last name of the Account user.",
"type" : "string"
            }
          },
      "description" : "An Account has to be created for at least one manager or developer. It\r\nis identified by a unique email address. The password ensures the\r\nidentity. Optionally an account may have information about the user in form\r\nof her/his first name and last name.\r\nIt is possible to change the password, the first name or last name\r\nat a later point of time. In addition to creating an account another\r\npossible request is to get the created account but only with the\r\ncorrect credentials."
    }
    ,
    "json_achievement" : {
      "type" : "object",
      "title" : "Achievement",
      "allOf" : [
        {
          "$ref" : "#/definitions/json_reward"
        },
        {
          "$ref" : "#/definitions/json_permanentreward"
        },
        {
          "properties" : {
            "iconURL" : {
"description" : "Gets the URL of the achievement's icon, but only when it was created.",
"$ref" : "#/definitions/json_url"
            }
          }
        }
      ],
      "description" : "The achievement class contains an image and a description for a documentary\r\nuse to track significant results or milestones the player was able to achieve\r\nduring her/his play. It's a more elaborate way to record the players achievements\r\nthan the badge class. An achievement is a permanent reward, so a player can\r\nget a specific achievement only once."
    }
    ,
    "json_badge" : {
      "type" : "object",
      "title" : "Badge",
      "allOf" : [
        {
          "$ref" : "#/definitions/json_reward"
        },
        {
          "$ref" : "#/definitions/json_permanentreward"
        },
        {
          "properties" : {
            "iconURL" : {
"description" : "Gets the URL of the badge's icon, when it was created.",
"$ref" : "#/definitions/json_url"
            }
          }
        }
      ],
      "description" : "The badge class serves as a Reward-subclass that represents a distinct icon.\r\nIt should be used as a an instantly recognizable visual reference to an badge\r\na player was able to reach. A badge is a permanent reward, so a player can\r\naward a specific badge only once."
    }
    ,
    "json_bid" : {
      "type" : "object",
      "title" : "Bid",
          "properties" : {
            "creationDate" : {
"description" : "Gets the exact date and time, when the bid was made.",
"$ref" : "#/definitions/json_localdatetime"
            },
            "id" : {
"description" : "Gets the id of a bid.",
"type" : "number"
            },
            "offer" : {
"description" : "Gets the offer for which the bid was given.",
"$ref" : "#/definitions/json_offer"
            },
            "player" : {
"description" : "Gets the player, who gives a bid for an offer.",
"$ref" : "#/definitions/json_player"
            },
            "prize" : {
"description" : "Gets the amount of coins, by which the prize of coins is raised.",
"type" : "number"
            }
          },
      "description" : "A player can give one or more bids for an offer so its total prize gets higher and in order to increase\r\nthe incentive of fulfilling the task. The bidden amount of coins will be subtracted from the bidder’s\r\ncurrent account and will be added to the offer’s current prize. Each player can make several bids on\r\ncondition that her/his coins are enough otherwise the bid cannot be done."
    }
    ,
    "json_coins" : {
      "type" : "object",
      "title" : "Coins",
      "allOf" : [
        {
          "$ref" : "#/definitions/json_reward"
        },
        {
          "$ref" : "#/definitions/json_volatilereward"
        },
        {
          "properties" : {
            "amount" : {
"description" : "Gets the concrete amount of coins which can be earned as a reward.",
"type" : "number"
            }
          }
        }
      ],
      "description" : "The Coins class serves as a Reward-subclass, that allocates coins to a player.\r\nCoins are a volatile reward which can be earned more than one time. These\r\nawarded coins are added to the current amount of coins a player owns."
    }
    ,
    "json_dayofweek" : {
      "type" : "string",
      "title" : "DayOfWeek",
          "enum" : [
            "MONDAY",
            "TUESDAY",
            "WEDNESDAY",
            "THURSDAY",
            "FRIDAY",
            "SATURDAY",
            "SUNDAY"
          ],
      "description" : ""
    }
    ,
    "json_donation" : {
      "type" : "object",
      "title" : "Donation",
          "properties" : {
            "amount" : {
"description" : "",
"type" : "number"
            },
            "creationDate" : {
"description" : "",
"$ref" : "#/definitions/json_localdatetime"
            },
            "id" : {
"description" : "",
"type" : "number"
            },
            "player" : {
"description" : "",
"$ref" : "#/definitions/json_player"
            }
          },
      "description" : ""
    }
    ,
    "json_donationcall" : {
      "type" : "object",
      "title" : "DonationCall",
          "properties" : {
            "currentAmount" : {
"description" : "Gets the current value of the donated and collected coins.",
"type" : "number"
            },
            "description" : {
"description" : "Gets the description of the DonationCall.",
"type" : "string"
            },
            "donors" : {
"description" : "Gets all players who have done a donation to this call for donations.",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_player"
}
            },
            "goalAmount" : {
"description" : "Gets the goal of an DonationCall. This is represented by an amount of coins that should be reached.",
"type" : "number"
            },
            "goalReached" : {
"description" : "Gets the value if the DonationCall is reached.",
"type" : "boolean"
            },
            "id" : {
"description" : "Gets id of the DonationCall object.",
"type" : "number"
            },
            "name" : {
"description" : "Gets the name of a DonationCall.",
"type" : "string"
            }
          },
      "description" : "A DonationCall represents a call for donations. This could be a real world purpose like a real donation for a\r\ncharitable purpose or an event for the organisation's employee. Players can donate obtained coins to reach a\r\nparticular amount of coins. If the required amount is reached, the goal is reached and the purpose can be\r\nimplemented by the responsible manager."
    }
    ,
    "json_finishedgoal" : {
      "type" : "object",
      "title" : "FinishedGoal",
          "properties" : {
            "finishedDate" : {
"description" : "Gets the date and time a goal was completed.",
"$ref" : "#/definitions/json_localdatetime"
            },
            "goal" : {
"description" : "Get the goal object which was finished.",
"$ref" : "#/definitions/json_goal"
            },
            "id" : {
"description" : "Gets the id of the finished goal.",
"type" : "number"
            }
          },
      "description" : "When a player has completed a Goal, it will be added to the player’s list of finished goals. If the goal is\r\na group goal it is also stored in the group's list of finished goals. At the same time the date is also\r\nstored when this request was sent and the goal was officially be done."
    }
    ,
    "json_finishedtask" : {
      "type" : "object",
      "title" : "FinishedTask",
          "properties" : {
            "finishedDate" : {
"description" : "The date and time and when a task was finished.",
"$ref" : "#/definitions/json_localdatetime"
            },
            "id" : {
"description" : "Gets the id of the finished task.",
"type" : "number"
            },
            "task" : {
"description" : "Gets the task which was finished.",
"$ref" : "#/definitions/json_task"
            }
          },
      "description" : "When a player has completed a Task, it will be added to the player’s list of finished tasks.\r\nAt the same time the date is also stored when this request was sent and the task was\r\nofficially be done. If the task is the last one to fulfill a goal, the goal is also added\r\nto the player’s list of finished goals and the player will obtain all its associated\r\nrewards."
    }
    ,
    "json_getpointsrule" : {
      "type" : "object",
      "title" : "GetPointsRule",
      "allOf" : [
        {
          "$ref" : "#/definitions/json_goalrule"
        },
        {
          "properties" : {
            "points" : {
"description" : "Gets the amount of points which is needed to complete the rule.",
"type" : "number"
            }
          }
        }
      ],
      "description" : "A PointsRule is a sub-class of the GoalRule. It specifies to reach a certain amount of points. If the player collected\r\nall needed points for example by executing tasks, the rule is completed. So every time the player receives points it\r\nis checked if one PointsRule is fulfilled."
    }
    ,
    "json_goal" : {
      "type" : "object",
      "title" : "Goal",
          "properties" : {
            "canCompletedBy" : {
"description" : "Gets all a roles to check if a player is allowed to fulfil a goal. Therefore a player has to own\r\nat least one of these roles.",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_role"
}
            },
            "id" : {
"description" : "Gets the id of the goal.",
"type" : "number"
            },
            "name" : {
"description" : "Gets the name of the goal.",
"type" : "string"
            },
            "playerGroupGoal" : {
"description" : "Gets the value if the goal if a group goal. If it is this method returns true otherwise false.",
"type" : "boolean"
            },
            "repeatable" : {
"description" : "Gets the value if the goal is repeatable. If it is this method returns true otherwise false.",
"type" : "boolean"
            },
            "rewards" : {
"description" : "Gets the List of rewards that are associated with the goal. All rewards can be earned\r\nby the player who completes the goal.",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_reward"
}
            },
            "rule" : {
"description" : "Gets the rule that defines which tasks have to be completed how to fulfil the goal.",
"$ref" : "#/definitions/json_goalrule"
            }
          },
      "description" : "A Goal comprises one or more tasks and is associated with a goal rule. If the player wants to earn the\r\nconnected awards the rule has to be fulfilled. To create a goal some already created components are needed.\r\nSo the condition when a goal is completed is defined in the goal rule and the connected tasks. Who can\r\ncomplete a goal is defined by the role of a player and whether it can be done by a group. It is also\r\npossible to define whether a goal is repeatable so that the player can complete the tasks and obtains its\r\ncoins and points as rewards again. All goals that are associated with the organisation can be requested\r\nor like the elements before only one specific goal, if the correspondent id is used. The name, the\r\nassociated rewards and also the rule for completion can be changed as well as the indication if the goal is\r\nrepeatable or a goal that can be reached by a group. Is is also possible to change the roles so different\r\npeople can complete the goal."
    }
    ,
    "json_goalrule" : {
      "type" : "object",
      "title" : "GoalRule",
          "properties" : {
            "description" : {
"description" : "Gets the description of a goal rule.",
"type" : "string"
            },
            "id" : {
"description" : "Gets the id of the GoalRule.",
"type" : "number"
            },
            "name" : {
"description" : "Gets the name of a goal rule.",
"type" : "string"
            }
          },
      "description" : "With a GoalRule can be defined which tasks and if all or only one task have to be fulfilled to reach a goal and\r\nto obtain the rewards for it. When a goal rule is fulfilled the goal is added to the player’s list of finished\r\ngoals. If the goal can also be done by a group it is also added to its list of finished goals. There are two types\r\nof rules that can be defined: a TaskRule or a PointsRule."
    }
    ,
    "json_imagemessage" : {
      "type" : "object",
      "title" : "ImageMessage",
      "allOf" : [
        {
          "$ref" : "#/definitions/json_present"
        },
        {
          "properties" : {
            "imageIcon" : {
"description" : "Gets the image icon which is sent as a present to a player as byte[].",
"type" : "string"
            },
            "message" : {
"description" : "Gets the short message of the created image message.",
"type" : "string"
            }
          }
        }
      ],
      "description" : "A present can be an imageMessage in the form of an image icon with a positive message for\r\nthe receiver."
    }
    ,
    "json_localdatetime" : {
      "type" : "object",
      "title" : "LocalDateTime",
          "properties" : {
            "dayOfMonth" : {
"description" : "",
"type" : "number"
            },
            "dayOfWeek" : {
"description" : "",
"$ref" : "#/definitions/json_dayofweek"
            },
            "dayOfYear" : {
"description" : "",
"type" : "number"
            },
            "hour" : {
"description" : "",
"type" : "number"
            },
            "minute" : {
"description" : "",
"type" : "number"
            },
            "month" : {
"description" : "",
"$ref" : "#/definitions/json_month"
            },
            "monthValue" : {
"description" : "",
"type" : "number"
            },
            "nano" : {
"description" : "",
"type" : "number"
            },
            "second" : {
"description" : "",
"type" : "number"
            },
            "year" : {
"description" : "",
"type" : "number"
            }
          },
      "description" : ""
    }
    ,
    "json_marketplace" : {
      "type" : "object",
      "title" : "MarketPlace",
          "properties" : {
            "id" : {
"description" : "Gets the id of a marketplace.",
"type" : "number"
            },
            "offers" : {
"description" : "Gets all offers of one marketplace, which a player can bid for.",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_offer"
}
            }
          },
      "description" : "Players can create an offer with a task for the marketplace so another player can\r\nbid to do this task and get its rewards. Via Bids an initial bid by the creator can be\r\nraised. To be able to create offers, a marketplace for the organisation is needed.\r\nIf none exists yet, it first has to be created."
    }
    ,
    "json_month" : {
      "type" : "string",
      "title" : "Month",
          "enum" : [
            "JANUARY",
            "FEBRUARY",
            "MARCH",
            "APRIL",
            "MAY",
            "JUNE",
            "JULY",
            "AUGUST",
            "SEPTEMBER",
            "OCTOBER",
            "NOVEMBER",
            "DECEMBER"
          ],
      "description" : ""
    }
    ,
    "json_offer" : {
      "type" : "object",
      "title" : "Offer",
          "properties" : {
            "deadLine" : {
"description" : "Gets the exact date and time, when the task of an offer should be\r\nfinished.",
"$ref" : "#/definitions/json_localdatetime"
            },
            "endDate" : {
"description" : "Gets the LocalDateTime, when the offer ends.",
"$ref" : "#/definitions/json_localdatetime"
            },
            "id" : {
"description" : "Gets the id of an offer.",
"type" : "number"
            },
            "name" : {
"description" : "Gets the name of the offer, which can describe the task in a short way.",
"type" : "string"
            },
            "offerDate" : {
"description" : "Gets the exact LocalDateTime when the offer was created.",
"$ref" : "#/definitions/json_localdatetime"
            },
            "prize" : {
"description" : "Gets the current prize of an offer, which can be awarded by fulfilling the\r\ntask.",
"type" : "number"
            },
            "task" : {
"description" : "Gets the task of an offer, which can be fulfilled to award the prize.",
"$ref" : "#/definitions/json_task"
            }
          },
      "description" : "With an offer a player can create a task for other players. At this point of time an initial bid in terms\r\nof coins is set which is obtained by the person who completes it. The initial bid can be raised by other\r\ncolleagues in order to increase the incentive of fulfilling the task. When a player has completed a Task\r\nthat belongs to an offer, she/he will obtain all bids as a reward.\r\nThe particular task is then also added to the player’s list of the finished tasks."
    }
    ,
    "json_organisation" : {
      "type" : "object",
      "title" : "Organisation",
          "properties" : {
            "apiKey" : {
"description" : "Gets the organisation's unique API key and returns it.",
"type" : "string"
            },
            "id" : {
"description" : "Gets the organisation's id.",
"type" : "number"
            },
            "managers" : {
"description" : "Gets all accounts of the organisation which are associated to this organisation.\r\nEach account belongs to a manager.",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_account"
}
            },
            "name" : {
"description" : "Gets the organisation's name and returns it as a String.",
"type" : "string"
            }
          },
      "description" : "An Organisation represents for example a specific company or an association which\r\nrepresents a group of people belonging together and which are participating in the\r\ngamification process.\r\nAn Organisation possessed an generated API key which is needed for all further interactions\r\nbecause all database entries are associated with this unique key and so with the respective\r\norganisation. The API key is uniquely in the whole application. It\r\nmay be changed, for this reason it has no primary key.\r\nWhen an Organisation is created it has to be connected with an account. Each organisation\r\nmay be managed by many people, but at least by one who is added to the list of the manager\r\nof the respective organisation and so also the Account."
    }
    ,
    "json_permanentreward" : {
      "type" : "object",
      "title" : "PermanentReward",
      "allOf" : [
        {
          "$ref" : "#/definitions/json_reward"
        },
        {
        }
      ],
      "description" : "Permanent rewards are rewards that can be earned only once. These are for\r\nexample an achievement or a badge. If a player has such an reward she/he\r\nmay reach the goal again but doesn't get the reward one more time."
    }
    ,
    "json_player" : {
      "type" : "object",
      "title" : "Player",
          "properties" : {
            "active" : {
"description" : "Checks if a player is active in the gamificated application. This is needed for example\r\nto complete a task.",
"type" : "boolean"
            },
            "belongsToRoles" : {
"description" : "Gets all roles a player has.",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_role"
}
            },
            "coins" : {
"description" : "Gets the current amount of coins a player has obtained.",
"type" : "number"
            },
            "finishedGoals" : {
"description" : "Gets all Goals a player has already completed.",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_finishedgoal"
}
            },
            "finishedTasks" : {
"description" : "Gets all Tasks a player has already finished.",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_finishedtask"
}
            },
            "id" : {
"description" : "Gets the id of a player.",
"type" : "number"
            },
            "levelIndex" : {
"description" : "Gets the current level index of a player.",
"type" : "number"
            },
            "levelLabel" : {
"description" : "Gets the label of a player's current level.",
"type" : "string"
            },
            "nickname" : {
"description" : "Gets the nickname of a player.",
"type" : "string"
            },
            "onlyAchievement" : {
"description" : "Gets only all Achievements a player has already obtained.\r\nIf the player has no Achievement, null is returned.",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_achievement"
}
            },
            "onlyBadges" : {
"description" : "Gets only all Badges a player has already obtained.\r\nIf the player has no Badge, null is returned.",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_badge"
}
            },
            "points" : {
"description" : "Gets the current amount of points a player has obtained.",
"type" : "number"
            },
            "reference" : {
"description" : "Gets the real name of a player.",
"type" : "string"
            },
            "rewards" : {
"description" : "Gets all permanent rewards a player has already obtained. These are for example\r\nall badges and achievements.",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_permanentreward"
}
            }
          },
      "description" : "A player represents a user in the gamification application, eg. an employee of an organisation or a customer.\r\nBy the creation, each player is assigned a nickname and certain roles. Each player has a list for his earned\r\nrewards, already finished Goals and finished Tasks. Points, coins and index of a level can be earned or raised\r\nby fulfilling tasks in the gamification application. Furthermore a player can have an avatar.\r\nA player can be set active or can be deactivated so that she/he cannot complete tasks. By default every created\r\nplayer is active until she/he is deactivated.\r\nEach player can also have a list of contacts which represent other players in the same organisation to send\r\nlittle presents.\r\nAt a later point of time it is possible to change the password, nickname, avatar and the roles or contacts a\r\nplayer has."
    }
    ,
    "json_playergroup" : {
      "type" : "object",
      "title" : "PlayerGroup",
          "properties" : {
            "coins" : {
"description" : "Gets the current amount of coins a group of players has obtained.",
"type" : "number"
            },
            "finishedGoals" : {
"description" : "Gets all Goals a group has already completed.",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_finishedgoal"
}
            },
            "id" : {
"description" : "Gets the id of the group.",
"type" : "number"
            },
            "levelIndex" : {
"description" : "Gets the current level index of a group of players.",
"type" : "number"
            },
            "levelLabel" : {
"description" : "Gets the label of a group's current level.",
"type" : "string"
            },
            "name" : {
"description" : "Gets the name of the group.",
"type" : "string"
            },
            "onlyAchievement" : {
"description" : "Gets only all Achievements a group of players has already obtained.\r\nIf the group has no Achievement, null is returned.",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_achievement"
}
            },
            "onlyBadges" : {
"description" : "Gets only all Badges a group of players has already obtained.\r\nIf the group has no Badge, null is returned.",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_badge"
}
            },
            "players" : {
"description" : "Gets the current list of players who are belong to this group.",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_player"
}
            },
            "points" : {
"description" : "Gets the current amount of points a group owns.",
"type" : "number"
            },
            "rewards" : {
"description" : "Gets all permanent rewards a group of player has already obtained. These\r\nare for example all badges and achievements.",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_permanentreward"
}
            }
          },
      "description" : "Players can be assigned to a group by its creation or at a later point in time.\r\nFor example depending on the respective organization, a group can be a\r\ndepartment, a work group or several employees with the same occupation. It is\r\npossible to create special tasks which can be done only as a group.\r\nWhen a member of a group completed such a task the group obtains its rewards.\r\nSo a group can also have a list of already earned rewards and finished Goals.\r\nLike a player, a group can be assigned an image as a logo."
    }
    ,
    "json_playerlevel" : {
      "type" : "object",
      "title" : "PlayerLevel",
          "properties" : {
            "id" : {
"description" : "Gets the id of the player level.",
"type" : "number"
            },
            "levelIndex" : {
"description" : "Gets the level's index.",
"type" : "number"
            },
            "levelName" : {
"description" : "Gets the name of the level. This could be for example a number or a status\r\nlike a title.",
"type" : "string"
            }
          },
      "description" : "A player level shows the status of the player. This can be a number or a status like a titel.\r\nAfter the Player completed a task her/his level can advance if the conditions are fulfilled."
    }
    ,
    "json_points" : {
      "type" : "object",
      "title" : "Points",
      "allOf" : [
        {
          "$ref" : "#/definitions/json_reward"
        },
        {
          "$ref" : "#/definitions/json_volatilereward"
        },
        {
          "properties" : {
            "amount" : {
"description" : "Gets the concrete amount of points which a player can earn as a\r\nreward.",
"type" : "number"
            }
          }
        }
      ],
      "description" : "Points class serves as a Reward-subclass, that allocates points to a player.\r\nPoints are a volatile reward which can be earned more than one time. The\r\nawarded points are added to the current ones of a player."
    }
    ,
    "json_present" : {
      "type" : "object",
      "title" : "Present",
          "properties" : {
            "id" : {
"description" : "Gets the id of the created present.",
"type" : "number"
            },
            "receiver" : {
"description" : "Gets all receivers of a specific present.",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_player"
}
            },
            "sender" : {
"description" : "Gets the sender who sent the present to one or more other players.",
"$ref" : "#/definitions/json_player"
            }
          },
      "description" : "A present is a little positive message which one player can send to one or\r\nmore other players. These presents can be an image or a short text message which\r\ncontains for example a little praise. A Board serves a player to send and to store\r\nthese presents in terms of a short text message or an small image. The difference between\r\nthese two messages is as the name suggests, that the text message contains a short\r\ntext and the image message an image. To archive the presents they can be moved to\r\nan additional list. It is possible to get for one player all her/his text messages\r\nor all messages with a small image that were created. Furthermore all new presents\r\nof a player can be requested as well as the accepted and archived presents. All denied\r\npresents were removed from the in-box."
    }
    ,
    "json_presentaccepted" : {
      "type" : "object",
      "title" : "PresentAccepted",
          "properties" : {
            "date" : {
"description" : "Gets the date and time a present was accepted by a player.",
"$ref" : "#/definitions/json_localdatetime"
            },
            "id" : {
"description" : "Gets the id of the accepted present.",
"type" : "number"
            },
            "present" : {
"description" : "Get the present that is accepted by the player.",
"$ref" : "#/definitions/json_present"
            },
            "status" : {
"description" : "Sets the status of the present if the player has accepted it or not.",
"$ref" : "#/definitions/json_status"
            }
          },
      "description" : "Presents that are in the in-box of the board a player can accept or deny. If the player\r\naccept a present its status is set to accepted and an PresentAccepted object is created."
    }
    ,
    "json_presentarchived" : {
      "type" : "object",
      "title" : "PresentArchived",
          "properties" : {
            "acceptedPresent" : {
"description" : "Gets the present object of the present that is archived.",
"$ref" : "#/definitions/json_presentaccepted"
            },
            "date" : {
"description" : "Gets the date and time a present was archived by a player.",
"$ref" : "#/definitions/json_localdatetime"
            },
            "id" : {
"description" : "Gets the id of the archived present.",
"type" : "number"
            }
          },
      "description" : "Presents that are accepted a player can archived. If the player archived a present\r\nan PresentArchived object is created."
    }
    ,
    "json_receivelevel" : {
      "type" : "object",
      "title" : "ReceiveLevel",
      "allOf" : [
        {
          "$ref" : "#/definitions/json_reward"
        },
        {
          "$ref" : "#/definitions/json_volatilereward"
        },
        {
          "properties" : {
            "levelIndex" : {
"description" : "Gets the index of the level.",
"type" : "number"
            },
            "levelLabel" : {
"description" : "Gets the level's label which should be awarded.",
"type" : "string"
            }
          }
        }
      ],
      "description" : "The ReceiveLevel class is a Reward-subclass that allocates a specific level\r\nto a player which can serve as a status."
    }
    ,
    "json_reward" : {
      "type" : "object",
      "title" : "Reward",
          "properties" : {
            "description" : {
"description" : "Gets the description of an achievement. This could contains for example the\r\ndifferent tasks which have to be completed to get this achievement.",
"type" : "string"
            },
            "id" : {
"description" : "Gets the id of the reward which was generated by the creation.",
"type" : "number"
            },
            "name" : {
"description" : "Gets the name of an achievement which can describe the success in a short\r\nway and can be displayed in the application.",
"type" : "string"
            },
            "timeToLive" : {
"description" : "Gets the information about how long the reward can exist.",
"type" : "number"
            }
          },
      "description" : "The super class of all rewards. Here are general information of the reward\r\nlike to which organisation the reward belongs to or the goal to which it\r\nis associated.\r\n\r\nA Reward will be awarded in dependent of the goal for a group or one person\r\nafter a person fulfilled a task. It can be chosen between one or more of\r\nthe following rewards for a task: A permanent reward like a badge or\r\nachievement which can be obtained only once, or a volatile reward such as\r\ncoins, points or a particular level which can be changed by getting for\r\nexample more coins or be decreased by giving a bid for an offer in the\r\nmarketplace."
    }
    ,
    "json_role" : {
      "type" : "object",
      "title" : "Role",
          "properties" : {
            "id" : {
"description" : "Gets the id of a role.",
"type" : "number"
            },
            "name" : {
"description" : "Gets the name of a role.",
"type" : "string"
            }
          },
      "description" : "A role describes which members of an organisation is allowed to do or see\r\nparticular elements of the engine such as to fulfil a particular task and get\r\nits rewards. Each Player can have many different roles such as one for his\r\noccupation or the department in which she/he works. But the roles can also be a\r\npart of an invented role system that isn’t oriented towards the work context. All\r\nroles are specific to the respective created organisation."
    }
    ,
    "json_state" : {
      "type" : "object",
      "title" : "State",
          "properties" : {
            "authors" : {
"description" : "",
"type" : "array",
"items" : {
  "type" : "string"
}
            },
            "date" : {
"description" : "",
"type" : "string"
            },
            "helpUri" : {
"description" : "",
"type" : "string"
            },
            "support" : {
"description" : "",
"type" : "object"
            },
            "version" : {
"description" : "",
"type" : "string"
            }
          },
      "description" : "A State is the default answer of the engine. It gives information about the current date\r\nand time as well as the current version. It also shows the used path of the local host and the\r\nprotocols that are supported."
    }
    ,
    "json_status" : {
      "type" : "string",
      "title" : "Status",
          "enum" : [
            "ACCEPT",
            "DENIED"
          ],
      "description" : ""
    }
    ,
    "json_task" : {
      "type" : "object",
      "title" : "Task",
          "properties" : {
            "allowedFor" : {
"description" : "Gets all roles for which the task is allowed. A player need only one role\r\nto complete the task.",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_role"
}
            },
            "description" : {
"description" : "Gets the description of a task.",
"type" : "string"
            },
            "id" : {
"description" : "Gets the id of the task.",
"type" : "number"
            },
            "taskName" : {
"description" : "Gets the name of a task.",
"type" : "string"
            },
            "tradeable" : {
"description" : "Checks if a task is tradeable. This means if a player is allowed to offer\r\nit on the marketplace.",
"type" : "boolean"
            }
          },
      "description" : "The Super Class for different types of Task.\r\n\r\nA Task is the basic module and represents for example a specific activity. By its creation\r\nthe roles were assigned which indicate who is allowed to fulfil this task. To complete the\r\ntask only one of these roles is needed. One or more tasks can be assigned to a goal, so\r\ndepending on the rule of the goal some additional tasks may also have to be completed to\r\nfulfill the goal so the player can earn the associated rewards. If the task is tradeable\r\nit can be offered in the marketplace, so that another player can do it and gets the reward\r\nof it."
    }
    ,
    "json_taskrule" : {
      "type" : "object",
      "title" : "TaskRule",
      "allOf" : [
        {
          "$ref" : "#/definitions/json_goalrule"
        },
        {
          "properties" : {
            "tasks" : {
"description" : "Gets the List of tasks which are contained in the goal rule definition. The specific rule is defined by\r\nthe use DoALlTasksRule or DoAnyTaskRule.",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_task"
}
            }
          }
        }
      ],
      "description" : "A TaskRule defines the combination of tasks until a goal is fulfilled. So for a defined sample of tasks\r\neither all of them have to be fulfilled (type: DoAllTaskRule) which corresponds an AND-expression, or\r\nonly one of a specific selection, which is like an OR-expression (type: DoAnyTaskRule)."
    }
    ,
    "json_textmessage" : {
      "type" : "object",
      "title" : "TextMessage",
      "allOf" : [
        {
          "$ref" : "#/definitions/json_present"
        },
        {
          "properties" : {
            "content" : {
"description" : "Gets the content of the created text message.",
"type" : "string"
            }
          }
        }
      ],
      "description" : "A present can be a short positive text message, which is sent to one or more\r\nreceivers. It can contain a little thank or a praise."
    }
    ,
    "json_url" : {
      "type" : "object",
      "title" : "URL",
          "properties" : {
            "authority" : {
"description" : "",
"type" : "string"
            },
            "content" : {
"description" : "",
"type" : "object"
            },
            "defaultPort" : {
"description" : "",
"type" : "number"
            },
            "file" : {
"description" : "",
"type" : "string"
            },
            "host" : {
"description" : "",
"type" : "string"
            },
            "path" : {
"description" : "",
"type" : "string"
            },
            "port" : {
"description" : "",
"type" : "number"
            },
            "protocol" : {
"description" : "",
"type" : "string"
            },
            "query" : {
"description" : "",
"type" : "string"
            },
            "ref" : {
"description" : "",
"type" : "string"
            },
            "userInfo" : {
"description" : "",
"type" : "string"
            }
          },
      "description" : ""
    }
    ,
    "json_volatilereward" : {
      "type" : "object",
      "title" : "VolatileReward",
      "allOf" : [
        {
          "$ref" : "#/definitions/json_reward"
        },
        {
        }
      ],
      "description" : "A volatile reward is a reward that can be awarded more than one time. So the\r\nplayer can reach a goal and earn the connected rewards again. Such a reward\r\nis for example a specific amount of points which is added to the player's\r\ncurrent points."
    }
  },
  "paths": {
    "/account" : {
      "post" : {
        "tags" : [ "AccountApi" ],
        "description" : "Creates a new account. For this an unique email address and a\r\npassword are mandatory. By the creation of an organisation this\r\nemail address is connected with it. Optionally the first and last\r\nname can also be set.\r\nIn the response the password isn't returned because of security\r\nreasons.",
        "operationId" : "resource_AccountApi_create_POST",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "email",
            "in" : "query",
            "type" : "string",
            "description" : "A required valid email address."
          },
          {
            "name" : "firstName",
            "in" : "query",
            "type" : "string",
            "description" : "Optionally the first name of the Account's owner can be set."
          },
          {
            "name" : "lastName",
            "in" : "query",
            "type" : "string",
            "description" : "Optionally the last name of the Account's owner can be set."
          },
          {
            "name" : "password",
            "in" : "query",
            "type" : "string",
            "description" : "Required query parameter to connect it with the given\r\nemail address."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_account"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
      ,
      "get" : {
        "tags" : [ "AccountApi" ],
        "description" : "Returns an account corresponding to the given email address but only\r\nif the combination with password is correct. By the creation of an\r\norganisation this email address is connected with it.\r\nSo the method requires valid credentials otherwise a warning with the\r\nhint for wrong credentials is returned.\r\nIn the response the password isn't returned because of security\r\nreasons.",
        "operationId" : "resource_AccountApi_get_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "password",
            "in" : "header",
            "type" : "string",
            "description" : "Required header parameter associated with the email address."
          },
          {
            "name" : "email",
            "in" : "query",
            "type" : "string",
            "description" : "A required valid unique email address."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_account"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
      ,
      "put" : {
        "tags" : [ "AccountApi" ],
        "description" : "Updates the first and last name of an existing account. For this the\r\nspecific email address and associated password are mandatory.\r\nOtherwise a warning with the hint for wrong credentials is returned.\r\nIn the response the password isn't returned because of security\r\nreasons.",
        "operationId" : "resource_AccountApi_update_PUT",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "password",
            "in" : "header",
            "type" : "string",
            "description" : "Required header parameter to connect it with the given\r\nemail address."
          },
          {
            "name" : "email",
            "in" : "query",
            "type" : "string",
            "description" : "A required valid email address."
          },
          {
            "name" : "firstName",
            "in" : "query",
            "type" : "string",
            "description" : "Optionally the first name of the Account's owner can be set."
          },
          {
            "name" : "lastName",
            "in" : "query",
            "type" : "string",
            "description" : "Optionally the last name of the Account's owner can be set."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_account"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "" : {
      "get" : {
        "tags" : [ "Api" ],
        "description" : "Responses a state of the current status.",
        "operationId" : "resource_Api_status_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_state"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/donation/{id}/donations" : {
      "get" : {
        "tags" : [ "DonationApi" ],
        "description" : "Gets a list of all donations which were made for a specific call for donations.\r\nIf the API key is not valid an analogous message is returned. It is also checked, if the offer id is a\r\npositive number otherwise a message for an invalid number is returned.",
        "operationId" : "resource_DonationApi_getDonations_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "The call for Donation whose donations are returned. This parameter is required."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which the call for donations belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_donation"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/donation/{id}/progress" : {
      "get" : {
        "tags" : [ "DonationApi" ],
        "description" : "Returns the progress of an call for donations: the current amount and the amount that should be\r\nreached. If the API key is not valid an analogous message is returned. It is also checked, if the\r\nid is a positive number otherwise a message for an invalid number is returned.",
        "operationId" : "resource_DonationApi_getProgess_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required path parameter as integer which uniquely identify the DonationCall."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this call for donations belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_donationcall"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/donation/*" : {
      "get" : {
        "tags" : [ "DonationApi" ],
        "description" : "Returns the call for donation which are associated with the organisation. If the API key is not\r\nvalid an analogous message is returned.",
        "operationId" : "resource_DonationApi_getDonationCalls_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this call for donations belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_donationcall"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/donation/{id}" : {
      "get" : {
        "tags" : [ "DonationApi" ],
        "description" : "Returns the call for donation which is associated with the passed id. If the API key is not\r\nvalid an analogous message is returned. It is also checked, if the id is a positive number\r\notherwise a message for an invalid number is returned.",
        "operationId" : "resource_DonationApi_getDonationCall_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required path parameter as integer which uniquely identify the DonationCall."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this call for donations belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_donationcall"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
      ,
      "delete" : {
        "tags" : [ "DonationApi" ],
        "description" : "Removes the call for donations with the assigned id from data base. If the goal of call for donations isn't\r\nreached, first all donors get their donations back and then in a second step the call for donation itself is\r\nremoved from the database. Else if the goal is already reached, the call for donation is deleted.\r\nIt is checked, if the passed id is a positive number otherwise a message for an invalid number is returned.\r\nIf the API key is not valid an analogous message is returned.",
        "operationId" : "resource_DonationApi_deleteDonationCall_DELETE",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required path parameter as integer which uniquely identify the {@link DonationCall} that\r\nshould be deleted."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this call for donations belongs to."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_donationcall"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/donation/{id}/donors" : {
      "get" : {
        "tags" : [ "DonationApi" ],
        "description" : "Returns a list of all donors that have donated to a specific call for donoation. If the API key is\r\nnot valid an analogous message is returned. It is also checked, if the id is a positive number\r\notherwise a message for an invalid number is returned.",
        "operationId" : "resource_DonationApi_getDonors_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "The id of the call for donations to which all donors should be returned."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this call for donations belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_donationcall"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/donation" : {
      "post" : {
        "tags" : [ "DonationApi" ],
        "description" : "Creates a new call for donations and generates the DonationCall-id. The organisation's API key is\r\nmandatory otherwise a warning with the hint for a non valid API key is returned.\r\nBy the creation the name and description are passed who should be assigned to this call for donation.\r\nThe goal of the call for donations also has be specified. This goal repesents the amount of coins that\r\nshould be reached.",
        "operationId" : "resource_DonationApi_createDonationCall_POST",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this call for donations belongs to."
          },
          {
            "name" : "description",
            "in" : "query",
            "type" : "string",
            "description" : "The longer description of the call for donation. This can contain its purpose."
          },
          {
            "name" : "goalAmount",
            "in" : "query",
            "type" : "string",
            "description" : "The amount of coins that should be reached to fulfil this donation."
          },
          {
            "name" : "name",
            "in" : "query",
            "type" : "string",
            "description" : "The short name of the call for donation."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_donationcall"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/donation/{id}/donate/{playerId}" : {
      "post" : {
        "tags" : [ "DonationApi" ],
        "description" : "With this method a player donates a specific amount of coins if she/he has enough coins and the given\r\namount hasn't been already reached.\r\nThese coins are subtracted from the player's current account and will be added to the DonationCall's\r\ncurrent amount. If the API key is not valid an analogous message is returned.\r\nIt is also checked, if the id is a positive number otherwise a message for an invalid number is returned.",
        "operationId" : "resource_DonationApi_donate_POST",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "The id of the call for donations to which a player donates. This path parameter is required."
          },
          {
            "name" : "playerId",
            "in" : "path",
            "type" : "string",
            "description" : "The id of the player who donates. This path parameter is required."
          },
          {
            "name" : "amount",
            "in" : "query",
            "type" : "string",
            "description" : "The amount of coins which the player donates."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this call for donations belongs to."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_donationcall"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/donation/{id}/attributes" : {
      "put" : {
        "tags" : [ "DonationApi" ],
        "description" : "With this method the fields of one specific call for donations can be changed.\r\nFor this the associated id, the API key of the specific organisation, the\r\nname of the field and the new field's value are needed.\r\nTo modify the name or the description of a call for donation, the new value\r\ncan be passed.\r\nIf the API key is not valid an analogous message is returned. It is\r\nalso checked, if the id is a positive number otherwise a message for\r\nan invalid number is returned.",
        "operationId" : "resource_DonationApi_changeAttributes_PUT",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required integer which uniquely identify the DonationCall."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this call for donations belongs to."
          },
          {
            "name" : "attribute",
            "in" : "query",
            "type" : "string",
            "description" : "The name of the attribute which should be modified. This\r\nparameter is required. The following names of attributes can\r\nbe used to change the associated field:\r\n\"name\" and \"description\""
          },
          {
            "name" : "value",
            "in" : "query",
            "type" : "string",
            "description" : "The new value of the attribute. This parameter is required."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_donationcall"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/goal" : {
      "post" : {
        "tags" : [ "GoalApi" ],
        "description" : "Creates a new goal and so the method generates the goal-id.\r\nThe organisation's API key is mandatory otherwise a warning with the hint for a  non valid API key is\r\nreturned.\r\nBy the creation the name and the id of the associated rule are needed. It can also be defined if\r\nthe goal is repeatable or if it can also be completed by a group.\r\nOptionally the goal can be passed the ids of roles which are allowed to complete the goal. So if a player has at\r\nleast one of these roles she/he can complete the goal and earn its rewards. It is checked, if the ids of the\r\nplayers are positive numbers otherwise a message for the invalid number is returned.\r\nOptionally the goal can be passed the id of rewards which can be earned. These ids are also checked if\r\nthey are positive numbers.\r\nIf the API key is not valid an analogous message is returned.\r\n\r\nNote:  If a goal is associated with a points rule and is also repeatable the goal will be added once only to the\r\nplayer's or respectively group's list of already finished goals. The rewards of such a goal are also awarded\r\nonly once. So a points rule can be fulfilled once only although the associated goal is repeatable.",
        "operationId" : "resource_GoalApi_createNewGoal_POST",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this goal belongs to."
          },
          {
            "name" : "groupGoal",
            "in" : "query",
            "default" : "false",
            "type" : "string",
            "description" : "Optionally a goal can also be done by a group. Possible values are \"1\" or \"0\", \"true\" or\r\n\"false\". The default value is \"false\"."
          },
          {
            "name" : "name",
            "in" : "query",
            "type" : "string",
            "description" : "The name of the goal. This parameter is required."
          },
          {
            "name" : "repeatable",
            "in" : "query",
            "default" : "true",
            "type" : "string",
            "description" : "Optionally a goal can be set as repeatable by \"1\" or \"0\", \"true\" or\r\n\"false\". The default value is \"true\"."
          },
          {
            "name" : "rewardIds",
            "in" : "query",
            "type" : "string",
            "description" : "All rewards that are awarded to the player who completes the goal. These ids are\r\nseparated by commas."
          },
          {
            "name" : "roleIds",
            "in" : "query",
            "default" : "null",
            "type" : "string",
            "description" : "Optionally a list of role-ids can be passed which are separated by commas. These ids indicate\r\nwho is allowed to fulfil the goal. This parameter is required."
          },
          {
            "name" : "ruleId",
            "in" : "query",
            "type" : "string",
            "description" : "The rule which define when a goal is completed. This parameter is required."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_goal"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/goal/{id}/attributes" : {
      "put" : {
        "tags" : [ "GoalApi" ],
        "description" : "With this method the fields of one specific goal can be changed. For this the goal id, the API key of\r\nthe specific organisation, the name of the field and the new field's value are needed.\r\nTo modify the name of the goal the new string has to be transfered with the attribute field.\r\nA list with role-ids separated by commas can be passed to define new roles which a player has to be allowed\r\nto complete the goal. By passing an id of another rule a new goal rule is associated with the goal.\r\nTo modify if a goal is repeatable or can be completed as a group the values \"1\" or \"0\" or alternatively\r\n\"true\" and \"false\" can be passed.\r\nIt is also checked, if all ids are a positive number otherwise a message for an invalid number is returned.\r\nIf the API key is not valid an analogous message is returned.",
        "operationId" : "resource_GoalApi_changeGoalAttributes_PUT",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required id of the goal which should be modified."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this role belongs to."
          },
          {
            "name" : "attribute",
            "in" : "query",
            "type" : "string",
            "description" : "The attribute which should be modified. This parameter is required.\r\nThe following names of attributes can be used to change the associated field:\r\n\"goalName\", \"isRepeateable\", \"isGroupGoal\", \"rewardId\" and \"roles\"."
          },
          {
            "name" : "value",
            "in" : "query",
            "type" : "string",
            "description" : "The new value of the attribute."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_goal"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/goal/{id}" : {
      "get" : {
        "tags" : [ "GoalApi" ],
        "description" : "Gets the {@link GoalRule} object which is associated with the goal. It is identified by the passed id and\r\nthe API key. If the API key is not valid an analogous message is returned. It is also checked, if the\r\nid is a positive number otherwise a message for an invalid number is returned..",
        "operationId" : "resource_GoalApi_getGoal_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required integer which uniquely identify the {@link Goal}."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this goal belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_goal"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
      ,
      "delete" : {
        "tags" : [ "GoalApi" ],
        "description" : "Removes a specific goal from the data base which is identified by the given id and the\r\nAPI key. If the API key is not valid an analogous message is returned. It is also checked,\r\nif the id is a positive number otherwise a message for an invalid number is returned.",
        "operationId" : "resource_GoalApi_deleteGoal_DELETE",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required integer which uniquely identify the {@link Goal}."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this goal belongs to."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_goal"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/goal/*" : {
      "get" : {
        "tags" : [ "GoalApi" ],
        "description" : "Returns all goals which are associated with the given API key and so are belonging to the organisation.\r\nThe players of one organisaiton can try to complete one these goals.\r\nIf the API key is not valid an analogous message is returned.",
        "operationId" : "resource_GoalApi_getGoals_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this goal belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_goal"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/marketPlace/markets/*" : {
      "get" : {
        "tags" : [ "MarketPlaceApi" ],
        "description" : "Gets all marketplaces of an organisation with all current offers.",
        "operationId" : "resource_MarketPlaceApi_getAllMarketPlaces_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this goal belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_marketplace"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/marketPlace/offer/{offerId}" : {
      "get" : {
        "tags" : [ "MarketPlaceApi" ],
        "description" : "With this method one specific offer can be requested. If the API key is not valid\r\nan analogous message is returned. It is also checked, if the id is a positive number otherwise a message\r\nfor an invalid number is returned.",
        "operationId" : "resource_MarketPlaceApi_getOffer_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "offerId",
            "in" : "path",
            "type" : "string",
            "description" : "The id of the offer that should be changed. This parameter is required."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which the offer belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_offer"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/marketPlace/{playerId}/recentOffersRoleFiltered" : {
      "get" : {
        "tags" : [ "MarketPlaceApi" ],
        "description" : "Gets all available offers for a player ordered by date, recent first. This can be used if a player wants to see\r\nall recent offers she/he can complete.\r\nIf the API key is not valid an analogous message is returned. It is also checked, if the player id is\r\na positive number otherwise a message for an invalid number is returned.",
        "operationId" : "resource_MarketPlaceApi_getRecentOffersRoleFiltered_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "playerId",
            "in" : "path",
            "type" : "string",
            "description" : "The player whose roles are checked. This parameter is required."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which the player belongs to."
          },
          {
            "name" : "count",
            "in" : "query",
            "default" : "10",
            "type" : "string",
            "description" : "Optionally the count of offers that should be returned can be passed. The default value is 10."
          },
          {
            "name" : "marketPlaceId",
            "in" : "query",
            "type" : "string",
            "description" : "The marketplace whose offers are filtered."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_offer"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/marketPlace/offers/{taskId}/market/*" : {
      "get" : {
        "tags" : [ "MarketPlaceApi" ],
        "description" : "This method returns a list with all offers which contain a specific task and the id of the\r\noffer's marketplace.",
        "operationId" : "resource_MarketPlaceApi_getAllMarketPlaceOffersByTask_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "taskId",
            "in" : "path",
            "type" : "string",
            "description" : "The id of the task, which all returned offers contain."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which the offer belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_offer"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/marketPlace/{playerId}/getOffers" : {
      "get" : {
        "tags" : [ "MarketPlaceApi" ],
        "description" : "Gets all offers a specific player has created (independent of the marketplace). If the API key is not valid\r\nan analogous message is returned. It is also checked, if the id is a positive number otherwise a message\r\nfor an invalid number is returned.",
        "operationId" : "resource_MarketPlaceApi_getPlayerOffers_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "playerId",
            "in" : "path",
            "type" : "string",
            "description" : "The player whose created offers are returned."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which the player belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_offer"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/marketPlace/offers/*" : {
      "get" : {
        "tags" : [ "MarketPlaceApi" ],
        "description" : "Gets all offers of an organisation (independent of the marketplace). If the API key is not valid\r\nan analogous message is returned. It is also checked, if the id is a positive number otherwise a message\r\nfor an invalid number is returned.",
        "operationId" : "resource_MarketPlaceApi_getAllOffers_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which the offers belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_offer"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/marketPlace/{playerId}/bid/{offerId}" : {
      "post" : {
        "tags" : [ "MarketPlaceApi" ],
        "description" : "With this method a player makes a bid to an offer. So a new bid is created and therefore an id is\r\ngenerated. The id of the player is needed to indicate who has made the bid and id of the offer to identify\r\nfor which she/he has bidden. The prize of the bid is needed to add it to the current amount of coins so\r\nthe offer's prize is raised.",
        "operationId" : "resource_MarketPlaceApi_giveABid_POST",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "offerId",
            "in" : "path",
            "type" : "string",
            "description" : "The offer the player has bidden for. This parameter is required."
          },
          {
            "name" : "playerId",
            "in" : "path",
            "type" : "string",
            "description" : "The player who has done the bid. This parameter is required."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which the player belongs to."
          },
          {
            "name" : "prize",
            "in" : "query",
            "type" : "string",
            "description" : "The amount of the bid. This is added to the current prize. This parameter is required."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_bid"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/marketPlace/offer" : {
      "post" : {
        "tags" : [ "MarketPlaceApi" ],
        "description" : "Creates a new group of offer and so the method generates the offer-id. The organisation's API key is\r\nmandatory otherwise a warning with the hint for a non valid API key is returned.\r\nBy the creation the name, the prize which represents the initial bid and id of the task the offer\r\nis associated should be passed.\r\nAdditionally the id of the player who creates the offer and the id of the marketplace should be passed.\r\nOptionally it can be defined when the offer ends and until the task should be done.",
        "operationId" : "resource_MarketPlaceApi_createOffer_POST",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this offer belongs to."
          },
          {
            "name" : "deadLine",
            "in" : "query",
            "type" : "string",
            "description" : "The point of time until the offer is valid. The format of the values is\r\nyyyy-MM-dd HH:mm."
          },
          {
            "name" : "endDate",
            "in" : "query",
            "type" : "string",
            "description" : "The date and time how long the offer is available on the market. The format of the values is\r\nyyyy-MM-dd HH:mm."
          },
          {
            "name" : "marketId",
            "in" : "query",
            "type" : "string",
            "description" : "The id of the marketplace where the offer should be available."
          },
          {
            "name" : "name",
            "in" : "query",
            "type" : "string",
            "description" : "The name of the offer. This parameter is required."
          },
          {
            "name" : "playerId",
            "in" : "query",
            "type" : "string",
            "description" : "The id of the player who created the offer. This parameter is required."
          },
          {
            "name" : "prize",
            "in" : "query",
            "type" : "string",
            "description" : "The initial bid of the offer. This is the prize a player can earn."
          },
          {
            "name" : "taskId",
            "in" : "query",
            "type" : "string",
            "description" : "The id of the task the offer is associated with. This parameter is required."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_offer"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/marketPlace/{id}/market" : {
      "delete" : {
        "tags" : [ "MarketPlaceApi" ],
        "description" : "Removes the marketplace with the assigned id from data base. It is checked, if the passed id is a\r\npositive number otherwise a message for an invalid number is returned. If the API key is not\r\nvalid an analogous message is returned.",
        "operationId" : "resource_MarketPlaceApi_deleteMarketPlace_DELETE",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required path parameter as integer which uniquely identify the {@link MarketPlace}."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this goal belongs to."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_marketplace"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/marketPlace/offers/role" : {
      "get" : {
        "tags" : [ "MarketPlaceApi" ],
        "description" : "Gets all offers which are amongst others for a specific role (depending of the marketplace). If the API key is not valid\r\nan analogous message is returned. It is also checked, if the id is a positive number otherwise a message\r\nfor an invalid number is returned.",
        "operationId" : "resource_MarketPlaceApi_getAllOffersForRole_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which the offers belongs to."
          },
          {
            "name" : "count",
            "in" : "query",
            "type" : "string",
            "description" : "Optionally the count of offers that should be returned can be passed. If no value is passed\r\nall offers of the marketplace are returned."
          },
          {
            "name" : "marketPlaceId",
            "in" : "query",
            "type" : "string",
            "description" : "The marketplace whose offers should be considered."
          },
          {
            "name" : "roleId",
            "in" : "query",
            "type" : "string",
            "description" : "The roles id for which the offers are searched."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_offer"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/marketPlace/{id}/bids" : {
      "get" : {
        "tags" : [ "MarketPlaceApi" ],
        "description" : "Gets a list of all bids which was made for a specific offer.\r\nIf the API key is not valid an analogous message is returned. It is also checked, if the offer id is a\r\npositive number otherwise a message for an invalid number is returned.",
        "operationId" : "resource_MarketPlaceApi_getBids_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "The offer whose bids are returned. This parameter is required."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which the offer belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_bid"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/marketPlace/{id}/attributes" : {
      "put" : {
        "tags" : [ "MarketPlaceApi" ],
        "description" : "With this method the fields of an Offer can be changed. For this the id of the offer, the API key of\r\nthe specific organisation, the name of the field and the new value are needed.\r\n\r\nTo modify the name the new String has to be passed with the attribute field. A new date and time as\r\nLocalDateTime for the deadline or enddate can also be passed. The format of these values is\r\nyyyy-MM-dd HH:mm. A new list of players can be passed when their ids are separated by commas.\r\nIf the API key is not valid an analogous message is returned. It is also checked, if\r\nthe ids are a positive number otherwise a message for an invalid number is returned.",
        "operationId" : "resource_MarketPlaceApi_changeOfferAttributes_PUT",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "The id of the offer that should be changed. This parameter is required."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which the offer belongs to."
          },
          {
            "name" : "attribute",
            "in" : "query",
            "type" : "string",
            "description" : "The name of the attribute which should be modified. This parameter is required.\r\nThe following names of attributes can be used to change the associated field:\r\n\"name\", \"deadline\" and \"enddate\"."
          },
          {
            "name" : "value",
            "in" : "query",
            "type" : "string",
            "description" : "The new value of the attribute. This parameter is required."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_offer"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/marketPlace/market" : {
      "post" : {
        "tags" : [ "MarketPlaceApi" ],
        "description" : "Creates a new market place for an organisation which is identified by the API key. So the method generates the\r\nmarketplace-id. But this is only possible if no marketplace exists yet.\r\nThe organisation's API key is mandatory otherwise a warning with the hint for a non valid API key is\r\nreturned.",
        "operationId" : "resource_MarketPlaceApi_createMarketPlace_POST",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this marketplace belongs to."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_marketplace"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/marketPlace/recentOffers" : {
      "get" : {
        "tags" : [ "MarketPlaceApi" ],
        "description" : "Gets all offers of the marketplace ordered by date, recent first.\r\nIf the API key is not valid an analogous message is returned. It is also checked, if the player id is\r\na positive number otherwise a message for an invalid number is returned.",
        "operationId" : "resource_MarketPlaceApi_getRecentOffers_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which the player belongs to."
          },
          {
            "name" : "count",
            "in" : "query",
            "default" : "10",
            "type" : "string",
            "description" : "Optionally the count of offers that should be returned can be passed. The default value is 10."
          },
          {
            "name" : "marketPlaceId",
            "in" : "query",
            "type" : "string",
            "description" : "The marketplace whose offers are filtered."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_offer"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/marketPlace/{playerId}/getOfferRole" : {
      "get" : {
        "tags" : [ "MarketPlaceApi" ],
        "description" : "Gets the allowed offers for a specific player. The player is identified by her/his passed id and API key.\r\nThe offers are filtered by the roles a player has so only offers are in the returned list which are\r\nassociated with at least one role a player has.\r\nIf the API key is not valid an analogous message is returned. It is also checked, if the ids are a\r\npositive number otherwise a message for an invalid number is returned.",
        "operationId" : "resource_MarketPlaceApi_getOffersByPlayerRole_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "playerId",
            "in" : "path",
            "type" : "string",
            "description" : "The player whose roles are checked. This parameter is required."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this player belongs to."
          },
          {
            "name" : "count",
            "in" : "query",
            "default" : "10",
            "type" : "string",
            "description" : "Optionally the count of offers that should be returned can be passed."
          },
          {
            "name" : "marketPlaceId",
            "in" : "query",
            "type" : "string",
            "description" : "The marketplace whose offers are filtered."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_offer"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/marketPlace/{playerId}/highestOffersRoleFiltered" : {
      "get" : {
        "tags" : [ "MarketPlaceApi" ],
        "description" : "Gets all available offers for a player ordered by prize, highest prize first. This can be used if a player wants to see\r\nall offers she/he can complete and get the highest prize.\r\nIf the API key is not valid an analogous message is returned. It is also checked, if the player id is\r\na positive number otherwise a message for an invalid number is returned.",
        "operationId" : "resource_MarketPlaceApi_getHighestOffersRoleFiltered_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "playerId",
            "in" : "path",
            "type" : "string",
            "description" : "The player whose roles are checked. This parameter is required."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which the player belongs to."
          },
          {
            "name" : "count",
            "in" : "query",
            "default" : "10",
            "type" : "string",
            "description" : "Optionally the count of offers that should be returned can be passed. The default value is 10."
          },
          {
            "name" : "marketPlaceId",
            "in" : "query",
            "type" : "string",
            "description" : "The marketplace whose offers are filtered."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_offer"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/marketPlace/offers/{taskId}/*" : {
      "get" : {
        "tags" : [ "MarketPlaceApi" ],
        "description" : "This method returns a list with all ids of offers that contain a specific task. This is irrespective\r\nof the marketplace.",
        "operationId" : "resource_MarketPlaceApi_getAllOffersByTask_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "taskId",
            "in" : "path",
            "type" : "string",
            "description" : "The id of the task, which all returned offers contain."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which the offer belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "type" : "number"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/marketPlace/offers/market/{marketPlaceId}/*" : {
      "get" : {
        "tags" : [ "MarketPlaceApi" ],
        "description" : "Gets all offers of an organisation (depending of the marketplace). If the API key is not valid\r\nan analogous message is returned. It is also checked, if the id is a positive number otherwise a message\r\nfor an invalid number is returned.",
        "operationId" : "resource_MarketPlaceApi_getAllOffersOfMarketPlace_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "marketPlaceId",
            "in" : "path",
            "type" : "string",
            "description" : "The marketplace whose offers should be considered."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which the offers belongs to."
          },
          {
            "name" : "count",
            "in" : "query",
            "type" : "string",
            "description" : "Optionally the count of offers that should be returned can be passed. If no value is passed\r\nall offers of the marketplace are returned."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_offer"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/marketPlace/{id}/offer" : {
      "delete" : {
        "tags" : [ "MarketPlaceApi" ],
        "description" : "Removes the offer with the assigned id from the marketPlace and with it all associated bids.\r\nEvery player who has mad a bid to this offer gets her/his amount of coins back.\r\nIt is checked, if the passed id is a positive number otherwise a message for an invalid number\r\nis returned. If the API key is not\r\nvalid an analogous message is returned.",
        "operationId" : "resource_MarketPlaceApi_deleteOffer_DELETE",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "The offer which should be removed. This parameter is required."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which the offer belongs to."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_offer"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/marketPlace/highestOffers" : {
      "get" : {
        "tags" : [ "MarketPlaceApi" ],
        "description" : "Gets all offers of a marketplace ordered by prize, highest prize first.\r\nIf the API key is not valid an analogous message is returned. It is also checked, if the player id is\r\na positive number otherwise a message for an invalid number is returned.",
        "operationId" : "resource_MarketPlaceApi_getHighestOffers_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which the player belongs to."
          },
          {
            "name" : "count",
            "in" : "query",
            "default" : "10",
            "type" : "string",
            "description" : "Optionally the count of offers that should be returned can be passed. The default value is 10."
          },
          {
            "name" : "marketPlaceId",
            "in" : "query",
            "type" : "string",
            "description" : "The marketplace whose offers are filtered."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_offer"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/organisation/addManager" : {
      "post" : {
        "tags" : [ "OrganisationApi" ],
        "description" : "Adds a new developer to the organisation's list of manager. The email address and\r\npassword are mandatory for authentication otherwise a warning with the hint for\r\nwrong credentials is returned. If the manager who should be added is already in the\r\nlist, a message is given with the hint that she/he is already added.\r\nIn the response the account's password isn't returned because of security reasons.",
        "operationId" : "resource_OrganisationApi_addManager_POST",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The API key of the organisation to which the manager belongs to."
          },
          {
            "name" : "firstName",
            "in" : "query",
            "type" : "string",
            "description" : "Optionally the first name of the Account's owner can be set."
          },
          {
            "name" : "lastName",
            "in" : "query",
            "type" : "string",
            "description" : "Optionally the last name of the Account's owner can be set."
          },
          {
            "name" : "manager",
            "in" : "query",
            "type" : "string",
            "description" : "The required valid email address for the new manager."
          },
          {
            "name" : "managerPW",
            "in" : "query",
            "type" : "string",
            "description" : "The required new password of the new maanger."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_organisation"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/organisation" : {
      "post" : {
        "tags" : [ "OrganisationApi" ],
        "description" : "Creates a new organisation. The email address and password of one Account are used\r\nto connect it with this organisation. So the email address and password are mandatory for\r\nauthentication otherwise a warning with the hint for wrong credentials is returned.\r\nAll further Accounts which should be associated to this organisation are added with the\r\nmethod addManager.\r\nIn the response the account's password isn't returned because of security reasons.",
        "operationId" : "resource_OrganisationApi_create_POST",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "password",
            "in" : "header",
            "type" : "string",
            "description" : "Required header parameter associated with the email address."
          },
          {
            "name" : "email",
            "in" : "query",
            "type" : "string",
            "description" : "The required valid email address."
          },
          {
            "name" : "name",
            "in" : "query",
            "type" : "string",
            "description" : "The name of the developer or the manager of the account."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_organisation"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/organisation/{id}" : {
      "get" : {
        "tags" : [ "OrganisationApi" ],
        "description" : "Returns a specific organisation which id is equal to the transfered path parameter.\r\nAdditionally the email address and the associated password are mandatory and have to be\r\ncorrect otherwise an exception is returned that the given credentials are wrong.\r\nIn the response the account's password isn't returned because of security reasons.",
        "operationId" : "resource_OrganisationApi_get_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "password",
            "in" : "header",
            "type" : "string",
            "description" : "Required header parameter to connect it with the given\r\nemail address."
          },
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "The path parameter of the organisation, that should be returned."
          },
          {
            "name" : "email",
            "in" : "query",
            "type" : "string",
            "description" : "The valid email address."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_organisation"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/organisation/{id}/generateapikey" : {
      "put" : {
        "tags" : [ "OrganisationApi" ],
        "description" : "Generates an API key for the given organisation which matches the id, email address and the\r\nassociated password. Otherwise an exception is returned that the given credentials are wrong.\r\nIf the API key field is already set the method resets it and replaced it with the new generated\r\nAPI key.\r\nIn the response the account's password isn't returned because of security reasons.",
        "operationId" : "resource_OrganisationApi_generateApiKey_PUT",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "password",
            "in" : "header",
            "type" : "string",
            "description" : "Required header parameter to connect it with the given email address."
          },
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "The path parameter of the organisation, for which the API key should be generated."
          },
          {
            "name" : "email",
            "in" : "query",
            "type" : "string",
            "description" : "The valid email address."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_organisation"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/organisation/*" : {
      "get" : {
        "tags" : [ "OrganisationApi" ],
        "description" : "Returns all organisations which are associated with the combination of the two\r\nquery parameters. Otherwise an exception is sent that the given credentials are wrong.\r\nIn the response the account's password isn't returned because of security reasons.",
        "operationId" : "resource_OrganisationApi_get_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "password",
            "in" : "header",
            "type" : "string",
            "description" : "Required header parameter to connect it with the given email address."
          },
          {
            "name" : "email",
            "in" : "query",
            "type" : "string",
            "description" : "A required valid email address."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_organisation"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/player/{id}/tasks" : {
      "get" : {
        "tags" : [ "PlayerApi" ],
        "description" : "Returns a list of all already finished tasks associated with the player of the passed\r\nid. If the API key is not valid an analogous message is returned. It is also checked,\r\nif the player id is a positive number otherwise a message for an invalid number is\r\nreturned.",
        "operationId" : "resource_PlayerApi_getPlayerFinishedTasks_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required path parameter as integer which uniquely identify the {@link Player}."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this player belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_finishedtask"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/player/reference" : {
      "get" : {
        "tags" : [ "PlayerApi" ],
        "description" : "Returns the player that matched to a specific reference field in a specific organisation.\r\nIf the reference field dosen't match to a player an API Error is returned with the\r\nmessage that such a player dosen't exist\r\nIf the API key is not valid an analogous message is returned.",
        "operationId" : "resource_PlayerApi_getPlayerByReference_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which the player belongs to."
          },
          {
            "name" : "reference",
            "in" : "query",
            "type" : "string",
            "description" : "The reference to which the player should be returned."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_player"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/player/{id}/coins" : {
      "get" : {
        "tags" : [ "PlayerApi" ],
        "description" : "Returns the current amount of coins associated with the player of the passed id. If\r\nthe API key is not valid an analogous message is returned. It is also checked, if\r\nthe player id is a positive number otherwise a message for an invalid number is\r\nreturned.",
        "operationId" : "resource_PlayerApi_getPlayerCoins_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required path parameter as integer which uniquely identify the {@link Player}."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this player belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "number"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/player/{id}/goals" : {
      "get" : {
        "tags" : [ "PlayerApi" ],
        "description" : "Returns a list of all already finished goals of a specific player.\r\nIf the API key is not valid an analogous message is returned. It is also checked, if the\r\nplayer id is a positive number otherwise a message for an invalid number is returned.",
        "operationId" : "resource_PlayerApi_getPlayerFinishedGoals_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required path parameter as integer which uniquely identify the {@link Player}."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this player belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_finishedgoal"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/player/{id}/rewards" : {
      "get" : {
        "tags" : [ "PlayerApi" ],
        "description" : "Returns a list of all already awarded rewards associated with the player of the given id.\r\nIf the API key is not valid an analogous message is returned. It is also checked, if the\r\nplayer id is a positive number otherwise a message for an invalid number is returned.",
        "operationId" : "resource_PlayerApi_getRewards_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required path parameter as integer which uniquely identify the {@link Player}."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this player belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_permanentreward"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/player/{id}/activate" : {
      "put" : {
        "tags" : [ "PlayerApi" ],
        "description" : "Activates a player with the associated id and API key so this player is allowed to complete\r\ntasks.\r\nIf the API key is not valid an analogous message is returned. It is also checked, if the id\r\nis a positive number otherwise a message for an invalid number is returned.\r\nIn the response the player's password and avatar isn't returned because of security\r\nreasons respectively overhead.",
        "operationId" : "resource_PlayerApi_activate_PUT",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required path parameter as integer which uniquely identify the {@link Player}."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this player belongs to."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_player"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/player" : {
      "post" : {
        "tags" : [ "PlayerApi" ],
        "description" : "Creates a new player and so the method generates the player-id. The organisation's API key\r\nis mandatory otherwise a warning with the hint for a non valid API key is returned.\r\nThe player can choose a password for her/his account. By the creation some initial\r\nroles can be set which can also be changed at a later point of time. By default every\r\ncreated player is active until she/he is deactivated. It is checked, if the id of the\r\nroles are positive numbers otherwise a message for the invalid number is returned.\r\nIn the response the player's password and avatar isn't returned because of security\r\nreasons respectively overhead.",
        "operationId" : "resource_PlayerApi_create_POST",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this player should belong to."
          },
          {
            "name" : "avatar",
            "in" : "query",
            "type" : "string",
            "description" : "The url of the avatar. The image's size can be up to 3 MB."
          },
          {
            "name" : "nickname",
            "in" : "query",
            "type" : "string",
            "description" : "The query parameter of the player's nickname. This field must not be null."
          },
          {
            "name" : "password",
            "in" : "query",
            "type" : "string",
            "description" : "The query parameter for the player's password. This field must not be null."
          },
          {
            "name" : "reference",
            "in" : "query",
            "type" : "string",
            "description" : "Optionally the player's reference as string map to a customers user\r\nidentifier."
          },
          {
            "name" : "roleIds",
            "in" : "query",
            "default" : "null",
            "type" : "string",
            "description" : "Optionally a list of role ids can be passed that a player has. These ids are\r\nseparated by commas."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_player"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/player/{id}/contacts" : {
      "put" : {
        "tags" : [ "PlayerApi" ],
        "description" : "Adds one or more contacts to the current player's contact list. A contact represents another\r\nplayer in the gamification application. All ids are checked, if they are positive numbers\r\notherwise a message for an invalid number is returned. If the API key is not valid an analogous\r\nmessage is returned.\r\nIn the response the player's password and avatar isn't returned because of security\r\nreasons respectively overhead.",
        "operationId" : "resource_PlayerApi_addContacts_PUT",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required path parameter as integer which uniquely identify the {@link Player}."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this player belongs to."
          },
          {
            "name" : "contactIds",
            "in" : "query",
            "type" : "string",
            "description" : "The list of player ids which should be added to the contact list. These ids are\r\nseparated by commas."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_player"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
      ,
      "delete" : {
        "tags" : [ "PlayerApi" ],
        "description" : "Removes one or more contacts from the currents player's contact list. A contact represents another\r\nplayer in the gamification application. All ids are checked, if they are positive numbers\r\notherwise a message for an invalid number is returned. If the API key is not valid an analogous\r\nmessage is returned.\r\nIn the response the player's password and avatar isn't returned because of security\r\nreasons respectively overhead.",
        "operationId" : "resource_PlayerApi_deleteContact_DELETE",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required path parameter as integer which uniquely identify the {@link Player}."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this player belongs to."
          },
          {
            "name" : "contactIds",
            "in" : "query",
            "type" : "string",
            "description" : "The list of player ids which should be added to the contact list. These ids are\r\nseparated by commas and must not be null."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_player"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
      ,
      "get" : {
        "tags" : [ "PlayerApi" ],
        "description" : "Gets a list of all contacts a player has.\r\nIn the response the players' password and avatar isn't returned because of security\r\nreasons respectively overhead.",
        "operationId" : "resource_PlayerApi_contacts_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required path parameter as integer which uniquely identify the Player."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this player belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_player"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/player/{id}/badges" : {
      "get" : {
        "tags" : [ "PlayerApi" ],
        "description" : "Returns a list of all awarded badges associated with the player of the passed id.\r\nIf the API key is not valid an analogous message is returned. It is also checked,\r\nif the player id is a positive number otherwise a message for an invalid number is\r\nreturned.",
        "operationId" : "resource_PlayerApi_getPlayerBadges_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required path parameter as integer which uniquely identify the {@link Player}."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this player belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_badge"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/player/{id}/attributes" : {
      "put" : {
        "tags" : [ "PlayerApi" ],
        "description" : "With this method the fields of one specific player can be changed. For\r\nthis the player id, the API key of the specific organisation, the\r\nname of the field and the new field's value are needed.\r\nTo modify the password, the reference and the nickname the new string has\r\nto be transfered with the attribute field. For a new avatar the path of\r\nnew image is needed in the attribute parameter. The format of the image\r\nhas to be .jpg or .png. A new list of roles and contacts can be transfered\r\nwhen their ids are separated by commas.\r\nIf the API key is not valid an analogous message is returned. It is\r\nalso checked, if the id is a positive number otherwise a message for\r\nan invalid number is returned.\r\nIn the response the player's password and avatar isn't returned because of security\r\nreasons respectively overhead.",
        "operationId" : "resource_PlayerApi_changeAttributes_PUT",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required integer which uniquely identify the {@link Player}."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this player belongs to."
          },
          {
            "name" : "attribute",
            "in" : "query",
            "type" : "string",
            "description" : "The name of the attribute which should be modified. This\r\nparameter is required. The following names of attributes can\r\nbe used to change the associated field:\r\n\"password\", \"reference\", \"nickname\", \"playerRoles\", \"contact\"\r\nand \"avatar\"."
          },
          {
            "name" : "value",
            "in" : "query",
            "type" : "string",
            "description" : "The new value of the attribute. This parameter is required."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_player"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/player/{id}" : {
      "get" : {
        "tags" : [ "PlayerApi" ],
        "description" : "This method gets one specific player who is identified by the given id and the API key.\r\nIf the API key is not valid an analogous message is returned. It is also checked, if the\r\nid is a positive number otherwise a message for an invalid number is returned.\r\nIn the response the player's password and avatar isn't returned because of security\r\nreasons respectively overhead.",
        "operationId" : "resource_PlayerApi_get_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required integer as path parameter which uniquely identify the {@link Player}."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this player belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_player"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
      ,
      "delete" : {
        "tags" : [ "PlayerApi" ],
        "description" : "Removes a specific player from the data base who is identified by the given id and the\r\nAPI key. If the API key is not valid an analogous message is returned. It is also checked,\r\nif the id is a positive number otherwise a message for an invalid number is returned.\r\nIn the response the player's password and avatar isn't returned because of security\r\nreasons respectively overhead.",
        "operationId" : "resource_PlayerApi_delete_DELETE",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required integer as path parameter which uniquely identify the {@link Player}."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this role belongs to."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_player"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/player/{id}/achievements" : {
      "get" : {
        "tags" : [ "PlayerApi" ],
        "description" : "Returns a list of all awarded achievements associated with the player of the passed\r\nid. If the API key is not valid an analogous message is returned. It is also checked,\r\nif the player id is a positive number otherwise a message for an invalid number is\r\nreturned.",
        "operationId" : "resource_PlayerApi_getPlayerAchievements_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required path parameter as integer which uniquely identify the {@link Player}."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this player belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_achievement"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/player/*" : {
      "get" : {
        "tags" : [ "PlayerApi" ],
        "description" : "This method collects all players associated with the given API key and so all players who\r\nbelong to the associated organisation. If the API key is not valid an analogous message\r\nis returned.\r\nIn the response the players' password and avatar isn't returned because of security\r\nreasons respectively overhead.",
        "operationId" : "resource_PlayerApi_getAll_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_player"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/player/{id}/roles" : {
      "put" : {
        "tags" : [ "PlayerApi" ],
        "description" : "Adds one or more roles to the current player's list of roles. All ids are checked, if they are\r\npositive numbers otherwise a message for an invalid number is returned. If the API key is not\r\nvalid an analogous message is returned.\r\nIn the response the player's password and avatar isn't returned because of security\r\nreasons respectively overhead.",
        "operationId" : "resource_PlayerApi_addRoles_PUT",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required path parameter as integer which uniquely identify the {@link Player}."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this player belongs to."
          },
          {
            "name" : "roleIds",
            "in" : "query",
            "type" : "string",
            "description" : "The list of role ids which should be added to the contact list. These ids are\r\nseparated by commas."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_player"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/player/{id}/points" : {
      "get" : {
        "tags" : [ "PlayerApi" ],
        "description" : "Returns the current amount of points associated with the player of the passed id. If\r\nthe API key is not valid an analogous message is returned. It is also checked, if\r\nthe player id is a positive number otherwise a message for an invalid number is\r\nreturned.",
        "operationId" : "resource_PlayerApi_getPlayerPoints_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required path parameter as integer which uniquely identify the {@link Player}."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this player belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "number"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/player/{id}/reference" : {
      "get" : {
        "tags" : [ "PlayerApi" ],
        "description" : "Returns the field of the reference attribute of the player.\r\nThis can be used, when the player's id is known and the player should be\r\nmatched with a user of the application.\r\nIf the API key is not valid an analogous message is returned. It is also checked,\r\nif the player id is a positive number otherwise a message for an invalid number\r\nis returned.",
        "operationId" : "resource_PlayerApi_getPlayerReference_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "The id of the player, whose reference field is returned."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this player belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "string"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/player/{id}/groups" : {
      "get" : {
        "tags" : [ "PlayerApi" ],
        "description" : "Gets a list of all groups in which a player is a member.",
        "operationId" : "resource_PlayerApi_playerGroups_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required path parameter as integer which uniquely identify the Player."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this player belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_player"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/player/{id}/avatar" : {
      "get" : {
        "tags" : [ "PlayerApi" ],
        "description" : "Returns the avatar which is associated with a player. To identify the player her/his id and\r\nthe API key is needed to which the player belongs to.\r\nThe byte array of the avatar image is Base64-encoded to ensure that the data is transmitted\r\ncorrectly as String.\r\nIf the API key is not valid an analogous message is returned. It is also checked, if the id\r\nis a positive number otherwise a message for an invalid number is returned.",
        "operationId" : "resource_PlayerApi_getAvatar_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required path parameter as integer which uniquely identify the {@link Player}."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this player belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "string"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/player/{id}/deactivate" : {
      "put" : {
        "tags" : [ "PlayerApi" ],
        "description" : "Deactivates a player with the associated id and API key. So this player cannot complete a task\r\nuntil she/he is set active again.\r\nIf the API key is not valid an analogous message is returned. It is also checked, if the id\r\nis a positive number otherwise a message for an invalid number is returned.\r\nIn the response the player's password and avatar isn't returned because of security\r\nreasons respectively overhead.",
        "operationId" : "resource_PlayerApi_deactivate_PUT",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required path parameter as integer which uniquely identify the {@link Player}."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this player belongs to."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_player"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/playerGroup/{id}/points" : {
      "get" : {
        "tags" : [ "PlayerGroupApi" ],
        "description" : "Returns the current amount of points associated with the group of players of the passed id. If\r\nthe API key is not valid an analogous message is returned. It is also checked, if\r\nthe group id is a positive number otherwise a message for an invalid number is\r\nreturned.",
        "operationId" : "resource_PlayerGroupApi_getPlayerGroupPoints_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required path parameter as integer which uniquely identify the {@link PlayerGroup}."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this group of players belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "number"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/playerGroup/{id}/addPlayers" : {
      "put" : {
        "tags" : [ "PlayerGroupApi" ],
        "description" : "Adds one or more players to a group of players. All ids are checked, if they are positive numbers\r\notherwise a message for an invalid number is returned. If the API key is not valid an analogous\r\nmessage is returned.",
        "operationId" : "resource_PlayerGroupApi_addPlayers_PUT",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required path parameter as integer which uniquely identify the {@link PlayerGroup}."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this group of players belongs to."
          },
          {
            "name" : "playerIds",
            "in" : "query",
            "type" : "string",
            "description" : "The list of player ids which should be added to the contact list. These ids are\r\nseparated by commas."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_player"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/playerGroup/{id}/coins" : {
      "get" : {
        "tags" : [ "PlayerGroupApi" ],
        "description" : "Returns the current amount of coins associated with the group of players of the passed id. If\r\nthe API key is not valid an analogous message is returned. It is also checked, if\r\nthe group id is a positive number otherwise a message for an invalid number is\r\nreturned.",
        "operationId" : "resource_PlayerGroupApi_getPlayerGroupCoins_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required path parameter as integer which uniquely identify the {@link PlayerGroup}."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this group of players belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "number"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/playerGroup/{id}/rewards" : {
      "get" : {
        "tags" : [ "PlayerGroupApi" ],
        "description" : "Returns a list of all already awarded rewards associated with the group of players of the\r\ngiven id.\r\nIf the API key is not valid an analogous message is returned. It is also checked, if the\r\ngroup id is a positive number otherwise a message for an invalid number is returned.",
        "operationId" : "resource_PlayerGroupApi_getPlayerGroupRewards_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required path parameter as integer which uniquely identify the {@link PlayerGroup}."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this group of players belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_permanentreward"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/playerGroup/{id}/removePlayers" : {
      "put" : {
        "tags" : [ "PlayerGroupApi" ],
        "description" : "Removes one or more players from a group of players. All ids are checked, if they are positive numbers\r\notherwise a message for an invalid number is returned. If the API key is not valid an analogous\r\nmessage is returned.",
        "operationId" : "resource_PlayerGroupApi_removePlayers_PUT",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required path parameter as integer which uniquely identify the {@link PlayerGroup}."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this group of players belongs to."
          },
          {
            "name" : "playerIds",
            "in" : "query",
            "type" : "string",
            "description" : "The list of player ids which should be removed from the contact list. These ids are\r\nseparated by commas."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_player"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/playerGroup" : {
      "post" : {
        "tags" : [ "PlayerGroupApi" ],
        "description" : "Creates a new group of players and so the method generates the PlayerGroup-id.\r\nThe organisation's API key is mandatory otherwise a warning with the hint for a\r\nnon valid API key is returned.\r\nBy the creation the player-ids of the players are passed who should be assigned\r\nto this group. A PlayerGroup can has a name and optional a logo which are query\r\nparameters. It is checked, if the ids of the players are positive numbers otherwise\r\na message for the invalid number is returned.",
        "operationId" : "resource_PlayerGroupApi_createNewGroup_POST",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this group of players belongs to."
          },
          {
            "name" : "logoPath",
            "in" : "query",
            "type" : "string",
            "description" : "Optionally a group logo as a HTTP reference can be passed.\r\nThe image's size can be up to 3 MB."
          },
          {
            "name" : "name",
            "in" : "query",
            "type" : "string",
            "description" : "The name of the group. This parameter is required."
          },
          {
            "name" : "playerIds",
            "in" : "query",
            "type" : "string",
            "description" : "A list of player-ids can be passed that a group has. These ids are\r\nseparated by commas. This parameter is required."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_playergroup"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/playerGroup/{id}/attributes" : {
      "put" : {
        "tags" : [ "PlayerGroupApi" ],
        "description" : "With this method the fields of a PlayerGroup can be changed. For this the id of the\r\ngroup, the API key of the specific organisation, the name of the field and the new\r\nvalue are needed.\r\nTo modify the name the new String has to be passed with the attribute field. For a\r\nnew logo the path of new image is needed in the attribute parameter. The format of\r\nthe image has to be .jpg or .png. A new list of players can be passed when their ids\r\nare separated by commas.\r\nIf the API key is not valid an analogous message is returned. It is also checked, if\r\nthe ids are a positive number otherwise a message for an invalid number is returned.",
        "operationId" : "resource_PlayerGroupApi_changePlayerGroupAttributes_PUT",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required integer which uniquely identify the {@link PlayerGroup}."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this role belongs to."
          },
          {
            "name" : "attribute",
            "in" : "query",
            "type" : "string",
            "description" : "The name of the attribute which should be modified. This parameter is\r\nrequired. The following names of attributes can be used to change the\r\nassociated field:\r\n\"name\", \"playerIds\" and \"logo\"."
          },
          {
            "name" : "value",
            "in" : "query",
            "type" : "string",
            "description" : "The new value of the attribute. This parameter is required."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_playergroup"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/playerGroup/{id}/goals" : {
      "get" : {
        "tags" : [ "PlayerGroupApi" ],
        "description" : "Returns a list of all already finished goals of a specific group of players.\r\nIf the API key is not valid an analogous message is returned. It is also checked, if the\r\ngroup id is a positive number otherwise a message for an invalid number is returned.",
        "operationId" : "resource_PlayerGroupApi_getPlayerGroupFinishedGoals_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required path parameter as integer which uniquely identify the {@link PlayerGroup}."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this group belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_finishedgoal"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/playerGroup/{id}/avatar" : {
      "get" : {
        "tags" : [ "PlayerGroupApi" ],
        "description" : "Returns the avatar which is associated with a group of players. To identify the group its id and\r\nthe API key is needed to which the group belongs to.\r\nThe byte array of the avatar image is Base64-encoded to ensure that the data is transmitted\r\ncorrectly as String.\r\nIf the API key is not valid an analogous message is returned. It is also checked, if the id\r\nis a positive number otherwise a message for an invalid number is returned.",
        "operationId" : "resource_PlayerGroupApi_getAvatar_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required path parameter as integer which uniquely identify the {@link PlayerGroup}."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this group of players belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "string"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/playerGroup/{id}/achievements" : {
      "get" : {
        "tags" : [ "PlayerGroupApi" ],
        "description" : "Returns a list of all awarded achievements associated with the group of players of the\r\npassed id. If the API key is not valid an analogous message is returned. It is also\r\nchecked, if the player id is a positive number otherwise a message for an invalid number\r\nis returned.",
        "operationId" : "resource_PlayerGroupApi_getPlayerGroupAchievements_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required path parameter as integer which uniquely identify the {@link PlayerGroup}."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this group belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_achievement"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/playerGroup/{id}/badges" : {
      "get" : {
        "tags" : [ "PlayerGroupApi" ],
        "description" : "Returns a list of all awarded badges associated with the group of players of the passed\r\nid. If the API key is not valid an analogous message is returned. It is also checked,\r\nif the group id is a positive number otherwise a message for an invalid number is\r\nreturned.",
        "operationId" : "resource_PlayerGroupApi_getPlayerGroupBadges_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required path parameter as integer which uniquely identify the {@link PlayerGroup}."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this group belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_badge"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/playerGroup/*" : {
      "get" : {
        "tags" : [ "PlayerGroupApi" ],
        "description" : "Returns all group of players associated with the passed API key. If the API key is not\r\nvalid an analogous message is returned. It is also checked, if the player id is a\r\npositive number otherwise a message for an invalid number is returned.",
        "operationId" : "resource_PlayerGroupApi_getAll_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this group of players belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_playergroup"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/playerGroup/{id}" : {
      "get" : {
        "tags" : [ "PlayerGroupApi" ],
        "description" : "Returns the group of players associated with the passed id. If the API key is not\r\nvalid an analogous message is returned. It is also checked, if the player id is a\r\npositive number otherwise a message for an invalid number is returned.",
        "operationId" : "resource_PlayerGroupApi_getPlayerGroup_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required path parameter as integer which uniquely identify the {@link PlayerGroup}."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this group of players belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_playergroup"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
      ,
      "delete" : {
        "tags" : [ "PlayerGroupApi" ],
        "description" : "Removes the group with the assigned id from data base. It is checked, if the passed id is a\r\npositive number otherwise a message for an invalid number is returned. If the API key is not\r\nvalid an analogous message is returned.",
        "operationId" : "resource_PlayerGroupApi_deletePlayerGroup_DELETE",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required path parameter as integer which uniquely identify the {@link PlayerGroup}."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this group of players belongs to."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_playergroup"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/playerLevel/{id}/attributes" : {
      "put" : {
        "tags" : [ "PlayerLevelApi" ],
        "description" : "With this method the fields of a PlayerLevel can be changed. For this the id of the player level,\r\nthe API key of the specific organisation, the name of the field and the new value are needed.\r\nTo modify the name or the index of the level the new value has to be passed with the value field.\r\nIf the API key is not valid an analogous message is returned. It is also checked, if\r\nthe ids are a positive number otherwise a message for an invalid number is returned.",
        "operationId" : "resource_PlayerLevelApi_changePlayerLevelAttributes_PUT",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "The id of the player level that should be changed. This parameter is required."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which the player level belongs to."
          },
          {
            "name" : "attribute",
            "in" : "query",
            "type" : "string",
            "description" : "The name of the attribute which should be modified. This parameter is required.\r\nThe following names of attributes can be used to change the\r\nassociated field:\r\n\"levelName\" and \"levelIndex\"."
          },
          {
            "name" : "value",
            "in" : "query",
            "type" : "string",
            "description" : "The new value of the attribute. This parameter is required."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_playerlevel"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/playerLevel" : {
      "post" : {
        "tags" : [ "PlayerLevelApi" ],
        "description" : "Creates a new player level and generates the PlayerLevel-id. The organisation's\r\nAPI key is mandatory otherwise a warning with the hint for a non valid API key\r\nis returned.\r\nBy the creation the name and index of the player have to be passed. It is checked,\r\nif the index of the level is a positive number otherwise a message for the\r\ninvalid number is returned.",
        "operationId" : "resource_PlayerLevelApi_createNewPlayerLevel_POST",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this player level belongs to."
          },
          {
            "name" : "levelIndex",
            "in" : "query",
            "type" : "string",
            "description" : "The index of the level. This parameter is required."
          },
          {
            "name" : "levelName",
            "in" : "query",
            "type" : "string",
            "description" : "The name of the player level. This parameter is required."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_playerlevel"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/playerLevel/*" : {
      "get" : {
        "tags" : [ "PlayerLevelApi" ],
        "description" : "Returns all player level which are associated with the passed API key.\r\nIf the API key is not valid an analogous message is returned. It is also\r\nchecked, if the id is a positive number otherwise a message for an invalid\r\nnumber is returned.",
        "operationId" : "resource_PlayerLevelApi_getPlayerLevels_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which the player levels belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_playerlevel"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/playerLevel/{id}" : {
      "get" : {
        "tags" : [ "PlayerLevelApi" ],
        "description" : "Returns the player level associated with the passed id. If the API key is not\r\nvalid an analogous message is returned. It is also checked, if the id is a\r\npositive number otherwise a message for an invalid number is returned.",
        "operationId" : "resource_PlayerLevelApi_getPlayerLevel_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required path parameter as integer which uniquely identify the {@link PlayerLevel}."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this player level belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_playerlevel"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
      ,
      "delete" : {
        "tags" : [ "PlayerLevelApi" ],
        "description" : "Removes the layer level with the assigned id from data base. It is checked, if the passed id is a\r\npositive number otherwise a message for an invalid number is returned. If the API key is not\r\nvalid an analogous message is returned.",
        "operationId" : "resource_PlayerLevelApi_deletePlayerLevel_DELETE",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required path parameter as integer which uniquely identify the {@link PlayerLevel}."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this player level belongs to."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_playerlevel"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/present/textMessage" : {
      "post" : {
        "tags" : [ "PresentApi" ],
        "description" : "Creates a new text message as a present in a gamificated application, so the method\r\ngenerates the Present-id. The organisation's API key is mandatory otherwise a warning\r\nwith the hint for a non valid API key is returned.\r\nBy the creation the player-id of the sender and a list of the receiver ids are needed to\r\nbe passed. Additionally the content of the text message has to be passed.\r\nIt is checked, if the ids of the players are positive numbers otherwise a message for the\r\ninvalid number is returned.",
        "operationId" : "resource_PresentApi_createTextMessage_POST",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this text message belongs to."
          },
          {
            "name" : "content",
            "in" : "query",
            "type" : "string",
            "description" : "The content of the text message."
          },
          {
            "name" : "playerId",
            "in" : "query",
            "type" : "string",
            "description" : "The player who sends the text message as a present to other players. This\r\nfield must not be null."
          },
          {
            "name" : "receiverIds",
            "in" : "query",
            "type" : "string",
            "description" : "The player ids of the present's receivers. This field must not be null."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_textmessage"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/present/{playerId}/archive" : {
      "get" : {
        "tags" : [ "PresentApi" ],
        "description" : "This method returns all already archived messages of a specific player's presents.\r\nIf the API key is not valid an analogous message is returned.",
        "operationId" : "resource_PresentApi_getArchiveMessages_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "playerId",
            "in" : "path",
            "type" : "string",
            "description" : "The id of the player who owns the board. This field must not be null."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which the messages belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_presentarchived"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/present/{id}/deleteCurrent/{playerId}" : {
      "delete" : {
        "tags" : [ "PresentApi" ],
        "description" : "Removes the specific present with the assigned id from data base. It is checked, if the passed\r\nid is a positive number otherwise a message for an invalid number is returned. If the API key\r\nis not valid an analogous message is returned.",
        "operationId" : "resource_PresentApi_deleteCurrentPresent_DELETE",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required path parameter as integer which uniquely identify the {@link Present}."
          },
          {
            "name" : "playerId",
            "in" : "path",
            "type" : "string",
            "description" : "The present is removed from the player's board."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this present belongs to."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_presentaccepted"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/present/{playerId}/boardMessages" : {
      "get" : {
        "tags" : [ "PresentApi" ],
        "description" : "This method returns all already accepted messages of a specific player's current presents.\r\nIf the API key is not valid an analogous message is returned.",
        "operationId" : "resource_PresentApi_getCurrentBoardMessages_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "playerId",
            "in" : "path",
            "type" : "string",
            "description" : "The id of the player who owns the board with the current presents. This field\r\nmust not be null."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which the messages belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_presentaccepted"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/present/{playerId}/textMessages" : {
      "get" : {
        "tags" : [ "PresentApi" ],
        "description" : "This method returns all text messages of a specific player's current presents.\r\nIf the API key is not valid an analogous message is returned.",
        "operationId" : "resource_PresentApi_getCurrentTextMessage_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "playerId",
            "in" : "path",
            "type" : "string",
            "description" : "The id of the player who owns the board with the current presents. This field\r\nmust not be null."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which the text messages belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_textmessage"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/present/{presentId}/deny/{playerId}" : {
      "post" : {
        "tags" : [ "PresentApi" ],
        "description" : "With this method a player denies a present. So the present will be deleted from her/his\r\ninbox of the board.",
        "operationId" : "resource_PresentApi_denyPresent_POST",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "playerId",
            "in" : "path",
            "type" : "string",
            "description" : "The id of the player who denies the present. This field must not be null."
          },
          {
            "name" : "presentId",
            "in" : "path",
            "type" : "string",
            "description" : "The present that is denied. This field must not be null."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this present belongs to."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_present"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/present/{presentId}/send" : {
      "post" : {
        "tags" : [ "PresentApi" ],
        "description" : "With this method one present is sent to all specified receivers. So the present is stored\r\nin each inbox of the receivers.",
        "operationId" : "resource_PresentApi_send_POST",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "presentId",
            "in" : "path",
            "type" : "string",
            "description" : "The path parameter of the present's id that should be sent to the receivers."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this present belongs to."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_present"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/present/{presentId}/archive/{playerId}" : {
      "post" : {
        "tags" : [ "PresentApi" ],
        "description" : "With this method on present is archived. So the present is moved from the player's list of\r\ncurrent presents to an list of archived presents on the board.",
        "operationId" : "resource_PresentApi_archivePresent_POST",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "playerId",
            "in" : "path",
            "type" : "string",
            "description" : "The id of the player who archived the present. This field must not be null."
          },
          {
            "name" : "presentId",
            "in" : "path",
            "type" : "string",
            "description" : "The present that is archived. This field must not be null."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this present belongs to."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_present"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/present/{id}" : {
      "delete" : {
        "tags" : [ "PresentApi" ],
        "description" : "Removes the specific present with the assigned id from data base. It is checked, if the passed\r\nid is a positive number otherwise a message for an invalid number is returned. If the API key\r\nis not valid an analogous message is returned.",
        "operationId" : "resource_PresentApi_deletePresent_DELETE",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required path parameter as integer which uniquely identify the {@link Present}."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this present belongs to."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_present"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/present/{playerId}/imageMessages" : {
      "get" : {
        "tags" : [ "PresentApi" ],
        "description" : "This method returns all image messages of a specific player's current presents.\r\nIf the API key is not valid an analogous message is returned.",
        "operationId" : "resource_PresentApi_getCurrentImageMessages_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "playerId",
            "in" : "path",
            "type" : "string",
            "description" : "The id of the player who owns the board with the current presents. This field\r\nmust not be null."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which the image messages belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_imagemessage"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/present/{id}/deleteArchived/{playerId}" : {
      "delete" : {
        "tags" : [ "PresentApi" ],
        "description" : "Removes the specific present with the assigned id from data base and the from the board's list of archived\r\npresents. It is checked, if the passed id is a positive number otherwise a message for an invalid number\r\nis returned. If the API key is not valid an analogous message is returned.",
        "operationId" : "resource_PresentApi_deleteArchivedPresent_DELETE",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required path parameter as integer which uniquely identify the {@link Present}."
          },
          {
            "name" : "playerId",
            "in" : "path",
            "type" : "string",
            "description" : "The present is removed from the player's board."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this present belongs to."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_presentarchived"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/present/{playerId}/inbox" : {
      "get" : {
        "tags" : [ "PresentApi" ],
        "description" : "This method returns all presents of a player's inbox associated with the given API key and so\r\nall presents who belong to the associated organisation. If the API key is not valid an analogous\r\nmessage is returned.",
        "operationId" : "resource_PresentApi_getInbox_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "playerId",
            "in" : "path",
            "type" : "string",
            "description" : "The id of the player whose presents are returned. This field must not be null."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this present belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_present"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/present/imageMessage" : {
      "post" : {
        "tags" : [ "PresentApi" ],
        "description" : "Creates a new image message as a present in a gamificated application, so the method\r\ngenerates the Present-id. The organisation's API key is mandatory otherwise a warning\r\nwith the hint for a non valid API key is returned.\r\nBy the creation the player-id of the sender and a list of the receiver ids are needed to\r\nbe passed. These id have to be separated by commas. Additionally the image path of the\r\nimage has to be passed. The format of the image has to be .jpg or .png.\r\nIt is checked, if the ids of the players are positive numbers otherwise a message for the\r\ninvalid number is returned.",
        "operationId" : "resource_PresentApi_createImageMessage_POST",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this image message belongs to."
          },
          {
            "name" : "imagePath",
            "in" : "query",
            "type" : "string",
            "description" : "The path of the image. This field must not be null and the format of the image\r\nhas to be .jpg or .png."
          },
          {
            "name" : "playerId",
            "in" : "query",
            "type" : "string",
            "description" : "The player who sends the image message as a present to other players. This\r\nfield must not be null."
          },
          {
            "name" : "receiverIds",
            "in" : "query",
            "type" : "string",
            "description" : "The player ids of the present's receivers. This field must not be null."
          },
          {
            "name" : "text",
            "in" : "query",
            "type" : "string",
            "description" : "A short text comment that belong to the image."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_imagemessage"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/present/{presentId}/accept/{playerId}" : {
      "post" : {
        "tags" : [ "PresentApi" ],
        "description" : "With this method a player accepts a present. So the present will be moved from her/his inbox\r\nto the list of the player's current presents.",
        "operationId" : "resource_PresentApi_acceptPresent_POST",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "playerId",
            "in" : "path",
            "type" : "string",
            "description" : "The id of the player who accepts the present. This field must not be null."
          },
          {
            "name" : "presentId",
            "in" : "path",
            "type" : "string",
            "description" : "The present that is accepted. This field must not be null."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this present belongs to."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_present"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/reward/badge" : {
      "post" : {
        "tags" : [ "RewardApi" ],
        "description" : "Creates a new reward of type badge so the method generates its reward-id. The\r\norganisation's API key is mandatory otherwise a warning with the hint for a non valid\r\nAPI key is returned. Optionally the URL for an icon can be passed and a description for\r\nthe badge.",
        "operationId" : "resource_RewardApi_createBadge_POST",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this reward belongs to."
          },
          {
            "name" : "description",
            "in" : "query",
            "type" : "string",
            "description" : "Optionally a short text can be set to describe the badge."
          },
          {
            "name" : "name",
            "in" : "query",
            "type" : "string",
            "description" : "The required name of the badge."
          },
          {
            "name" : "url",
            "in" : "query",
            "type" : "string",
            "description" : "Optionally the URL of an image can be set that is associated with the badge."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_badge"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/reward/{id}/Coins" : {
      "put" : {
        "tags" : [ "RewardApi" ],
        "description" : "With this method the fields of one specific coin reward can be changed. For this the\r\nreward id, the API key of the specific organisation, the name of the field and the\r\nnew field's value are needed.\r\nTo modify the amount of coins the new amount has to be transfered with the attribute\r\nfield.\r\nIf the API key is not valid an analogous message is returned. It is also checked, if\r\nthe id is a positive number otherwise a message for an invalid number is returned.",
        "operationId" : "resource_RewardApi_changeCoinsReward_PUT",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required integer which uniquely identify the {@link Reward}."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this reward belongs to."
          },
          {
            "name" : "attribute",
            "in" : "query",
            "type" : "string",
            "description" : "The name of the attribute which should be modified. This parameter is required.\r\nThe following names of attributes can be used to change the associated field:\r\n\"amount\"."
          },
          {
            "name" : "value",
            "in" : "query",
            "type" : "string",
            "description" : "The new value of the attribute. This parameter is required."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_reward"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/reward" : {
      "post" : {
        "tags" : [ "RewardApi" ],
        "description" : "Creates a new reward and so the method generates the reward-id. The organisation's API\r\nkey is mandatory otherwise a warning with the hint for a non valid API key is returned.\r\nIt has to be defined which type of reward should be created, its name, description and\r\nrespectively it is a permanent or a volatile reward an URL for the icon or the amount\r\nof coins or points.",
        "operationId" : "resource_RewardApi_createNewReward_POST",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "amount",
            "in" : "query",
            "type" : "string",
            "description" : "If the type is a volatile reward like points or coins this parameter is used\r\nto represent their amount."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this reward belongs to."
          },
          {
            "name" : "description",
            "in" : "query",
            "type" : "string",
            "description" : "Optionally the description of the reward as String."
          },
          {
            "name" : "icon",
            "in" : "query",
            "type" : "string",
            "description" : "If the type is a permanent reward like a badge or achievement this parameter\r\nrepresents the URL of the associated image."
          },
          {
            "name" : "name",
            "in" : "query",
            "type" : "string",
            "description" : "A string that represents the name of the reward."
          },
          {
            "name" : "type",
            "in" : "query",
            "type" : "string",
            "description" : "The required type of the reward. A list of available reward types\r\ncan be received by {@link RewardApi#getRewardTypes}. The value of\r\nfield can be \"Achievement\", \"Badge\", \"Coins\", \"Points\" and \"ReceiveLevel\"."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_reward"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/reward/achievement/{id}" : {
      "get" : {
        "tags" : [ "RewardApi" ],
        "description" : "This method returns the icon of an specific achievement for example to show it the\r\nplayer who has just earned it. If the API key is not valid an analogous message is\r\nreturned. It is also checked, if the id is a positive number otherwise a message for\r\nan invalid number is returned.",
        "operationId" : "resource_RewardApi_getAchievementIcon_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "The required reward id."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this reward belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "string"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/reward/badge/{id}" : {
      "get" : {
        "tags" : [ "RewardApi" ],
        "description" : "This method returns the icon of an specific badge for example to show it the player\r\nwho has just earned it. If the API key is not valid an analogous message is returned.\r\nIt is also checked, if the id is a positive number otherwise a message for an invalid\r\nnumber is returned.",
        "operationId" : "resource_RewardApi_getBadgeIcon_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "The required reward id."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this reward belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "string"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/reward/achievement" : {
      "post" : {
        "tags" : [ "RewardApi" ],
        "description" : "Creates a new reward of type achievement so the method generates its reward-id. The\r\norganisation's API key is mandatory otherwise a warning with the hint for a non valid\r\nAPI key is returned. Optionally the URL for an icon can be passed and a description for\r\nthe achievement.",
        "operationId" : "resource_RewardApi_createAchievement_POST",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this reward belongs to."
          },
          {
            "name" : "description",
            "in" : "query",
            "type" : "string",
            "description" : "Optionally a short text can be set to describe the achievement."
          },
          {
            "name" : "name",
            "in" : "query",
            "type" : "string",
            "description" : "The required name of the achievement."
          },
          {
            "name" : "url",
            "in" : "query",
            "type" : "string",
            "description" : "Optionally the URL of an image can be set that is associated with the\r\nachievement."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_achievement"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/reward/{id}/Points" : {
      "put" : {
        "tags" : [ "RewardApi" ],
        "description" : "With this method the fields of one specific point reward can be changed. For this the\r\nreward id, the API key of the specific organisation, the name of the field and the\r\nnew field's value are needed.\r\nTo modify the amount of points the new amount has to be transfered with the attribute\r\nfield.\r\nIf the API key is not valid an analogous message is returned. It is also checked, if\r\nthe id is a positive number otherwise a message for an invalid number is returned.",
        "operationId" : "resource_RewardApi_changePointReward_PUT",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required integer which uniquely identify the {@link Reward}."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this reward belongs to."
          },
          {
            "name" : "attribute",
            "in" : "query",
            "type" : "string",
            "description" : "The name of the attribute which should be modified. This parameter is required.\r\nThe following names of attributes can be used to change the associated field:\r\n\"amount\"."
          },
          {
            "name" : "value",
            "in" : "query",
            "type" : "string",
            "description" : "The new value of the attribute. This parameter is required."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_reward"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/reward/*" : {
      "get" : {
        "tags" : [ "RewardApi" ],
        "description" : "Returns a list of all rewards associated with the passed API key and so all rewards\r\nwhich belong to a specific organisation. If the API key is not valid an analogous\r\nmessage is returned.",
        "operationId" : "resource_RewardApi_getRewards_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this reward belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_reward"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/reward/types" : {
      "get" : {
        "tags" : [ "RewardApi" ],
        "description" : "Returns a list of all available reward types associated with an API key that can\r\ncan created. If the API key is not valid an analogous message is returned.",
        "operationId" : "resource_RewardApi_getRewardTypes_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this reward belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "type" : "string"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/reward/{id}" : {
      "get" : {
        "tags" : [ "RewardApi" ],
        "description" : "This method returns one specific player who is identified by the passed id and the\r\nAPI key. If the API key is not valid an analogous message is returned. It is also\r\nchecked, if the id is a positive number otherwise a message for an invalid number\r\nis returned.",
        "operationId" : "resource_RewardApi_getReward_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required integer which uniquely identify the {@link Reward}."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this reward belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_reward"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
      ,
      "delete" : {
        "tags" : [ "RewardApi" ],
        "description" : "Removes a specific reward from the data base which is identified by the passed id and\r\nthe API key. But only if it is not associated to a goal. Then first the goal has to deleted.\r\nIf the API key is not valid an analogous message is returned. It is also checked, if\r\nthe id is a positive number otherwise a message for an invalid number is returned.",
        "operationId" : "resource_RewardApi_deleteReward_DELETE",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required integer which uniquely identify the {@link Reward} which should be\r\ndeleted."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this reward belongs to."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_reward"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/reward/level" : {
      "post" : {
        "tags" : [ "RewardApi" ],
        "description" : "Creates a new reward of type level so the method generates its reward-id. A level can\r\nbe a number or a status like novice or expert in the area of specific tasks. The\r\norganisation's API key is mandatory otherwise a warning with the hint for a non valid\r\nAPI key is returned.",
        "operationId" : "resource_RewardApi_createReceiveLevel_POST",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "amount",
            "in" : "query",
            "type" : "string",
            "description" : "The required level index greater then zero."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this reward belongs to."
          },
          {
            "name" : "description",
            "in" : "query",
            "type" : "string",
            "description" : "Optionally a short text can be set to describe the level."
          },
          {
            "name" : "name",
            "in" : "query",
            "type" : "string",
            "description" : "The required name of the level can be set."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_receivelevel"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/reward/{id}/changeBadge" : {
      "put" : {
        "tags" : [ "RewardApi" ],
        "description" : "With this method the fields of one specific badge can be changed. For this the\r\nreward id, the API key of the specific organisation, the name of the field and the\r\nnew field's value are needed.\r\nTo modify the name and description the new string has to be transfered with the attribute\r\nfield. For a new icon the path of the new image is needed in the attribute parameter.\r\nThe format of the image has to be .jpg or .png.\r\nIf the API key is not valid an analogous message is returned. It is also checked, if\r\nthe id is a positive number otherwise a message for an invalid number is returned.",
        "operationId" : "resource_RewardApi_changeBadge_PUT",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required integer which uniquely identify the {@link Reward}."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this reward belongs to."
          },
          {
            "name" : "attribute",
            "in" : "query",
            "type" : "string",
            "description" : "The name of the attribute which should be modified. This parameter is required.\r\nThe following names of attributes can be used to change the associated field:\r\n\"name\", \"description\" and \"icon\"."
          },
          {
            "name" : "value",
            "in" : "query",
            "type" : "string",
            "description" : "The new value of the attribute. This parameter is required."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_reward"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/reward/coins" : {
      "post" : {
        "tags" : [ "RewardApi" ],
        "description" : "Creates a new reward of type coins so the method generates its reward-id. The\r\norganisation's API key is mandatory otherwise a warning with the hint for a non valid\r\nAPI key is returned.",
        "operationId" : "resource_RewardApi_createCoinsReward_POST",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "amount",
            "in" : "query",
            "type" : "string",
            "description" : "The required amount of coins greater then zero that can be earned."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this reward belongs to."
          },
          {
            "name" : "description",
            "in" : "query",
            "type" : "string",
            "description" : "Optionally a short text can be set to describe the reward."
          },
          {
            "name" : "name",
            "in" : "query",
            "type" : "string",
            "description" : "The required name of the coins reward."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_coins"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/reward/{id}/changeAchievement" : {
      "put" : {
        "tags" : [ "RewardApi" ],
        "description" : "With this method the fields of one specific achievement can be changed. For this the\r\nreward id, the API key of the specific organisation, the name of the field and the\r\nnew field's value are needed.\r\nTo modify the name and description the new string has to be transfered with the attribute\r\nfield. For a new icon the path of the new image is needed in the attribute parameter.\r\nThe format of the image has to be .jpg or .png.\r\nIf the API key is not valid an analogous message is returned. It is also checked, if\r\nthe id is a positive number otherwise a message for an invalid number is returned.",
        "operationId" : "resource_RewardApi_changeAchievement_PUT",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required integer which uniquely identify the {@link Reward}."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this reward belongs to."
          },
          {
            "name" : "attribute",
            "in" : "query",
            "type" : "string",
            "description" : "The name of the attribute which should be modified. This parameter is required.\r\nThe following names of attributes can be used to change the associated field:\r\n\"name\", \"description\" and \"icon\"."
          },
          {
            "name" : "value",
            "in" : "query",
            "type" : "string",
            "description" : "The new value of the attribute. This parameter is required."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_reward"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/reward/{id}/ReceiveLevel" : {
      "put" : {
        "tags" : [ "RewardApi" ],
        "description" : "With this method the fields of one specific level reward can be changed. For this the\r\nreward id, the API key of the specific organisation, the name of the field and the\r\nnew field's value are needed.\r\nTo modify the name and amount of the level the new name respectively amount has to be\r\ntransfered with the attribute field.\r\nIf the API key is not valid an analogous message is returned. It is also checked, if\r\nthe id is a positive number otherwise a message for an invalid number is returned.",
        "operationId" : "resource_RewardApi_changeLevel_PUT",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required integer which uniquely identify the {@link Reward}."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this reward belongs to."
          },
          {
            "name" : "attribute",
            "in" : "query",
            "type" : "string",
            "description" : "The name of the attribute which should be modified. This parameter is required.\r\nThe following names of attributes can be used to change the associated field:\r\n\"amount\" and \"name\"."
          },
          {
            "name" : "value",
            "in" : "query",
            "type" : "string",
            "description" : "The new value of the attribute. This parameter is required."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_reward"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/reward/points" : {
      "post" : {
        "tags" : [ "RewardApi" ],
        "description" : "Creates a new reward of type points so the method generates its reward-id. The\r\norganisation's API key is mandatory otherwise a warning with the hint for a non valid\r\nAPI key is returned.",
        "operationId" : "resource_RewardApi_createPointReward_POST",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "amount",
            "in" : "query",
            "type" : "string",
            "description" : "The required amount of points greater then zero that can be earned."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this reward belongs to."
          },
          {
            "name" : "description",
            "in" : "query",
            "type" : "string",
            "description" : "Optionally a short text can be set to describe the reward."
          },
          {
            "name" : "name",
            "in" : "query",
            "type" : "string",
            "description" : "The required name of the points reward."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_points"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/role/{id}" : {
      "get" : {
        "tags" : [ "RoleApi" ],
        "description" : "Gets a specific role of an organisation so the id of the organisation and its API key are needed.\r\nIf the API key is not valid an analogous message is returned. It is also checked, if the id is a positive\r\nnumber otherwise a message for an invalid number is returned.",
        "operationId" : "resource_RoleApi_get_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required path parameter id of the role that should be gotten. This parameter is required."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this role belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_role"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
      ,
      "delete" : {
        "tags" : [ "RoleApi" ],
        "description" : "Deletes a specific role of an organisation so the id of the organisation and its API key are needed.\r\nIf the API key is not valid an analogous message is returned. It is also checked, if the id is a positive\r\nnumber otherwise a message for an invalid number is returned.",
        "operationId" : "resource_RoleApi_delete_DELETE",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required path parameter id of the role that should be gotten. This parameter is required."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this role belongs to."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_role"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/role/*" : {
      "get" : {
        "tags" : [ "RoleApi" ],
        "description" : "Gets all roles of a specific organisation that have been created. If the API key is not\r\nvalid an analogous message is returned.",
        "operationId" : "resource_RoleApi_getAll_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this role belongs to. This field must not be null."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_role"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/role/{id}/attributes" : {
      "put" : {
        "tags" : [ "RoleApi" ],
        "description" : "With this method the name field of one role can be changed. For this the id of the role, the API key of the\r\nspecific organisation, the name of the field and the new value are needed.\r\nIf the API key is not valid an analogous message is returned.",
        "operationId" : "resource_RoleApi_changeAttributes_PUT",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "The id of the role that should be changed. This parameter is required."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this role belongs to."
          },
          {
            "name" : "attribute",
            "in" : "query",
            "type" : "string",
            "description" : "The name of the attribute which should be changed.  This parameter is required.\r\nThe following names of attributes can be used to change the associated field:\r\n\"name\"."
          },
          {
            "name" : "value",
            "in" : "query",
            "type" : "string",
            "description" : "The new value of the attribute. This parameter is required."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_role"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/role" : {
      "post" : {
        "tags" : [ "RoleApi" ],
        "description" : "Creates a new role for the organisation to which the API key belongs to. Because\r\nof this API key the created role is specific to this organisation.\r\nIf the API key is not valid an analogous message is returned.",
        "operationId" : "resource_RoleApi_create_POST",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this role belongs to."
          },
          {
            "name" : "roleName",
            "in" : "query",
            "type" : "string",
            "description" : "The required name of the new role. This field must not be null."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_role"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/rule/point" : {
      "post" : {
        "tags" : [ "RuleApi" ],
        "description" : "Creates a new points rule. By the creation the amount of points which has to be reached to fulfil the\r\ngoal and also its name are needed. A description can also be made.\r\nIf a goal is associated with a points rule and is also repeatable the goal will be added once only to the\r\nplayer's or respectively group's list of already finished goals. The rewards of such a goal are also awarded\r\nonly once. So a points rule can be fulfilled once only although the associated goal is repeatable.\r\nIf the API key is not valid an analogous message is returned. It is also checked, if the id is a positive\r\nnumber otherwise a message for an invalid number is returned.",
        "operationId" : "resource_RuleApi_createNewPointRule_POST",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this rule belongs to."
          },
          {
            "name" : "description",
            "in" : "query",
            "type" : "string",
            "description" : "Optionally the description of the rule can be passed. This can help the player to understand\r\nwhich tasks she/he to fulfil."
          },
          {
            "name" : "name",
            "in" : "query",
            "type" : "string",
            "description" : "The name of the task rule. This parameter is required."
          },
          {
            "name" : "points",
            "in" : "query",
            "type" : "string",
            "description" : "The amount of points which should be reached."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_getpointsrule"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/rule/{id}" : {
      "get" : {
        "tags" : [ "RuleApi" ],
        "description" : "This method gets one specific goal rule which is identified by the given id and the API key.\r\nIf the API key is not valid an analogous message is returned. It is also checked, if the\r\nid is a positive number otherwise a message for an invalid number is returned.",
        "operationId" : "resource_RuleApi_getRule_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required integer as path parameter which uniquely identify the goal rule."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this rule belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_goalrule"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
      ,
      "delete" : {
        "tags" : [ "RuleApi" ],
        "description" : "Removes a specific goal rule from the data base which is identified by the given id and the\r\nAPI key. But only if the goal rule is not associated to a goal. Then first the goal has to deleted.\r\nIf the API key is not valid an analogous message is returned. It is also checked, if the id\r\nis a positive number otherwise a message for an invalid number is returned.",
        "operationId" : "resource_RuleApi_deleteRule_DELETE",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required integer as path parameter which uniquely identify the goal rule."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this rule belongs to."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_goalrule"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/rule/*" : {
      "get" : {
        "tags" : [ "RuleApi" ],
        "description" : "This method collects all available rules associated with the given API key and so all goal rules which\r\nbelong to the associated organisation. If the API key is not valid an analogous message\r\nis returned.",
        "operationId" : "resource_RuleApi_getRules_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this rule belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_goalrule"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/rule/task" : {
      "post" : {
        "tags" : [ "RuleApi" ],
        "description" : "Creates a new task rule. By the creation the type of rule (DoAllTasksRule or DoAnyTaskRule) has to be defined, the rule's name,\r\ndescription and the ids which should be associated with this rule.\r\nIf the API key is not valid an analogous message is returned. It is also checked, if the id is a positive\r\nnumber otherwise a message for an invalid number is returned.",
        "operationId" : "resource_RuleApi_createNewTaskRule_POST",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this rule belongs to."
          },
          {
            "name" : "description",
            "in" : "query",
            "type" : "string",
            "description" : "Optionally the description of the rule can be passed. This can help the player to understand\r\nwhich tasks she/he to fulfil."
          },
          {
            "name" : "name",
            "in" : "query",
            "type" : "string",
            "description" : "The name of the task rule. This parameter is required."
          },
          {
            "name" : "tasks",
            "in" : "query",
            "type" : "string",
            "description" : "The list of task ids that are have to be respective can be fulfilled to complete the goal.\r\nThese ids are separated by commas."
          },
          {
            "name" : "type",
            "in" : "query",
            "type" : "string",
            "description" : "The type of the task rule, this can be \"DoAllTasksRule\" or \"DoAnyTaskRule\".\r\nThis field must not be null."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_taskrule"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/rule/{id}/attributes" : {
      "put" : {
        "tags" : [ "RuleApi" ],
        "description" : "With this method the fields of one specific goal rule can be changed. For this the\r\ngoal rule id, the API key of the specific organisation, the name of the field and\r\nthe new field's value are needed.\r\nTo modify the name or description of the goal rule the new string has to be passed\r\nwith the attribute field. If the\r\nIf the API key is not valid an analogous message is returned. It is also checked,\r\nif the id is a positive number otherwise a message for an invalid number is returned.",
        "operationId" : "resource_RuleApi_changeRuleAttributes_PUT",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "The id of the goal rule that should be changed. This parameter is required."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this goal rule belongs to."
          },
          {
            "name" : "attribute",
            "in" : "query",
            "type" : "string",
            "description" : "The name of the attribute which should be modified. This parameter is required.\r\nThe following names of attributes can be used to change the associated field:\r\n\"description\" and \"name\". The tasks that have to be completed or the amount of\r\npoints that have to be reached, can't be changed later."
          },
          {
            "name" : "value",
            "in" : "query",
            "type" : "string",
            "description" : "The new value of the attribute. This parameter is required."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_goalrule"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/task/{id}" : {
      "get" : {
        "tags" : [ "TaskApi" ],
        "description" : "Returns the task associated with the passed id and API key. If the API key is not\r\nvalid an analogous message is returned. It is also checked, if the player id is a\r\npositive number otherwise a message for an invalid number is returned.",
        "operationId" : "resource_TaskApi_getTask_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required path parameter as integer which uniquely identify the Task."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this task belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_task"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
      ,
      "delete" : {
        "tags" : [ "TaskApi" ],
        "description" : "Removes the task with the assigned id and associated API key from data base. But only if\r\nthe task is not associated to a goal rule or is an offer on the marketplace. Then first these\r\nelements have to deleted.\r\n\r\nConsider that if a task is deleted all finished tasks that contains this task are also deleted!\r\nSo these finished tasks are also removed of the player's list who has completed it.\r\nIt is checked, if the passed id is a positive number otherwise a message for an invalid number\r\nis returned. If the API key is not valid an analogous message is returned.",
        "operationId" : "resource_TaskApi_deleteTask_DELETE",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required integer which uniquely identify the Task."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this task belongs to."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_task"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/task/tradeable/*" : {
      "get" : {
        "tags" : [ "TaskApi" ],
        "description" : "Returns a list of all tasks which are tradeable and associated with the passed API key. If the key is not\r\nvalid an analogous message is returned.",
        "operationId" : "resource_TaskApi_getTradeableTasks_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which these tasks belong to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_task"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/task/notDone" : {
      "get" : {
        "tags" : [ "TaskApi" ],
        "description" : "Gets all tasks that are not done for at least one time.",
        "operationId" : "resource_TaskApi_getTasksNotDone_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to the specific organisation,\r\nto which these task belong to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_task"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/task/{id}/attributes" : {
      "put" : {
        "tags" : [ "TaskApi" ],
        "description" : "With this method the fields of a Task can be changed. For this the id of the\r\ntask, the API key of the specific organisation, the name of the field and the new\r\nvalue are needed.\r\nTo modify the name or the description the new String has to be passed with the\r\nattribute field. A new list of roles can be passed when their ids are separated by\r\ncommas. Also the task can be set tradeable or not by passing the value true or false.\r\nIf the API key is not valid an analogous message is returned. It is also checked, if\r\nthe ids are a positive number otherwise a message for an invalid number is returned.",
        "operationId" : "resource_TaskApi_changeTaskAttributes_PUT",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "The id of the task that should be changed. This parameter is required."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this task belongs to."
          },
          {
            "name" : "attribute",
            "in" : "query",
            "type" : "string",
            "description" : "The name of the attribute which should be modified. This parameter is required.\r\nThe following names of attributes can be used to change the associated field:\r\n\"taskName\", \"description\", \"tradeable\" and \"roles\"."
          },
          {
            "name" : "value",
            "in" : "query",
            "type" : "string",
            "description" : "The new value of the attribute. This parameter is required."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_task"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/task" : {
      "post" : {
        "tags" : [ "TaskApi" ],
        "description" : "Creates a new task and so the method generates the task-id. The organisation's API key\r\nis mandatory otherwise a warning with the hint for a non valid API key is returned.\r\nBy the creation values for its name, a short description what have to done and the roles\r\nwho are allowed to complete the task.\r\nIt is checked, if the id of the roles are positive numbers otherwise a message for the\r\ninvalid number is returned.",
        "operationId" : "resource_TaskApi_createNewTask_POST",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this task belongs to."
          },
          {
            "name" : "description",
            "in" : "query",
            "type" : "string",
            "description" : "Optional a short description can be set. This can be for example explain what\r\na player has to do to complete the task."
          },
          {
            "name" : "name",
            "in" : "query",
            "type" : "string",
            "description" : "The name of the task. This parameter is required."
          },
          {
            "name" : "roleIds",
            "in" : "query",
            "default" : "null",
            "type" : "string",
            "description" : "Optionally a list of role ids separated by commas which are allowed to fulfil the\r\ntask."
          },
          {
            "name" : "tradeable",
            "in" : "query",
            "default" : "false",
            "type" : "string",
            "description" : "This field specifies whether the task is tradeable or not. The default value is\r\nset to not tradeable (false)."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_task"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/task/tradeableNotDone" : {
      "get" : {
        "tags" : [ "TaskApi" ],
        "description" : "Gets all tradeable tasks that are not done for at least one time.",
        "operationId" : "resource_TaskApi_getTradeableTasksNotDone_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to the specific organisation,\r\nto which these task belong to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_task"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/task/{id}/complete/{playerId}" : {
      "post" : {
        "tags" : [ "TaskApi" ],
        "description" : "This method completes a task with the assigned id and associated API key. The player-id\r\nrepresents the player who has completed the task. The task is added to the list of\r\nfinished tasks of this player. Thereby the task becomes a finished task object and the\r\ntime and date is also stored when the task was officially be done.",
        "operationId" : "resource_TaskApi_completeTask_POST",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "id",
            "in" : "path",
            "type" : "string",
            "description" : "Required integer which uniquely identify the Task."
          },
          {
            "name" : "playerId",
            "in" : "path",
            "type" : "string",
            "description" : "The if ot the player who has completed the task. This parameter is required."
          },
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this task belongs to."
          },
          {
            "name" : "finishedDate",
            "in" : "query",
            "type" : "string",
            "description" : "Optionally the local tate time can be passed when the task was finished. If the\r\nvalue is null, the finshedDate is set to the time and date when the query was\r\nsent."
          }
        ],
        "responses" : {
          "201" : {
            "schema" : {
"description" : "",
"$ref" : "#/definitions/json_task"
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/task/*" : {
      "get" : {
        "tags" : [ "TaskApi" ],
        "description" : "Returns a list of all tasks associated with the passed API key. If the key is not\r\nvalid an analogous message is returned.",
        "operationId" : "resource_TaskApi_getTasks_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which this task belongs to."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_task"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
    ,
    "/task/specificTasks" : {
      "get" : {
        "tags" : [ "TaskApi" ],
        "description" : "This method returns only the requested tasks. This can be used, when more than one task is needed but not\r\nall tasks.",
        "operationId" : "resource_TaskApi_getSpecificTasks_GET",
        "produces" : [ "application/json" ],
        "parameters" : [
          {
            "name" : "apiKey",
            "in" : "query",
            "type" : "string",
            "description" : "The valid query parameter API key affiliated to one specific organisation,\r\nto which these tasks belong to."
          },
          {
            "name" : "taskIds",
            "in" : "query",
            "default" : "null",
            "type" : "string",
            "description" : "The ids of the requestes tasks. These are passed as a comma separated list."
          }
        ],
        "responses" : {
          "200" : {
            "schema" : {
"description" : "",
"type" : "array",
"items" : {
  "$ref" : "#/definitions/json_task"
}
            },
            "headers" : {
            },
            "description" : "Success"
          },
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
    }
  }
}
